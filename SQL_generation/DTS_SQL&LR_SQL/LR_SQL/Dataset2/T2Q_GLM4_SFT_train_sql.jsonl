{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue of companies of each founder.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the number of manufactures that are based in Tokyo or Beijing.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name of each manufacturer along with the name and price of its most expensive product.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the number of companies created by Andy.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Who is the founders of companies whose first letter is S?", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Who is the founder of Sony?", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the average, maximum and total revenues of all companies?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the average price across all products?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of products produced by both Creative Labs and Sony?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name of the products with a price less than or equal to $200.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products WHERE price  <=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the number of products with a price larger than or equal to $180.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM products WHERE price >= 180;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is all the product data, as well as  each product's manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the sum of revenue from companies with headquarters in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the average price of all products with manufacturer code equal to 2.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products WHERE manufacturer  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the average prices of products, grouped by manufacturer code?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the names of all the products in the store.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many different products are produced in each headquarter city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names and prices of all products in the store?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the headquarter of the company whose founder is James?", "output": "```gerenated SQL\n-- SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the average prices of products, grouped by manufacturer name?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the founder of Sony.", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many products are there for each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue created by the companies whose headquarter is located at Austin.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names, headquarters and founders of the company with the highest revenue?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name and price of the cheapest product.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the name and price of the cheapest product?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the average price of all the products.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the average prices of all products from each manufacture, and list each company's name.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the average prices of products for each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of all products?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Where is the headquarter of the company founded by James?", "output": "```gerenated SQL\n-- SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many manufacturers have headquarters in either Tokyo or Beijing?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names and revenues of the companies with the highest revenues in each headquarter city?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the number of products for each manufacturer, showing the name of each company.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of companies with revenue between 100 and 150?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find all information of all the products with a price between $60 and $120.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select all the data from the products and each product's manufacturer.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the number of different products that are produced by companies at different headquarter cities.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the name of product that is produced by both companies Creative Labs and Sony.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of companies started by founder?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the names and the prices of all the products in the store.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name and revenue of the company that earns the highest revenue in each city.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is all the information of all the products that have a price between 60 and 120?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Give the distinct headquarters of manufacturers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT headquarter FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the codes and names of the cheapest products in each category?", "output": "```gerenated SQL\n-- SQL: SELECT code ,  name ,  MIN(price) FROM products GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the code of the product that is cheapest in each product category.", "output": "```gerenated SQL\n-- SQL: SELECT code ,  name ,  MIN(price) FROM products GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue for each manufacturer.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the average, maximum, and total revenues across all manufacturers.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the average price of products with manufacturer codes equal to 2?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products WHERE manufacturer  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "For each manufacturer name, what are the names and prices of their most expensive product?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many products are not made by Sony?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the name of companies that do not make DVD drive.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the different cities listed?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT headquarter FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the founder of the company whose name begins with the letter 'S'.", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of manufacturers with revenue greater than the average of all revenues?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of companies that do not make DVD drives?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Which game type has least number of games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many games are played for all students?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many students play each sport?", "output": "```gerenated SQL\n-- SQL: SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all male students who do not play football?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  \"Football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show total hours per week and number of games played for student David Shieber.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  \"David\" AND t2.lname  =  \"Shieber\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show ids for all students who have advisor 1121.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE advisor  =  1121;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Which game type has most number of games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all student ids and the number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who don't have any sports.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many different students are involved in sports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the advisors", "output": "```gerenated SQL\n-- SQL: SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "How many different students play games?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show total hours per week and number of games played for students under 20.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the total number of hours per week and number of games played by students under 20?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all female students who play football?", "output": "```gerenated SQL\n-- SQL: SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  \"football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the type of video game Call of Destiny.", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games WHERE gname  =  \"Call of Destiny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What type has the most games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all game names played by at least 1000 hours.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all game ids and the number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video games and their types in the order of their names.", "output": "```gerenated SQL\n-- SQL: SELECT gname ,  gtype FROM video_games ORDER BY gname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the names of all games played by Linda Smith?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show first name for all students with major 600.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM student WHERE major  =  600;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What is the name of the game that has been played the most?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "List ids for all student who are on scholarship.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first and last name of all students who play Football or Lacrosse?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  \"Football\" OR t1.sportname  =  \"Lacrosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first and last name of the student who played the most sports?", "output": "```gerenated SQL\n-- SQL: SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show all male student ids who don't play football.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  \"Football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show the average, minimum, and maximum age for different majors.", "output": "```gerenated SQL\n-- SQL: SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the first names for all students who are from the major numbered 600?", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM student WHERE major  =  600;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "output": "```gerenated SQL\n-- SQL: SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Call of Destiny\" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Works of Widenius\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What type of game is Call of Destiny?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games WHERE gname  =  \"Call of Destiny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all student IDs with the number of sports and total number of games played", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the ids for all sporty students who are on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Find the last and first name of students who are playing Football or Lacrosse.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  \"Football\" OR t1.sportname  =  \"Lacrosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the student ids for those on scholarship in major number 600?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the total number of all football games played by scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who are on scholarship and have major 600.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show ids of students who play video game and play sports.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the total number of games played?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video game types and the number of video games in each type.", "output": "```gerenated SQL\n-- SQL: SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Which sport has most number of students on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all sport name and the number of students.", "output": "```gerenated SQL\n-- SQL: SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the names of all the video games and their types in alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT gname ,  gtype FROM video_games ORDER BY gname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all student IDs with more than total 10 hours per week on all sports played.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  \"Lacrosse\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the types of video games and how many are in each type?", "output": "```gerenated SQL\n-- SQL: SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show ids for all students who live in CHI.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE city_code  =  \"CHI\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are ids and total number of hours played for each game?", "output": "```gerenated SQL\n-- SQL: SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all game names played by Linda Smith", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "output": "```gerenated SQL\n-- SQL: SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Call of Destiny\" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Works of Widenius\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the names of all video games that are collectible cards?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM video_games WHERE gtype  =  \"Collectible card game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video games with type Collectible card game.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM video_games WHERE gtype  =  \"Collectible card game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the count of different game types?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT gtype) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the different types of video games?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT gtype FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many games are played for all football games by students on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first name and last name of the student who have most number of sports?", "output": "```gerenated SQL\n-- SQL: SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students and number of hours played?", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Count the number of video games with Massively multiplayer online game type .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students who are not video game players?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show last names for all student who are on scholarship.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who live in CHI?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE city_code  =  \"CHI\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many different types of sports do we offer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT sportname) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show the game name that has most number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the average, minimum, and max ages for each of the different majors?", "output": "```gerenated SQL\n-- SQL: SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who are female and play football.", "output": "```gerenated SQL\n-- SQL: SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  \"football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "How many students play video games?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the type with the fewest games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who have advisor number 1121?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE advisor  =  1121;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the sport with the most scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the ids of all students along with how many sports and games did they play?", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students who played video games and sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the last names for all scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video game types.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT gtype FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show all advisors who have at least two students.", "output": "```gerenated SQL\n-- SQL: SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many sports do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT sportname) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many students play sports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who is the nominee who has been nominated for the most musicals?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  \"The Phantom of the Opera\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Show names of actors in descending order of the year their musical is awarded.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  \"The Phantom of the Opera\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many musicals has each nominee been nominated for?", "output": "```gerenated SQL\n-- SQL: SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" INTERSECT SELECT nominee FROM musical WHERE award  =  \"Drama Desk award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who have been nominated more than two times?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the duration of the actor with the greatest age.", "output": "```gerenated SQL\n-- SQL: SELECT duration FROM actor ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Count the number of actors.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors, ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "How many actors are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the different nominees of musicals that have an award that is not the Tony Award.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT nominee FROM musical WHERE award != \"Tony award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the characters and durations for each actor.", "output": "```gerenated SQL\n-- SQL: SELECT character ,  duration FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List the nominees that have been nominated more than two musicals.", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT nominee FROM musical WHERE award != \"Tony award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Show names of actors and names of musicals they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "List the name of actors in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" OR award  =  \"Cleavant Derricks\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "List the name of actors whose age is not 20.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor WHERE age != 20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What is the duration of the oldest actor?", "output": "```gerenated SQL\n-- SQL: SELECT duration FROM actor ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors who are not 20 years old?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor WHERE age != 20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Please show the nominee who has been nominated the greatest number of times.", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the characters for actors, ordered by age descending.", "output": "```gerenated SQL\n-- SQL: SELECT character FROM actor ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List the most common result of the musicals.", "output": "```gerenated SQL\n-- SQL: SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Show names of musicals and the number of actors who have appeared in the musicals.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of musicals who have no actors?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of musicals with nominee \"Bob Fosse\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE nominee  =  \"Bob Fosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors and the musicals that they are in?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" OR award  =  \"Cleavant Derricks\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors ordered descending by the year in which their musical was awarded?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the most frequent result across all musicals.", "output": "```gerenated SQL\n-- SQL: SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show different nominees and the number of musicals they have been nominated.", "output": "```gerenated SQL\n-- SQL: SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the characters of actors in descending order of age?", "output": "```gerenated SQL\n-- SQL: SELECT character FROM actor ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Show names of musicals which have at least three actors.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the characters and duration of actors?", "output": "```gerenated SQL\n-- SQL: SELECT character ,  duration FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the names of musicals who have the nominee Bob Fosse.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE nominee  =  \"Bob Fosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "How many distinct companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT company) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the investors who have invested in two or more entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the weights of entrepreneurs in descending order of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "List the companies of entrepreneurs in descending order of money requested.", "output": "```gerenated SQL\n-- SQL: SELECT company FROM entrepreneur ORDER BY money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "How many entrepreneurs correspond to each investor?", "output": "```gerenated SQL\n-- SQL: SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Show the company of the tallest entrepreneur.", "output": "```gerenated SQL\n-- SQL: SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What is the investor that has invested in the most number of entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Which company was started by the entrepreneur with the greatest height?", "output": "```gerenated SQL\n-- SQL: SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the average money requested across all entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(money_requested) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "List the names of people that are not entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the total money requested by entrepreneurs with height more than 1.85?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors that have invested in at least two entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  \"Simon Woodroffe\" OR t1.investor  =  \"Peter Jones\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the weight of the shortest person?", "output": "```gerenated SQL\n-- SQL: SELECT weight FROM people ORDER BY height ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of people who are not entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the companies and investors that correspond to each entrepreneur?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  investor FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the weight of the shortest person.", "output": "```gerenated SQL\n-- SQL: SELECT weight FROM people ORDER BY height ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the name of the heaviest entrepreneur.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of people, ordered by weight ascending.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people ORDER BY weight ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "output": "```gerenated SQL\n-- SQL: SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What is the average money requested by all entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(money_requested) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the investor who have invested in the greatest number of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT company FROM entrepreneur ORDER BY money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "List the companies and the investors of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  investor FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Give the total money requested by entrepreneurs who are taller than 1.85.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "output": "```gerenated SQL\n-- SQL: SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != \"Rachel Elnaugh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "output": "```gerenated SQL\n-- SQL: SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  \"Simon Woodroffe\" OR t1.investor  =  \"Peter Jones\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != \"Rachel Elnaugh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Count the number of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "List the names of entrepreneurs and their companies in descending order of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "How many entrepreneurs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What is the average price range of hotels for each each star rating code?", "output": "```gerenated SQL\n-- SQL: SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the price ranges of hotels?", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the transportation method most people choose to get to tourist attractions.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Features` (\r\n  Feature_ID INTEGER,\r\n  Feature_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attraction_Features` (\r\n  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)\r\n);\n\n", "input": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find all the locations whose names contain the word \"film\".", "output": "```gerenated SQL\n-- SQL: SELECT location_name FROM locations WHERE location_name LIKE \"%film%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the details and star ratings of the three hotels with the lowest price ranges?", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the average prices of hotels grouped by their pet policy.", "output": "```gerenated SQL\n-- SQL: SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Attraction_Types` (\r\n  Attraction_Type_Code CHAR(15) PRIMARY KEY,\r\n  Attraction_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the description and code of the attraction type most tourist attractions belong to.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price of hotels for different pet policy.", "output": "```gerenated SQL\n-- SQL: SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Museums` (\r\n  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Museum_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details and opening hours of the museums?", "output": "```gerenated SQL\n-- SQL: SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the address of the location named \"UK Gallery\".", "output": "```gerenated SQL\n-- SQL: SELECT address FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  \"game1\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Royal_Family` (\r\n  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Royal_Family_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "output": "```gerenated SQL\n-- SQL: SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which location names contain the word \"film\"?", "output": "```gerenated SQL\n-- SQL: SELECT location_name FROM locations WHERE location_name LIKE \"%film%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Shops` (\r\n  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Shop_Details VARCHAR(255)\r\n);\n\n", "input": "Find the details of the shops that can be reached by walk.", "output": "```gerenated SQL\n-- SQL: SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions are visited at least twice? Give me their names and ids.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Marcelle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Find the total number of available hotels.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Shops` (\r\n  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Shop_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the shops that can be accessed by walk?", "output": "```gerenated SQL\n-- SQL: SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and star rating of each hotel and sort them in increasing order of price.", "output": "```gerenated SQL\n-- SQL: SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Tell me the price ranges for all the hotels.", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What is the detail of each visitor?", "output": "```gerenated SQL\n-- SQL: SELECT tourist_details FROM visitors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and details of all the staff members.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  other_details FROM staff;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Find the visit date and details of the tourist whose detail is 'Vincent'", "output": "```gerenated SQL\n-- SQL: SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and star rating of each hotel, ordered by its price from low to high.", "output": "```gerenated SQL\n-- SQL: SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"US museum\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "How many available hotels are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"254 Ottilie Junction\" OR t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Street_Markets` (\r\n  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Market_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the details of all the markets that are accessible by walk or bus.", "output": "```gerenated SQL\n-- SQL: SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\" OR  t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and ids of tourist attractions that are visited at least two times.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the address of the location \"UK Gallery\"?", "output": "```gerenated SQL\n-- SQL: SELECT address FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"film festival\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and ids of the tourist attractions that are visited at most once?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the details and star ratings of the 3 least expensive hotels.", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Find all the distinct visit dates.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT visit_date FROM visits;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price range of hotels that have 5 star ratings and allow pets.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the details of the top 3 most expensive hotels.", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show all distinct location names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location_name FROM locations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the three most expensive hotels?", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions that can be accessed by bus?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM tourist_attractions WHERE how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "How many distinct names are associated with all the photos?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM photos;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"film festival\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM tourist_attractions WHERE how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Hotel_Star_Ratings` (\r\n  star_rating_code CHAR(15) PRIMARY KEY,\r\n  star_rating_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Give me the star rating descriptions of the hotels that cost more than 10000.", "output": "```gerenated SQL\n-- SQL: SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "output": "```gerenated SQL\n-- SQL: SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  \"bus\" OR how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Return the detail of the location named \"UK Gallery\".", "output": "```gerenated SQL\n-- SQL: SELECT other_details FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name and detail of each staff member?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  other_details FROM staff;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Attraction_Types` (\r\n  Attraction_Type_Code CHAR(15) PRIMARY KEY,\r\n  Attraction_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  \"bus\" OR how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" OR t2.tourist_details  =  \"Vivian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the distinct location names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location_name FROM locations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" OR t2.tourist_details  =  \"Vivian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"660 Shea Crescent\" OR t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Features` (\r\n  Feature_ID INTEGER,\r\n  Feature_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attraction_Features` (\r\n  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)\r\n);\n\n", "input": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price of hotels for each star rating code.", "output": "```gerenated SQL\n-- SQL: SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Hotel_Star_Ratings` (\r\n  star_rating_code CHAR(15) PRIMARY KEY,\r\n  star_rating_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the star rating descriptions of the hotels with price above 10000?", "output": "```gerenated SQL\n-- SQL: SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Royal_Family` (\r\n  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Royal_Family_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details and ways to get to tourist attractions related to royal family?", "output": "```gerenated SQL\n-- SQL: SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the price ranges of hotels with 5 star ratings.", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels WHERE star_rating_code  =  \"5\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "How many tourists did not make any visit?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the price ranges of five star hotels?", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels WHERE star_rating_code  =  \"5\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What is the average price range of five star hotels that allow pets?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Street_Markets` (\r\n  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Market_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the markets that can be accessed by walk or bus?", "output": "```gerenated SQL\n-- SQL: SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\" OR  t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Show details of all visitors.", "output": "```gerenated SQL\n-- SQL: SELECT tourist_details FROM visitors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  \"game1\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and ids of tourist attractions that are visited at most once.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of tourists who did not visit any place.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the detail of the location UK Gallery?", "output": "```gerenated SQL\n-- SQL: SELECT other_details FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination WHERE eliminated_by  =  \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  \"Benjamin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Give the names of wrestlers and their elimination moves.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT reign FROM wrestler WHERE location != \"Tokyo , Japan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Please show the most common reigns of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "output": "```gerenated SQL\n-- SQL: SELECT elimination_move FROM elimination WHERE team  =  \"team Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Show times of elimination of wrestlers with days held more than 50.", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Return the elimination movies of wrestlers on Team Orton.", "output": "```gerenated SQL\n-- SQL: SELECT elimination_move FROM elimination WHERE team  =  \"team Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of wrestlers and the elimination moves?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show teams that have suffered more than three eliminations.", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of wrestlers who have never been eliminated?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show the times of elimination by \"Punk\" or \"Orton\".", "output": "```gerenated SQL\n-- SQL: SELECT time FROM elimination WHERE eliminated_by  =  \"Punk\" OR eliminated_by  =  \"Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Count the number of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What is the name of the wrestler with the fewest days held?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the names of wrestlers and the teams in elimination in descending order of days held.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the time of elimination of the wrestlers with largest days held.", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "output": "```gerenated SQL\n-- SQL: SELECT time FROM elimination WHERE eliminated_by  =  \"Punk\" OR eliminated_by  =  \"Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "How many different teams have had eliminated wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT team) FROM elimination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination WHERE eliminated_by  =  \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  \"Benjamin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of the wrestlers, ordered descending by days held?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the reigns and days held of all wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT reign ,  days_held FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What is the time of elimination for the wrestler with the most days held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Which reign is the most common among wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Return the name of the wrestler who had the lowest number of days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Show the reign and days held of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT reign ,  days_held FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of wrestlers days held less than 100?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE days_held  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the times of elimination for wrestlers with over 50 days held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show different teams in eliminations and the number of eliminations from each team.", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM elimination GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the names of wrestlers in descending order of days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT reign FROM wrestler WHERE location != \"Tokyo , Japan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names and location of the wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Give the names and locations of all wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Which locations are shared by more than two wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the names of wrestlers that have not been eliminated.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "How many eliminations did each team have?", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM elimination GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Return the names of wrestlers with fewer than 100 days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE days_held  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\nCREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the business with the most number of reviews in April", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.text) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many reviews has Adrienne written ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all breweries in Los Angeles", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "What is the average rating of reviews written in year 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) FROM review WHERE year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all the reviews for all Pet Groomers with more than 100 reviews", "output": "```gerenated SQL\n-- SQL: SELECT t3.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find all the restaurant in Pennsylvania", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Give me all the Moroccan restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many reviews does \" Acacia Cafe \" have ?", "output": "```gerenated SQL\n-- SQL: SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all reviews for businesses rated 2.5", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "What is the total likes on tips from Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.likes) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "which neighbourhood has the most number of businesses in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT(DISTINCT t2.name) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find the users who have given tips on Pet Groomers", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN tip as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "Find all Italian restaurant in the Meadowood neighbourhood of Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN category as t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many tips have been written in 2015", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text) FROM tip WHERE year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find the business which has the most number of categories", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.category_name) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of escape games in \" Madison \" ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find all cities which has a \" Taj Mahal \" restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Return me the number of tips that are written by Michelle .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find the number of users called Michelle", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM user WHERE name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many businesses has Michelle reviewed in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "which business has the most number of checkins", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM(t2.count) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "Find the total checkins in \" Brighton Heights \" neighbourhood", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t3.count) FROM checkin as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant Seafood in Los Angeles", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many tips has Michelle written in April", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the cities of businesses rated below 1.5", "output": "```gerenated SQL\n-- SQL: SELECT city FROM business WHERE rating  <  1.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What are all the breweries in \" Los Angeles \" ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all tips for \" Cafe Zinho \" in Texas .", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all restaurant reviewed by Patrick in \" Dallas \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM neighbourhood as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many users have reviewed Irish Pub in Dallas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find the number of escape games in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many escape games exist in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Return me the number of cities that has \" Panda Express \" .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM business WHERE name  =  \"Panda Express\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all users who reviewed businesses that are restaurant .", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all states in which there is a Whataburger", "output": "```gerenated SQL\n-- SQL: SELECT state FROM business WHERE name  =  \"Whataburger\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "find the total checkins in Italian Delis in each state on Sunday", "output": "```gerenated SQL\n-- SQL: SELECT t1.state  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Return me the number of tips that are written by Michelle in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "What is the number of checkins for \" Cafe Zinho \" on Friday", "output": "```gerenated SQL\n-- SQL: SELECT t2.count FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "List all user ids with name Michelle", "output": "```gerenated SQL\n-- SQL: SELECT user_id FROM user WHERE name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.text) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many Target are there in \" Los Angeles \" ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all Bars reviewed by Patrick", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find the number of restaurant rated more than 3.5", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all breweries in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.text) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id JOIN review as t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the number of tips written in each month", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text)  ,  month FROM tip GROUP BY month;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many reviews has Niloofar written in 2015", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all the businesses with more than 4.5 stars", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  >  4.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Mexican restaurant in Dallas with at least 3.5 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all the restaurant rated more than 3.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all cities which has a \" Taj Mahal \" .", "output": "```gerenated SQL\n-- SQL: SELECT city FROM business WHERE name  =  \"Taj Mahal\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all users who have written tips about businesses in Dallas", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all reviews by Patrick with a rating above 4", "output": "```gerenated SQL\n-- SQL: SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Bars in Dallas have a rating above 3.5 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List the addresses of all Walmart in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all Apple Store in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "What neighbourhood is restaurant \" Flat Top Grill \" in ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Mexican restaurant in Dallas with a rating above 3.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "list all the businesses which have a review by Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all the reviews by Michelle for Italian restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t4.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN review as t4 ON t4.business_id  =  t1.business_id JOIN user as t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Return me the number of businesses that are restaurant .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all 5 star Italian restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.count)  ,  t3.day FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN checkin as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all businesses with rating 3.5", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  =  3.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "what is the number of restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Egyptian restaurant are there in Edinburgh ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of restaurant in Pittsburgh rated 4.5", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "How many restaurant are there in the Hazelwood district of Dallas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of escape games in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day", "output": "```gerenated SQL\n-- SQL: SELECT t4.day  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all the tips from a user who has written a review in 2012", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM user as t3 JOIN review as t1 ON t3.user_id  =  t1.user_id JOIN tip as t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many Starbucks are there in Dallas Texas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all tips about \" Vintner Grill \" that received more than 9 likes", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\n", "input": "How many neighbourhoods have a business with rating 5 in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.neighbourhood_name) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all the reviews which rated a business less than 1", "output": "```gerenated SQL\n-- SQL: SELECT text FROM review WHERE rating  <  1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all Bars reviewed by Patrick with at least 3 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "how many users reviewed \" Sushi Too \" in Pittsburgh", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant with Valet Service in Dallas Texas", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find users whose average review rating is below 3", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG(t1.rating)  <  3;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all users who have written tips for \" Barrio Cafe \" in 2015", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all businesses in Texas with a rating below 2", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "What is the total likes on tips about \" Cafe Zinho \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant that serve Seafood in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all users who reviewed businesses that are restaurant in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "list all the reviews by Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Bars in \" Dallas \" have a rating above 3.5 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Which restaurant in Dallas were reviewed by user Patrick ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all businesses that are restaurant in Pennsylvania .", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all the Seafood restaurant in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the total number of reviews written in March", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text) FROM review WHERE month  =  \"March\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Detention_Type` (\r\n  detention_type_code VARCHAR(10) PRIMARY KEY,\r\n  detention_type_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the code and description of the least frequent detention type ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.detention_type_code ,  t2.detention_type_description FROM detention as t1 JOIN Ref_detention_Type as t2 ON t1.detention_type_code  =  t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT(*) asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the first names of teachers whose email address contains the word \"man\".", "output": "```gerenated SQL\n-- SQL: SELECT first_name FROM teachers WHERE email_address LIKE '%man%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "output": "```gerenated SQL\n-- SQL: SELECT t1.zip_postcode FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t2.first_name  =  \"Lyla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and city of the student address with the highest average monthly rental.", "output": "```gerenated SQL\n-- SQL: SELECT t2.address_id ,  t1.city FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.first_name FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Return all distinct detention type codes.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT detention_type_code FROM detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "output": "```gerenated SQL\n-- SQL: SELECT email_address FROM students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the monthly rentals of student addresses in Texas state?", "output": "```gerenated SQL\n-- SQL: SELECT t2.monthly_rental FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  \"Texas\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the line 1 of addresses shared by some students and some teachers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.line_1 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id INTERSECT SELECT t1.line_1 FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the dates of assessment notes for students with first name \"Fanny\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.date_of_notes FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.first_name  =  \"Fanny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and first name of the student that has the most number of assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.first_name FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.teacher_id ,  t2.first_name FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What is the cell phone number of the student whose address has the lowest monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t2.cell_mobile_number FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id ORDER BY t1.monthly_rental asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many students are not involved in any behavior incident?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "What are the email addresses of teachers whose address has zip code \"918\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.email_address FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t1.zip_postcode  =  \"918\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the first names and last names of teachers in alphabetical order of last name.", "output": "```gerenated SQL\n-- SQL: SELECT first_name ,  last_name FROM teachers ORDER BY last_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the last names of teachers who are not involved in any detention.", "output": "```gerenated SQL\n-- SQL: SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers as t1 JOIN detention as t2 ON t1.teacher_id  =  t2.teacher_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Return all detention summaries.", "output": "```gerenated SQL\n-- SQL: SELECT detention_summary FROM detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "List all information about the assessment notes sorted by date in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM assessment_notes ORDER BY date_of_notes ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the line 1 and average monthly rentals of all student addresses?", "output": "```gerenated SQL\n-- SQL: SELECT t1.line_1 ,  AVG(t2.monthly_rental) FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and last name of the student that has the most behavior incidents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.last_name FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find all information about student addresses, and sort by monthly rental in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM student_addresses ORDER BY monthly_rental DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Incident_Type` (\r\n  incident_type_code VARCHAR(10) PRIMARY KEY,\r\n  incident_type_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the code and description of the most frequent behavior incident type?", "output": "```gerenated SQL\n-- SQL: SELECT t1.incident_type_code ,  t2.incident_type_description FROM behavior_incident as t1 JOIN ref_incident_type as t2 ON t1.incident_type_code  =  t2.incident_type_code GROUP BY t1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.text_of_notes FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  \"Schuster\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "List all cities of addresses in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM addresses ORDER BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the dates of the assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_notes FROM assessment_notes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.teacher_id ,  t2.last_name FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t1.detention_type_code  =  \"AFTER\" GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many assessment notes are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM assessment_notes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "Return the cell phone number and email address for all students.", "output": "```gerenated SQL\n-- SQL: SELECT cell_mobile_number ,  email_address FROM students;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Incident_Type` (\r\n  incident_type_code VARCHAR(10) PRIMARY KEY,\r\n  incident_type_description VARCHAR(80)\r\n);\n\n", "input": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "output": "```gerenated SQL\n-- SQL: SELECT incident_type_description FROM ref_incident_type WHERE incident_type_code  =  \"VIOLENCE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "How many addresses have zip code 197?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM addresses WHERE zip_postcode  =  \"197\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.datetime_detention_start ,  datetime_detention_end FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  \"Schultz\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many distinct incident type codes are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT incident_type_code) FROM behavior_incident;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "What are the first names and last names of students with address in Wisconsin state?", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name ,  t2.last_name FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  \"Wisconsin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.date_incident_start ,  date_incident_end FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.last_name  =  \"Fahey\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the id and zip code of the address with the highest monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t2.address_id ,  t1.zip_postcode FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id ORDER BY monthly_rental DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Please list the countries and years of film market estimations.", "output": "```gerenated SQL\n-- SQL: SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Return the titles and directors of films that were never in the market of China.", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the title of the film that has the highest high market estimation.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Who are the different directors of films which had market estimation in 1995?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Count the number of films.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "output": "```gerenated SQL\n-- SQL: SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  \"Japan\" ORDER BY t1.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries for each market ordered by decreasing number of cities?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY number_cities DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles of films and corresponding types of market estimations?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the studios which average gross is above 4500000.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries of markets and their corresponding years of market estimation?", "output": "```gerenated SQL\n-- SQL: SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Return the maximum and minimum number of cities across all markets.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(number_cities) ,  MIN(number_cities) FROM market;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "Return the types of film market estimations in 1995.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM film_market_estimation WHERE year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries for each market, ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY country ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles of films that do not have a film market estimation?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  studio FROM film WHERE studio LIKE \"%Universal%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the name of teh studio that created the most films?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "How many markets have number of cities smaller than 300?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM market WHERE number_cities  <  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Count the number of markets that have a number of cities lower than 300.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM market WHERE number_cities  <  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "output": "```gerenated SQL\n-- SQL: SELECT title ,  studio FROM film WHERE studio LIKE \"%Universal%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the titles and directors of the films were never presented in China?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film WHERE director  =  \"Nicholas Meyer\" INTERSECT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "What are the types of film market estimations in year 1995?", "output": "```gerenated SQL\n-- SQL: SELECT type FROM film_market_estimation WHERE year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the maximum and minimum number of cities in all markets.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(number_cities) ,  MIN(number_cities) FROM market;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the studios that have not produced films with director \"Walter Hill\".", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "List all countries of markets in descending order of number of cities.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY number_cities DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "List all countries of markets in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY country ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "How films are produced by each studio?", "output": "```gerenated SQL\n-- SQL: SELECT studio ,  COUNT(*) FROM film GROUP BY studio;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the name of film studio that have the most number of films.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Which studios have an average gross of over 4500000?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the different film Directors?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT director FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Please show the titles of films and the types of market estimations.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "What are the low and high estimates of film markets?", "output": "```gerenated SQL\n-- SQL: SELECT low_estimate ,  high_estimate FROM film_market_estimation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  \"Japan\" ORDER BY t1.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "How many film are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the title of films that do not have any market estimation.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Return the title of the film with the highest high estimate?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the distinct director of films with market estimation in the year of 1995.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the distinct director of all films.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT director FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the names of studios that have made two or more films?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the studios of each film and the number of films produced by that studio.", "output": "```gerenated SQL\n-- SQL: SELECT studio ,  COUNT(*) FROM film GROUP BY studio;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the names of studios that have at least two films.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the average ticket sales gross in dollars of films?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gross_in_dollar) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "How many products are there in the records?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the total number of catalog contents.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of catalog entries with level number 8.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the names of catalog entries with level number 8?", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What is the level name of the cheapest catalog (in USD)?", "output": "```gerenated SQL\n-- SQL: SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the catalog entry names of the products with next entry ID above 8?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the name and capacity of products with price greater than 700 (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Name all the products with next entry ID greater than 8.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "What are the attribute data types with more than 3 attribute definitions?", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find the dates on which more than one revisions were made.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog content has the highest height? Give me the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What is the product with the highest height? Give me the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of all the catalog entries.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_entry_name) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Give me the average and minimum price (in Euro) of the products.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog content has the smallest capacity? Return the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of all the products whose stock number starts with \"2\".", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "What are the name and publication date of the catalogs with catalog level number above 5?", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What is the entry name of the most expensive catalog (in USD)?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "On which days more than one revisions were made on catalogs.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the average and minimum price (in Euro) of all products?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Which catalog publishers have substring \"Murray\" in their names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the name of the product that has the smallest capacity.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the level name of the catalog with the lowest price (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "What is the attribute data type of the attribute with name \"Green\"?", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  \"Green\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the entry names of the catalog with the attribute that have the most entries.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Which catalog publisher has published the most catalogs?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of the products with length smaller than 3 or height greater than 5.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "Find the name and level of catalog structure with level between 5 and 10.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are all the catalog entry names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_entry_name) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Find the attribute data type for the attribute named \"Green\".", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  \"Green\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find the catalog publisher that has the most catalogs.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "How many routes go from the United States to Canada?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "For each country, what is the average elevation of that country's airports?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(elevation) ,  country FROM airports GROUP BY country;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, country, and elevation for every airport in the city of New York?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of the airport in the city of Goroka.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE city  =  'Goroka';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes with destination airports in Italy.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the country of the airlines whose name starts with 'Orbit'.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the total number of airlines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of the airports located in Cuba or Argentina.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "List the cities which have more than 2 airports sorted by the number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the busiest source airport that runs most number of routes in China.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "List all countries and their number of airlines in the descending order of number of airlines.", "output": "```gerenated SQL\n-- SQL: SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines does Russia has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines WHERE country  =  'Russia';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Which country is the airport that has the highest altitude located in?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of different airports which are the destinations of the American Airlines.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the highest elevation of an airport in the country of Iceland?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name of the airport that is the destination of the most number of routes that start in China?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the id of routes whose source and destination airports are in the United States.", "output": "```gerenated SQL\n-- SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Return the cities with more than 3 airports in the United States.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name of the airport with the most number of routes that start in China?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the cities which have exactly two airports.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the count of cities with more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For each airport name, how many routes start at that airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the average elevation of all airports for each country.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(elevation) ,  country FROM airports GROUP BY country;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per city in the US ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes whose destination airports are in Canada.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the name and city of the airport which is the source for the most number of flight routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Which countries has the most number of airlines whose active status is 'Y'?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the cities with exactly two airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What are the countries of all airlines whose names start with Orbit?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name and city of the airport that the most routes end at?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name and city of the airport from most of the routes start?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name of the airline with the most routes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of airports whose name contain the word 'International'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports WHERE name LIKE '%International%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For the airline ids with the top 10 most routes operated, what are their names?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes for each source airport and the airport name.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the busiest destination airport that runs most number of routes in China.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, and country of the airport with the highest elevation?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "List the cities which have more than one airport and number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the number of routes that end at John F Kennedy International Airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For each  airport name, how many routes start at that airport, ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What are the countries with the most airlines whose active status is Y?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the total number of routes for each country and airline in that country?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the name and city of the airport which is the destination of the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the cities that have more than 2 airports sorted by number of airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of cities in the United States with more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the id of the routes whose source and destination airports are in the United States?", "output": "```gerenated SQL\n-- SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, and country of the airport that has the highest latitude.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all cities with more than one airport and how many airports do they have?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all airports in Cuba or Argentina?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all airports whose elevation is between -50 and 50?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes that have destination John F Kennedy International Airport.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the maximum elevation of all airports in the country of Iceland?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "How many routes end in a Canadian airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For each country and airline name, how many routes are there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes from the United States to Canada.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the number of routes whose destinations are Italian airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes operated by American Airlines.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Which countries has the most number of airlines?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the country of the airport with the highest elevation?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines operate out of each country in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the number of different different airports that are destinations for American Airlines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many cities are there that have more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports' names have the word Interanation in them?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports WHERE name LIKE '%International%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the name of the country with the most number of home airlines?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many different cities do have some airport in the country of Greenland?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the name of airline which runs the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of the airports in the city of Goroka?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE city  =  'Goroka';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of airports whose altitude is between -50 and 50.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "How many routes does American Airlines operate?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many different kinds of information sources are there for injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT source) FROM injury_accident;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "List the season, home team, away team of all the games.", "output": "```gerenated SQL\n-- SQL: SELECT season ,  home_team ,  away_team FROM game;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Walter Samuel' INTERSECT SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Thiago Motta';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "output": "```gerenated SQL\n-- SQL: SELECT t1.season FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id WHERE t2.player  =  'Walter Samuel';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT t2.name ,  t2.average_attendance ,  t2.total_attendance FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "What are the maximum, minimum and average home games each stadium held?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(home_games) ,  MIN(home_games) ,  AVG(home_games) FROM stadium;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "How many games are held after season 2007?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM game WHERE season  >  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "output": "```gerenated SQL\n-- SQL: SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the id and name of the stadium where the most injury accidents happened?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.season ,  t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.injury  =  'Foot injury' OR t3.injury  =  'Knee problem';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.score ,  t1.date FROM game as t1 JOIN injury_accident as t2 ON t2.game_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "output": "```gerenated SQL\n-- SQL: SELECT t1.date ,  t2.player FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id ORDER BY t1.season DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many distinct kinds of injuries happened after season 2010?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.injury) FROM injury_accident as t1 JOIN game as t2 ON t1.game_id  =  t2.id WHERE t2.season  >  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "output": "```gerenated SQL\n-- SQL: SELECT player ,  number_of_matches ,  source FROM injury_accident WHERE injury != 'Knee problem';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "How many games has each stadium held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  COUNT(*) FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id GROUP BY t1.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "Which stadium name contains the substring \"Bank\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM stadium WHERE name LIKE \"%Bank%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many games are free of injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "what are name and phone number of patients who had more than one appointment?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Which physicians have never taken any appointment? Find their names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the names of patients who are not using the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name of the nurse who has the largest number of appointments.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What procedures cost less than 5000 and have John Wen as a trained physician?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\n", "input": "Find the patient who has the most recent undergoing treatment?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "How many patients stay in room 112?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(patient) FROM stay WHERE room  =  112;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name of physicians whose position title contains the word 'senior'.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician WHERE position LIKE '%senior%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What is the average cost of procedures that physician John Wen was trained in?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "What are the unique block codes that have available rooms?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the alphabetically ordered list of all distinct medications?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM medication ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Find the name of the patient who made the appointment with the most recent start date.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the physicians who are trained in a procedure that costs more than 5000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Which physician was trained in the procedure that costs the most.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the physician who prescribed the highest dose. What is his or her name?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the name of medication used on the patient who stays in room 111?", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What are the names of patients who are not taking the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the names of all physicians and their primary affiliated departments' names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "List the name of physicians who took some appointment.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Tell me the distinct block codes where some rooms are available.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "List the names of all distinct nurses ordered by alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM nurse ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Count how many appointments have been made in total.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appointment;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the distinct names of nurses on call?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "List the names of patients who have made appointments.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the names of the physicians who prescribe medication Thesisin?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  \"Thesisin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of procedures which physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "List the names of departments where some physicians are primarily affiliated with.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "What is the id of the patient who stayed in room 111 most recently?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Return the name of each physician and the number of patients he or she treats.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the name of the medication used for the patient staying in room 111?", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What are the names of all the physicians who took appointments.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are each physician's employee id and department id primarily affiliated.", "output": "```gerenated SQL\n-- SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "How many appointments are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appointment;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What is the name of the nurse has the most appointments?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What is the alphabetically ordered list of all the distinct names of nurses?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM nurse ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name of physicians who are in charge of more than one patient.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "List the physicians' employee ids together with their primary affiliation departments' ids.", "output": "```gerenated SQL\n-- SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "what is the name and position of the head whose department has least number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the number of medications prescribed for each brand.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "How many different types of rooms are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT roomtype) FROM room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the names of procedures physician John Wen was trained in?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "How many patients do each physician take care of? List their names and number of patients they take care of.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "How many medications are prescribed for each brand?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  \"X\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Tell me the employee id of the head of the department with the least employees.", "output": "```gerenated SQL\n-- SQL: SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What are names of patients who made an appointment?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "Find the patient who most recently stayed in room 111.", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "How many patients are not using Procrastin-X as medication?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\nCREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\n", "input": "Find the number of rooms located on each block floor.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\nCREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\n", "input": "How many rooms does each block floor have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Find the number of distinct room types available.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT roomtype) FROM room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\n", "input": "Which patient is undergoing the most recent treatment?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "List the name of physicians who never took any appointment.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of nurses who are nursing an undergoing treatment.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the physician who was trained in the most expensive procedure?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are the names of departments that have primarily affiliated physicians.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "List the names of all the physicians who prescribe Thesisin as medication.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  \"Thesisin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the three most costly procedures?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Find the name and position of the head of the department with the least employees.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are the name and primarily affiliated department name of each physician?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What is the id of the appointment that started most recently?", "output": "```gerenated SQL\n-- SQL: SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the name and position of physicians who prescribe some medication whose brand is X?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  \"X\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\n", "input": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "output": "```gerenated SQL\n-- SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "How many patients' prescriptions are made by physician John Dorian?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = \"John Dorian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\n", "input": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "output": "```gerenated SQL\n-- SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Tell me the highest, lowest, and average cost of procedures.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the number of patients who are not using the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the highest cost, lowest cost and average cost of procedures?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the names of the physicians who have 'senior' in their titles.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician WHERE position LIKE '%senior%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "Count the number of patients who stayed in room 112.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(patient) FROM stay WHERE room  =  112;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\nCREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\n", "input": "Find the number of rooms for different block code?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What is the name of the patient who made the most recent appointment?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Compute the mean price of procedures physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\nCREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\n", "input": "How many rooms are located for each block code?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Which nurses are in charge of patients undergoing treatments?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "What is the employee id of the head whose department has the least number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "List the names of all distinct medications, ordered in an alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM medication ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the number of patients' prescriptions physician John Dorian made.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = \"John Dorian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the three most expensive procedures.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Which physicians are trained in procedures that are more expensive than 5000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Count the number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the names of buildings sorted in descending order of building height?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings ORDER BY height DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "Show the names of the buildings that have more than one company offices.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != \"Banking\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Compute the average profits companies make.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(profits_billion) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "Which building has the largest number of company offices? Give me the building name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Please show the industries of companies in descending order of the number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "List the names of buildings in descending order of building height.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings ORDER BY height DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Sort all the industries in descending order of the count of companies in each industry", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which headquarter locations are used by more than 2 companies?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies WHERE industry  =  \"Banking\" OR industry  =  \"Conglomerate\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the industry shared by the most companies.", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Find the stories of the building with the largest height.", "output": "```gerenated SQL\n-- SQL: SELECT stories FROM buildings ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the name and assets of each company, sorted in ascending order of company name?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  assets_billion FROM companies ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many different industries are the companies in?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT industry) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies WHERE industry  =  \"Banking\" OR industry  =  \"Conglomerate\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the names of companies whose headquarters are not \"USA\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "Which buildings do not have any company office? Give me the building names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Whah are the name of each industry and the number of companies in that industry?", "output": "```gerenated SQL\n-- SQL: SELECT industry ,  COUNT(*) FROM companies GROUP BY industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the names of companies in descending order of market value.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies ORDER BY market_value_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show the headquarters shared by more than two companies.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "output": "```gerenated SQL\n-- SQL: SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != \"Banking\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "Show the name of the building that has the most company offices.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the name and assets of each company in ascending order of company name.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  assets_billion FROM companies ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "List the names of buildings that have no company office.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "For each company, return the company name and the name of the building its office is located in.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the average profits of companies?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(profits_billion) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE status  =  \"on-hold\" ORDER BY stories ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Please show each industry and the corresponding number of companies in that industry.", "output": "```gerenated SQL\n-- SQL: SELECT industry ,  COUNT(*) FROM companies GROUP BY industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the names of the companies whose headquarters are not located in \"USA\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "List the name of a building along with the name of a company whose office is in the building.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which industry has the most companies?", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies WHERE headquarters  =  \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters  =  \"China\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Count the number of distinct company industries.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT industry) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "Which buildings have more than one company offices? Give me the building names.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "What is the name of party with most number of members?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all ministers and parties they belong to in descending order of the time they took office.", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show the minister who took office after 1961 or before 1959.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Which ministers are not a part of the Progress Party?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE party_name != 'Progress Party';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "How many events are there for each party?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.event_name  =  \"Annaual Meeting\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Which event names were used more than twice for party events?", "output": "```gerenated SQL\n-- SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Return the minister who left office at the latest time.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Which member names are shared among members in the party with the id 3 and the party with the id 1?", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Which member names corresponding to members who are not in the Progress Party?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != \"Progress Party\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "How many party events do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM party_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all party names and the number of members in each party.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Count the number of party events.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM party_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Return the name of the party with the most members.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "What is the name of member in charge of greatest number of events?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "List member names and their party names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Which minister left office the latest?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "What are the different region names, ordered by labels?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region_name FROM region ORDER BY label;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "What are the names of parties that have no members?", "output": "```gerenated SQL\n-- SQL: SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Return the names of parties that have two or more events.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Count the number of regions.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "What are the names of parties and their respective regions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all party names and their region names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show the ministers and the time they took and left office, listed by the time they left office.", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Show all distinct region names ordered by their labels.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region_name FROM region ORDER BY label;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Return the name of the member who is in charge of the most events.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Show all member names who are not in charge of any event.", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show member names that are not in the Progress Party.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != \"Progress Party\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "What are the names of parties with at least 2 events?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "How many members are in each party?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show names of parties that does not have any members.", "output": "```gerenated SQL\n-- SQL: SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "What are the names of members and their corresponding parties?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "How many regions do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show the member names which are in both the party with id 3 and the party with id 1.", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "find the event names that have more than 2 records.", "output": "```gerenated SQL\n-- SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "How many parties do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT party_name) FROM party;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "How many Annual Meeting events happened in the United Kingdom region?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.event_name  =  \"Annaual Meeting\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Count the number of different parties.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT party_name) FROM party;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "What are the names of members who are not in charge of any events?", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "How many different kinds of clients are supported by the web clients accelerators?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT client) FROM web_client_accelerator;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the maximum, minimum and average market share of the listed browsers?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(market_share) ,  MIN(market_share) ,  AVG(market_share) FROM browser;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  operating_system FROM web_client_accelerator WHERE connection != 'Broadband';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the id and name of the browser that is compatible with the most web accelerators?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the name of browsers in descending order by market share.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM browser ORDER BY market_share DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\n", "input": "How many accelerators are not compatible with the browsers listed ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "Find the number of web accelerators used for each Operating system.", "output": "```gerenated SQL\n-- SQL: SELECT operating_system ,  COUNT(*) FROM web_client_accelerator GROUP BY operating_system;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "Which accelerator name contains substring \"Opera\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t3.name FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id ORDER BY t1.compatible_since_year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "output": "```gerenated SQL\n-- SQL: SELECT t1.compatible_since_year FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id WHERE t3.name  =  'CACHEbox' AND t2.name  =  'Internet Explorer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT t1.name ,  t1.operating_system FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.name  =  'Opera';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'Fasterfox';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "How many main stream browsers whose market share is at least 5 exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM browser WHERE market_share  >=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the id and market share of the browser Safari?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  market_share FROM browser WHERE name  =  'Safari';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the ids, names and market shares of all browsers.", "output": "```gerenated SQL\n-- SQL: SELECT id ,  name ,  market_share FROM browser;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.market_share  >  15;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\n", "input": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Sales` (\r\n  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  sales_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the sale details and dates of transactions with amount smaller than 3000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.sales_details ,  t2.date_of_transaction FROM sales as t1 JOIN transactions as t2 ON t1.sales_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  <  3000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\n", "input": "Return the lot details and investor ids.", "output": "```gerenated SQL\n-- SQL: SELECT lot_details ,  investor_id FROM lots;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the ids of the investors who have at least two transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and details for the investors who have the top 3 number of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average amount of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(amount_of_transaction) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum share count of transactions where the amount is smaller than 10000", "output": "```gerenated SQL\n-- SQL: SELECT MAX(share_count) FROM transactions WHERE amount_of_transaction  <  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show details of all investors if they make any transaction with share count greater than 100.", "output": "```gerenated SQL\n-- SQL: SELECT t1.investor_details FROM  investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.share_count  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many distinct transaction types are used in the transactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT transaction_type_code) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all dates of transactions whose type code is \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE transaction_type_code  =  \"SALE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average share count of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON  t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  >  100 AND t3.transaction_type_code  =  \"PUR\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Purchases` (\r\n  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  purchase_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the purchase details of transactions with amount bigger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.purchase_details FROM purchases as t1 JOIN transactions as t2 ON t1.purchase_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average transaction amount for different transaction types.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code ,  AVG(amount_of_transaction) FROM transactions GROUP BY transaction_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average amount of transactions with type code \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT AVG(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  \"SALE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the number of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  COUNT(*) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What is the total share of transactions?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_count) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "output": "```gerenated SQL\n-- SQL: SELECT t1.transaction_type_description ,  t2.date_of_transaction FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code WHERE t2.share_count  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average amount of transactions for different lots.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\n", "input": "Show all distinct lot details.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT lot_details FROM lots;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the transaction type code that occurs the fewest times.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the description of the transaction type that occurs most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT t1.transaction_type_description FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE share_count  >  100 OR amount_of_transaction  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Return the lot details of lots that belong to investors with details \"l\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_details FROM investors as t1 JOIN lots as t2 ON  t1.investor_id  =  t2.investor_id WHERE t1.investor_details  =  \"l\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average share count of transactions each each investor, ordered by average share count.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id ORDER BY AVG(share_count);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the transaction type code that occurs the most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Find the number of investors in total.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM investors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.transaction_type_code  =  \"SALE\" GROUP BY t2.investor_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum amount of transaction.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(amount_of_transaction) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE share_count  >=  100 OR amount_of_transaction  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and details of the investor that has the largest number of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the lot details of lots associated with transactions with share count smaller than 50?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  <  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the description of transaction type with code \"PUR\".", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code\t  =  \"PUR\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum and minimum share count of different transaction types.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code ,  MAX(share_count) ,  MIN(share_count) FROM transactions GROUP BY transaction_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all transaction ids with transaction code 'PUR'.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_id FROM transactions WHERE transaction_type_code  =  'PUR';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all date and share count of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction ,  share_count FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Purchases` (\r\n  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  purchase_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Sales` (\r\n  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  sales_details VARCHAR(255)\r\n);\n\n", "input": "What are the details of all sales and purchases?", "output": "```gerenated SQL\n-- SQL: SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Count the number of universities that do not participate in the baketball match.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the total and minimum enrollments across all schools.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  MIN(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT team_name FROM basketball_match ORDER BY all_home DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the average enrollment size of the universities that are founded before 1850?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(enrollment) FROM university WHERE founded  <  1850;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "List all public schools and their locations.", "output": "```gerenated SQL\n-- SQL: SELECT school ,  location FROM university WHERE affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Count the number of schools that have had basketball matches.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT school_id) FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "List all schools and their nicknames in the order of founded year.", "output": "```gerenated SQL\n-- SQL: SELECT school ,  nickname FROM university ORDER BY founded;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "How many schools are in the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT school_id) FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the founded year for the school with the largest enrollment.", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the all games score and location of the school called Clemson?", "output": "```gerenated SQL\n-- SQL: SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the average enrollment of universities founded before 1850.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(enrollment) FROM university WHERE founded  <  1850;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the primary conference of the school with the lowest acc percentage score.", "output": "```gerenated SQL\n-- SQL: SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "output": "```gerenated SQL\n-- SQL: SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the schools that were either founded after 1850 or public.", "output": "```gerenated SQL\n-- SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the names of teams from universities that have a below average enrollment?", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "List all information regarding the basketball match.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the location and all games score of the school that has Clemson as its team name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different schools and their nicknames, ordered by their founding years?", "output": "```gerenated SQL\n-- SQL: SELECT school ,  nickname FROM university ORDER BY founded;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Show the enrollment and primary_conference of the oldest college.", "output": "```gerenated SQL\n-- SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Return the highest acc percent across all basketball matches.", "output": "```gerenated SQL\n-- SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is the highest acc percent score in the competition?", "output": "```gerenated SQL\n-- SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the public schools and what are their locations?", "output": "```gerenated SQL\n-- SQL: SELECT school ,  location FROM university WHERE affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the maximum enrollment across all schools.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "How many universities have a location that contains NY?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE location LIKE \"%NY%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the total and minimum enrollment of all schools?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  MIN(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Count the number of different affiliation types.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT affiliation) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "How many schools do not participate in the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "When was the school with the largest enrollment founded?", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the total enrollments of universities of each affiliation type?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is all the information about the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the enrollment and primary conference for the university which was founded the earliest?", "output": "```gerenated SQL\n-- SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find how many different affiliation types there are.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT affiliation) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the founded year of the newest non public school.", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the founded year of the non public school that was founded most recently?", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT team_name FROM basketball_match ORDER BY all_home DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the total student enrollment for different affiliation type schools.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find how many school locations have the word 'NY'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE location LIKE \"%NY%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some restaurants good for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a restaurant in mountain view that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many jamerican cuisine are there in santa cruz county ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can we find a restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is a good restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good arabics on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can we find some restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many buttercup kitchen are there in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for chinese are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some restaurants good for arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good places in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat french food in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some restaurants good for french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good restaurant in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can we find a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i find a restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "Where is the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good place in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can we find some restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many french restaurant are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "What is the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many italian restaurants are in the yolo county ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good place in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good arabic restaurants in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many french restaurants are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can we find some restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a restaurant on buchanan in san francisco that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good french restaurant in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is jamerican cuisine ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some good arabics in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "show me a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "What is the best place in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "Where is the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a restaurant in mountain view that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some good arabic restaurants in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good places on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good restaurants in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can i eat some good arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "Give me the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good restaurants on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "Give me the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good restaurants in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good place on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can i eat some good arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many chinese places are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a restaurant on buchanan in san francisco that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many denny are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is denny in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some restaurants good for arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many chinese restaurants are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what is a good restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good restaurant in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some restaurants good for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what is the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what is a good restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good place on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where can i eat french food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good place in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for chinese food are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "Where is the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat some good french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for french are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some good arabics in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for french food are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me some restaurants good for arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good restaurant on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good french restaurant in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where are some good arabics on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "What is the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "where is a good restaurant on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "what are some good places in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "give me a good arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the name and email for the users who have more than one follower.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.email FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the number of tweets in record.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM tweets;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the names of users whose emails contain 鈥榮uperstar鈥?or 鈥榚du鈥?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the name and partition id for users who tweeted less than twice.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.partitionid FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  <  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  (SELECT COUNT(*) FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 WHERE t1.name  =  'Tyler Swift');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the number of users who posted some tweets.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT uid) FROM tweets;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "List the names of 5 users followed by the largest number of other users.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the average number of followers for the users who do not have any tweet.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(followers) FROM user_profiles WHERE uid NOT IN (SELECT uid FROM tweets);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many users are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM user_profiles;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the users who have more than 1000 followers.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles WHERE followers  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the maximum and total number of followers of all users.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(followers) ,  SUM(followers) FROM user_profiles;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "How many followers does each user have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM follows;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the names of users who have more than one tweet.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the user whose name contains the word 鈥楽wift鈥?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the emails of the user named \"Mary\".", "output": "```gerenated SQL\n-- SQL: SELECT email FROM user_profiles WHERE name  =  'Mary';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the average number of followers for the users who had some tweets.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(followers) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Return the text of tweets about the topic 'intern'.", "output": "```gerenated SQL\n-- SQL: SELECT text FROM tweets WHERE text LIKE '%intern%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "List the text of all tweets in the order of date.", "output": "```gerenated SQL\n-- SQL: SELECT text FROM tweets ORDER BY createdate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the name of each user and number of tweets tweeted by each of them.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the user followed by the least number of people.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the id of users who are followed by Mary or Susan.", "output": "```gerenated SQL\n-- SQL: SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Mary\" OR t1.name  =  \"Susan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the number of followers for each user.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM follows GROUP BY f1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the id of users who are followed by Mary and Susan.", "output": "```gerenated SQL\n-- SQL: SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Mary\" INTERSECT SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Susan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "What is the partition id of the user named \"Iron Man\".", "output": "```gerenated SQL\n-- SQL: SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE zip_code  =  94107 AND events != \"Fog\" AND events != \"Rain\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "List the name and the number of stations for all the cities that have at least 15 stations.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which trip started from the station with the largest dock count? Give me the trip id.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the zip code in which the average mean sea level pressure is the lowest?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "When and in what zip code did max temperature reach 80?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the 3 most common cloud covers in the zip code of 94107?", "output": "```gerenated SQL\n-- SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude of stations located in San Jose city?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the shortest trip?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip ORDER BY duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of stations that have latitude lower than 37.5?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE lat  <  37.5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the latitude, longitude, city of the station from which the shortest trip started?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many different bike ids are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bike_id) FROM trip;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids of the trips that lasted the longest and how long did they last?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, select all those that have an average mean visiblity below 10.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the name, latitude, and city of the station that is located the furthest South?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, list their names in decreasing order by their highest station latitude.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the bike that traveled the most in 94002?", "output": "```gerenated SQL\n-- SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each start station id, what is its name, longitude and average duration of trips started there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the average latitude and longitude of the starting points of all trips?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many stations are in Mountain View?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many different cities have these stations?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM station;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the id and name of the stations that have ever had more than 12 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the zip code that has the lowest average mean sea level pressure?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the station station and end station for the trips with the three smallest ids?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the installation date for each ending station on all the trips?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that have an average sea level pressure between 30.3 and 31?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "List all the cities in a decreasing order of each city's stations' highest latitude.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many trips did not end in San Francisco?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city != \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, what is the highest latitude for its stations?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  MAX(lat) FROM station GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the dates when the max temperature was higher than 85.", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE max_temperature_f  >  85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the zip code in which the average mean visibility is lower than 10.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids and durations of the trips with the top 3 durations?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the different ids and names of the stations that have had more than 12 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "From the trip record, find the number of unique bikes.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bike_id) FROM trip;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the total and maximum duration for all trips with the bike id 636?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the different names for each station that has ever had 7 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the start station and end station for the trips with the three oldest id.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which bike traveled the most often in zip code 94002?", "output": "```gerenated SQL\n-- SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of all stations with a latitude smaller than 37.5?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE lat  <  37.5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "List all the distinct stations from which a trip of duration below 100 started.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What is the average bike availability in stations that are not located in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each trip, return its ending station's installation date.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which start station had the most trips starting from August? Give me the name and id of the station.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the name, latitude, and city of the station with the lowest latitude?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are all the different zip codes that have a maximum dew point that was always below 70?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many days had both mean humidity above 50 and mean visibility above 8?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What is the average longitude of stations that never had bike availability more than 10?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find all the zip codes in which the max dew point have never reached 70.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, return the highest latitude among its stations.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  MAX(lat) FROM station GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "Return the unique name for stations that have ever had 7 bikes available.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many stations does Mountain View city has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the trip that started from the station with the highest dock count?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many trips started from Mountain View city and ended at Palo Alto city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  \"Mountain View\" AND t3.city  =  \"Palo Alto\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Count the number of trips that did not end in San Francisco city.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city !=  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the total and maximum duration of trips with bike id 636?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the name of every city that has at least 15 stations and how many stations does it have?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, return how many times max wind speed reached 25?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, return the average mean temperature of August there.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the days that had the smallest temperature range, and what was that range?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What is the average bike availablility for stations not in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each station, return its longitude and the average duration of trips that started from the station.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  \"Mountain View\" AND t3.city  =  \"Palo Alto\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "output": "```gerenated SQL\n-- SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the trip that has the shortest duration?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip ORDER BY duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the average latitude and longitude of all starting stations for the trips?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude in San Jose?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus has the most degrees  conferrred over its entire existence?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are in Los Angeles county?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty members are at the university that gave the least number of degrees in 2001?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many people graduated from San Francisco State University in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  \"Orange\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus has the most degrees conferred in all times?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "how many degrees were conferred between 1998 and 2002?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus has the most faculties in 2003?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee for San Jose State University in 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in the county of Los Angeles?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Los Angeles county and opened after 1950?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  >  1950;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty is there in total in the year of 2002?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(faculty) FROM faculty WHERE year  =  2002;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "List the campuses in Los Angeles county.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the count of universities whose campus fee is greater than the average campus fee.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus has the most faculties in year 2003?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "Which year has the most degrees conferred?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee on a CSU campus in 2005?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses opened before 1800?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  <  1800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many undergraduates are there at San Jose State", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many degrees were conferred at San Jose State University in 2000?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "In what year was the most degrees conferred?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "How many universities have a campus fee greater than the average?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty members did the university that conferred the most degrees in 2002 have?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "In the year 2000, what is the campus fee for San Francisco State University?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "For each Orange county campus, report the number of degrees granted after 2000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  \"Orange\" AND t2.year  >=  2000 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  \"Long Beach State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Year INTEGER PRIMARY KEY,\r\n  TotalEnrollment_AY INTEGER,\r\n  FTE_AY INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "report the total number of degrees granted between 1998 and 2002.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the names of all campuses located at Chico?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Chico\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the campuses that opened in 1958?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  =  1958;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty lines are there at San Francisco State University in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many CSU campuses are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses opened between 1935 and 1939?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the average fee on a CSU campus in 1996", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Jose State University\" in year 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Francisco State University\" in year 2000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Francisco State University\" in year 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find all the campuses opened in 1958.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  =  1958;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the name of the campuses opened before 1800.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  <  1800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which university is in Los Angeles county and opened after 1950?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  >  1950;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee for a CSU campus in the year of 1996?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee for San Francisco State University in 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee for a CSU campus in the year of 2005?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the campus fee of \"San Jose State University\" in year 2000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What degrees were conferred in San Francisco State University in the year 2001?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Year INTEGER PRIMARY KEY,\r\n  TotalEnrollment_AY INTEGER,\r\n  FTE_AY INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE location  =  \"San Francisco\" AND county  =  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  \"Orange\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "How many universities have a campus fee higher than average?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee in the year 2000 for San Jose State University?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the total number of degrees granted after 2000 for each Orange county campus?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  \"Orange\" AND t2.year  >=  2000 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE location  =  \"San Francisco\" AND county  =  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the count of universities whose campus fee is greater than the average campus fee.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty, in total, are there in the year 2002?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(faculty) FROM faculty WHERE year  =  2002;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus was opened between 1935 and 1939?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the names of journalists and the names of the events they reported in ascending order", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id ORDER BY t2.event_attendance asC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the names of journalists and the dates of the events they reported.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.date FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "How many journalists are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the different nationalities and the number of journalists of each nationality.", "output": "```gerenated SQL\n-- SQL: SELECT nationality ,  COUNT(*) FROM journalist GROUP BY nationality;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists from \"England\" or \"Wales\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist WHERE nationality  =  \"England\" OR nationality  =  \"Wales\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\n", "input": "List the names of journalists who have not reported any event.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "what are the average and maximum attendances of all events?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(event_attendance) ,  MAX(event_attendance) FROM event;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the names of journalists and the number of events they reported.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  COUNT(*) FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "List the event venues and names that have the top 2 most number of people attended.", "output": "```gerenated SQL\n-- SQL: SELECT venue ,  name FROM event ORDER BY event_attendance DESC LIMIT 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the names of journalists that have reported more than one event.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\nCREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\n", "input": "Find the average age and experience working length of journalists working on different role type.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.age) ,  AVG(years_working) ,  t2.work_type FROM journalist as t1 JOIN news_report as t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist WHERE years_working  >  10 INTERSECT SELECT nationality FROM journalist WHERE years_working  <  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What is the average number of years spent working as a journalist?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(years_working) FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What are the nationalities and ages of journalists?", "output": "```gerenated SQL\n-- SQL: SELECT nationality ,  age FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What is the nationality of the journalist with the largest number of years working?", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist ORDER BY years_working DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the dates, places, and names of events in descending order of the attendance.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  name ,  venue FROM event ORDER BY event_attendance DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "List the names of journalists in ascending order of years working.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist ORDER BY years_working ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which author has written the most papers? Find his or her last name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which institution does \"Katsuhiro Ueno\" belong to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "What are the last names of the author of the paper titled \"Binders Unbound\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "How many papers are published in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM papers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the titles of all the papers written by \"Jeremy Gibbons\"", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the last name of the author with first name \"Amal\".", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors WHERE fname  =  \"Amal\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Count the number of institutions.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM inst;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Count the number of total papers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM papers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%Database%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which authors belong to the institution \"Google\"? Show the first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "What is the last name of the author that has published the most papers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the first names of all the authors ordered in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors ORDER BY fname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which papers were written by authors from the institution \"Google\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "How many papers are published by the institution \"Tokohu University\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the titles of the papers that contain the word \"ML\".", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%ML%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Sort the first names of all the authors in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors ORDER BY fname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "What is the name of the institution that \"Matthias Blume\" belongs to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find all the papers published by the institution \"Google\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors have first name \"Amal\"? List their last names.", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors WHERE fname  =  \"Amal\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "How many authors are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What is the first name of the author with last name \"Ueno\"?", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors WHERE lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Retrieve the country that has published the most papers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%ML%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers have \"Stephanie Weirich\" as an author?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Count the number of authors.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "List the titles of the papers whose authors are from the institution \"Indiana University\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "What are the papers published under the institution \"Indiana University\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Give me a list of all the last names of authors sorted in alphabetical order", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Retrieve all the last names of authors in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the titles of all the papers written by \"Aaron Turon\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Retrieve the title of the paper that has the largest number of authors.", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors have last name \"Ueno\"? List their first names.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors WHERE lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "What are the titles of papers published by \"Jeremy Gibbons\"?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "How many institutions are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM inst;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the country that the most papers are affiliated with.", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "How many papers have \"Atsushi Ohori\" published?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "How many papers are written by authors from the institution \"University of Pennsylvania\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the number of papers published by the institution \"University of Pennsylvania\".", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which paper's title contains the word \"Database\"?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%Database%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which paper has the most authors? Give me the paper title.", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Find the name and component amount of the least popular furniture.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  num_of_component FROM furniture ORDER BY market_rate LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(num_of_shops) ,  AVG(num_of_factories) FROM manufacturer WHERE open_year  <  1990;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Find the average number of factories for the manufacturers that have more than 20 shops.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(num_of_factories) FROM manufacturer WHERE num_of_shops  >  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\nCREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the number of funiture types produced by each manufacturer as well as the company names.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Give me the names and prices of furnitures which some companies are manufacturing.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.price_in_dollar FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "List all manufacturer names and ids ordered by their opening year.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the market shares and names of furnitures which no any company is producing in our records.", "output": "```gerenated SQL\n-- SQL: SELECT market_rate ,  name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the names of furnitures whose prices are lower than the highest price.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id WHERE t2.price_in_dollar  <  (SELECT MAX(price_in_dollar) FROM furniture_manufacte);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Which manufacturer has the most number of shops? List its name and year of opening.", "output": "```gerenated SQL\n-- SQL: SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Return the name and id of the furniture with the highest market rate.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the id and number of shops for the company that produces the most expensive furniture.", "output": "```gerenated SQL\n-- SQL: SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR num_of_factories  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Find the component amounts and names of all furnitures that have more than 10 components.", "output": "```gerenated SQL\n-- SQL: SELECT num_of_component ,  name FROM furniture WHERE num_of_component  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "find the total market rate of the furnitures that have the top 2 market shares.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who has friends that are older than the average age? Print their friends and their ages as well", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the person who has exactly one friend.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of all the people who are older than at least one engineer? Order them by age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What is the age of the friend of Zach with longest year relationship?", "output": "```gerenated SQL\n-- SQL: SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the youngest male?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names and ages of every person who is a friend of both Dan and Alice?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for all person?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the female friends of Alice.", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of everybody sorted by age in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name and age of all males in order of their age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of everybody who has exactly one friend?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "How many friends does Dan have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of the people who have no friends who are students?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the number of people who is under 40 for each gender.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the youngest person for each job?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people are older than every engineer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Which person whose friends have the oldest average age?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the different names and ages of every friend of either Dan or alice?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What is the total number of people who has no friend living in the city of Austin.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of persons who are friends with Bob.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of the person who has friends with age above 40 and under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is average age of male for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different cities do people originate from?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different cities are they from?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "list the name, job title of all people ordered by their names.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  job FROM person ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of the people who are older 40 but no friends under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all friends who are from New York?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the names of females who are friends with Zach", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are all the friends of Alice who are female?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of the person who has no student friends.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the oldest person whose job is student?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of persons who are friends with Alice for the shortest years.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for a male in each job?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for all people in the table?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many type of jobs do they have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT job) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who are Bob's friends?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of every person who has a friend over 40 and under 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Which friend of Zach has the longest-lasting friendship?", "output": "```gerenated SQL\n-- SQL: SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different jobs are listed?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT job) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all females who are friends with Zach?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all of Bob's friends?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of the person who has friends with age above 40 but not under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many females does this network has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the doctor named Zach?", "output": "```gerenated SQL\n-- SQL: SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the average person for each job?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the youngest male?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name and age of the person who is a friend of Dan or Alice.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people are under 40 for each gender?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What is the total number of people who have no friends living in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who are the friends of Alice that are doctors?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of people whose age is greater than any engineer sorted by their age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the names of all person sorted in the descending order using age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all people who do not have friends?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT name FROM personfriend;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "How many friends does Dan have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the person whose age is below 30?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  <  30;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who has friends that are younger than the average age?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name and age of every male? Order the results by age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the oldest person?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many females are in the network?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the oldest student?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names and job titles of every person ordered alphabetically by name?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  job FROM person ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for each gender?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  gender FROM person GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the person whose age is below 30?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  <  30;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is average age for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who has a friend that is from new york city?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all of Alice's friends of friends?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the person who is the oldest?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name and age of the person who is a friend of both Dan and Alice.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the different names of friends who are younger than the average age for a friend?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all people who are friends with Alice for the shortest amount of time?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "HOw many engineers are older than 30?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people whose age is greater 30 and job is engineer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who are the friends of Bob?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who is the friend of Zach with longest year relationship?", "output": "```gerenated SQL\n-- SQL: SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the count of enzymes without any interactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids and names of the medicine that can interact with two or more enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines are offered by each trade name?", "output": "```gerenated SQL\n-- SQL: SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "List the name of enzymes in descending lexicographical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines were not approved by the FDA?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "How many kinds of enzymes are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "find the number of medicines offered by each trade.", "output": "```gerenated SQL\n-- SQL: SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "output": "```gerenated SQL\n-- SQL: SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\n", "input": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "output": "```gerenated SQL\n-- SQL: SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names and locations of all enzymes listed?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many distinct FDA approval statuses are there for the medicines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT fda_approved) FROM medicine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\n", "input": "What is the most common interaction type between enzymes and medicine? And how many are there?", "output": "```gerenated SQL\n-- SQL: SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(omim) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "List the names and the locations that the enzymes can make an effect.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines have the FDA approval status 'No' ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "How many enzymes do not have any interactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes whose product is not 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE product != 'Heme';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the total count of enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the maximum OMIM value in the database?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(omim) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names and trade names of the medcines that are FDA approved?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes that include the string 'ALA'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many different FDA approval statuses exist for medicines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT fda_approved) FROM medicine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the guest first name, start date, and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment number and the number of rooms for each apartment.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number ,  room_count FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show all distinct building descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT building_description FROM apartment_buildings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "What are the facility codes of the apartments with more than four bedrooms?", "output": "```gerenated SQL\n-- SQL: SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "Find the number of apartments that have no facility.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "What are the address and phone number of the buildings managed by \"Brenden\"?", "output": "```gerenated SQL\n-- SQL: SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager\t =  \"Brenden\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the apartment number and the room count of each apartment?", "output": "```gerenated SQL\n-- SQL: SELECT apt_number ,  room_count FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  \"Kyle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `View_Unit_Status` (\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),\r\n  status_date DATETIME PRIMARY KEY,\r\n  available_yn BIT\r\n);\n\n", "input": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type code is the most common among apartments with more than one bathroom?", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "output": "```gerenated SQL\n-- SQL: SELECT \tbooking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average number of bedrooms of all apartments?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bedroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the booking status code and the corresponding number of bookings.", "output": "```gerenated SQL\n-- SQL: SELECT \tbooking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average number of rooms of apartments with type code \"Studio\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  \"Studio\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the average room count of the apartments that have the \"Studio\" type code.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  \"Studio\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "output": "```gerenated SQL\n-- SQL: SELECT building_short_name FROM apartment_buildings WHERE building_manager\t =  \"Emma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  \"Columbus Square\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment numbers of the apartments with type code \"Flat\".", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments WHERE apt_type_code  =  \"Flat\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment number with the largest number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  \"Gym\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are dates of birth of all the guests whose gender is \"Male\"?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_birth FROM guests WHERE gender_code  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the top three apartment types in terms of the average room count? Give me the", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Find all the building full names containing the word \"court\".", "output": "```gerenated SQL\n-- SQL: SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Return the date of birth for all the guests with gender code \"Male\".", "output": "```gerenated SQL\n-- SQL: SELECT date_of_birth FROM guests WHERE gender_code  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the minimum and maximum number of bathrooms of all the apartments?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the most common apartment type code.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "output": "```gerenated SQL\n-- SQL: SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  \"Duplex\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "How many apartment bookings are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments WHERE apt_type_code  =  \"Flat\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Give me a list of all the distinct building descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT building_description FROM apartment_buildings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  \"Suite 634\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  \"Kyle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `View_Unit_Status` (\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),\r\n  status_date DATETIME PRIMARY KEY,\r\n  available_yn BIT\r\n);\n\n", "input": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "output": "```gerenated SQL\n-- SQL: SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the start dates and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT booking_start_date ,  booking_end_date FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "What are the start date and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT booking_start_date ,  booking_end_date FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Return the first names and last names of all guests", "output": "```gerenated SQL\n-- SQL: SELECT guest_first_name ,  guest_last_name FROM guests;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Count the total number of apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  \"Duplex\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the most common apartment type code among apartments with more than 1 bathroom.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the first names and last names of all the guests?", "output": "```gerenated SQL\n-- SQL: SELECT guest_first_name ,  guest_last_name FROM guests;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the apartment number of the apartment with the most beds?", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the average room count of the apartments that have booking status code \"Provisional\".", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  \"Columbus Square\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the apartment number, start date, and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Tell me the booking status code for the apartment with number \"Suite 634\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  \"Suite 634\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show the short names of the buildings managed by \"Emma\".", "output": "```gerenated SQL\n-- SQL: SELECT building_short_name FROM apartment_buildings WHERE building_manager\t =  \"Emma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "How many apartments do not have any facility?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "output": "```gerenated SQL\n-- SQL: SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager\t =  \"Brenden\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type code appears the most often?", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "Show the total number of rooms of all apartments with facility code \"Gym\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  \"Gym\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Sort the apartment numbers in ascending order of room count.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY room_count ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Give me the minimum and maximum bathroom count among all the apartments.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Find the names of channels that are not owned by CCTV.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner != 'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Count the number of programs.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Which channels are not owned by CCTV? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner != 'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "list all the names of programs, ordering by launch time.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "what is the number of different channel owners?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT owner) FROM channel;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "How many distinct programs are broadcast at \"Night\" time?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which programs' origins are not \"Beijing\"? Give me the program names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program WHERE origin != 'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\nCREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Find the names of the channels that are broadcast in the morning.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the program owners that have some programs in both morning and night time.", "output": "```gerenated SQL\n-- SQL: SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Night\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What are the names of the channels owned by CCTV or HBS?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "find the total percentage share of all channels owned by CCTV.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What is the list of program names, sorted by the order of launch date?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the total rating of channel for each channel owner?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Who are the owners of the programs that broadcast both in the morning and at night?", "output": "```gerenated SQL\n-- SQL: SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Night\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which program is broadcast most frequently? Give me the program name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which program was launched most recently? Return the program name.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Show me the owner of the channel with the highest rating.", "output": "```gerenated SQL\n-- SQL: SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the total share (in percent) of all the channels owned by CCTV?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\nCREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Which channels are broadcast in the morning? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "List all program origins in the alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM program ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "how many programs are broadcast in each time section of the day?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "List the name, origin and owner of each program.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  origin ,  owner FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "find the number of different programs that are broadcast during night time.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\nCREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Which channels broadcast both in the morning and at night? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What is the list of program origins ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM program ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "how many programs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Give me a list of all the channel names sorted by the channel rating in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Count the number of programs broadcast for each time section of a day.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the names of programs whose origin is not in Beijing.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program WHERE origin != 'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the name of the program that was launched most recently.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Find the total rating ratio for each channel owner.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Count the number of distinct channel owners.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT owner) FROM channel;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "List all channel names ordered by their rating in percent from big to small.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Find the name of the program that is broadcast most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\nCREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "what are the names of the channels that broadcast in both morning and night?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Rent_Arrears` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.council_tax_id FROM rent_arrears as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id JOIN customer_master_index as t3 ON t3.master_customer_id  =  t2.master_customer_id WHERE t3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Benefits_Overpayments` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "output": "```gerenated SQL\n-- SQL: SELECT t1.source_system_code ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN benefits_overpayments as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id ORDER BY t2.council_tax_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?", "output": "```gerenated SQL\n-- SQL: SELECT t1.source_system_code ,  t1.master_customer_id ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN parking_fines as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Council_Tax` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cmi_cross_ref_id ,  t1.source_system_code FROM cmi_cross_references as t1 JOIN council_tax as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rent_Arrears` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "How many council taxes are collected for renting arrears ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rent_arrears;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Electoral_Register` (\r\n  electoral_register_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.electoral_register_id FROM electoral_register as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id WHERE t2.source_system_code  =  'Electoral' OR t2.source_system_code  =  'Tax';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "List the council tax ids and their related cmi cross references of all the parking fines.", "output": "```gerenated SQL\n-- SQL: SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.source_system_code FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t1.cmi_details  =  'Gottlieb ,  Becker and Wyman';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Business_Rates` (\r\n  business_rates_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n", "output": "```gerenated SQL\n-- SQL: SELECT t2.cmi_cross_ref_id ,  t2.master_customer_id ,  COUNT(*) FROM business_rates as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "How many different source system code for the cmi cross references are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "Which distinct source system code includes the substring 'en'?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cmi_details FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t2.source_system_code  =  'Tax';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "Which cmi cross reference id is not related to any parking taxes?", "output": "```gerenated SQL\n-- SQL: SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find all the product whose name contains the word \"Scanner\".", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product LIKE \"%Scanner%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "For each type of store, how many of them are there?", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM store GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of all the stores located in Khanewal District?", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "How many stores are headquarted in each city?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the most prominent max page size among all the products.", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the number of stores in each city.", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of all the stores in the largest district by population?", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the different district names in order of descending city area?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT district_name FROM district ORDER BY city_area DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the average number of pages per minute color?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(pages_per_minute_color) FROM product;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the name all districts with city area greater than 10 or population larger than 100000", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the total population of the districts where the area is bigger than the average city area.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the most common maximum page size?", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are all of the products whose name includes the substring \"Scanner\"?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product LIKE \"%Scanner%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the city with the most number of stores.", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the total population of the top 3 districts with the largest area.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the names of districts where have both city mall and village store type stores.", "output": "```gerenated SQL\n-- SQL: SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"City Mall\" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"Village Store\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What is the city with the most number of flagship stores?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the average pages per minute color?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(pages_per_minute_color) FROM product;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Which district has the largest population?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What city is the headquarter of the store Blackville?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_product` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What products are sold at the store named Miramichi?", "output": "```gerenated SQL\n-- SQL: SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the maximum page size for everything that has more than 3 products listed?", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the name of the products that are not using the most frequently-used max page size.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_product` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What products are available at store named \"Miramichi\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of the districts that have both mall and village store style shops?", "output": "```gerenated SQL\n-- SQL: SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"City Mall\" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"Village Store\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Which city is the headquarter of the store named \"Blackville\" in?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find all the distinct district names ordered by city area in descending.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT district_name FROM district ORDER BY city_area DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "output": "```gerenated SQL\n-- SQL: SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Which district has the least area?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find all types of store and number of them.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM store GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the names of all stores in Khanewal District.", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the total number of residents for the districts with the 3 largest areas?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the list of page size which have more than 3 product listed", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find all the stores in the district with the most population.", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the names of all products that are not the most frequently-used maximum page size?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "output": "```gerenated SQL\n-- SQL: SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show the company name with the number of gas station.", "output": "```gerenated SQL\n-- SQL: SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "For each location, how many gas stations are there in order?", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show minimum, maximum, and average market value for all companies.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters without companies that are in the banking industry?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List all headquarters and the number of companies in each headquarter.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show all headquarters without a company in banking industry.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What is the total number of companies?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show all company names and headquarters in the descending order of market value.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "output": "```gerenated SQL\n-- SQL: SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show the manager name with most number of gas stations opened after 2000.", "output": "```gerenated SQL\n-- SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show all locations and the number of gas stations in each location ordered by the count.", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "How many gas station are opened between 2000 and 2005?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the name and rank of every company ordered by descending number of sales?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  rank FROM company ORDER BY sales_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the main indstries and total market value for each industry?", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "For each headquarter, what are the headquarter and how many companies are centered there?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "output": "```gerenated SQL\n-- SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all main industry for all companies.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT main_industry FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "How many gas companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters with at least two companies in the banking industry?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "output": "```gerenated SQL\n-- SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the names and headquarters of all companies ordered by descending market value?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the different main industries for all companies?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT main_industry FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show company name and main industry without a gas station.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the locations of all the gas stations ordered by opening year?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all main industry and total market value in each industry.", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the main industries of the companies without gas stations and what are the companies?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What is the total number of gas stations that opened between 2000 and 2005?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "output": "```gerenated SQL\n-- SQL: SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "order all gas station locations by the opening year.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "List the main industry with highest total market value and its number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "output": "```gerenated SQL\n-- SQL: SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show all locations where a gas station for company with market value greater than 100 is located.", "output": "```gerenated SQL\n-- SQL: SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show headquarters with at least two companies in the banking industry.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "output": "```gerenated SQL\n-- SQL: SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "output": "```gerenated SQL\n-- SQL: SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "For each company id, what are the companies and how many gas stations does each one operate?", "output": "```gerenated SQL\n-- SQL: SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\nCREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What is the minimum, maximum, and average market value for every company?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What is the average number of audience for festivals?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(num_of_audience) FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "Show the number of audience in year 2008 or 2010.", "output": "```gerenated SQL\n-- SQL: SELECT num_of_audience FROM festival_detail WHERE year  =  2008 OR year  =  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "How many artworks are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM artwork;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the ids and names of festivals that have at least two nominations for artworks.", "output": "```gerenated SQL\n-- SQL: SELECT t1.festival_id ,  t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the most common type of artworks.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM artwork GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "Show the names of the three most recent festivals.", "output": "```gerenated SQL\n-- SQL: SELECT festival_name FROM festival_detail ORDER BY year DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t3.Festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What is the location of the festival with the largest number of audience?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "output": "```gerenated SQL\n-- SQL: SELECT chair_name FROM festival_detail ORDER BY year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t2.type  =  \"Program Talent Show\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the name of artworks whose type is not \"Program Talent Show\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork WHERE type != \"Program Talent Show\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the total number of the audiences who visited any of the festivals?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(num_of_audience) FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the id, name of each festival and the number of artworks it has nominated.", "output": "```gerenated SQL\n-- SQL: SELECT t1.festival_id ,  t3.festival_name ,  COUNT(*) FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "List the name of artworks that are not nominated.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork WHERE artwork_ID NOT IN (SELECT artwork_ID FROM nomination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names and locations of festivals?", "output": "```gerenated SQL\n-- SQL: SELECT festival_name ,  location FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM festival_detail WHERE location  =  'United States' INTERSECT SELECT year FROM festival_detail WHERE location != 'United States';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the name of artworks in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show distinct types of artworks that are nominated in festivals in 2007.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.type FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t3.year  =  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the names of artworks in ascending order of the year they are nominated in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id ORDER BY t3.year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Please show different types of artworks with the corresponding number of artworks of each type.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM artwork GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the number of buildings with a height above the average or a number of floors above the average.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM building WHERE height_feet  >  (SELECT AVG(height_feet) FROM building) OR floors  >  (SELECT AVG(floors) FROM building);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\n", "input": "How many proteins are associated with an institution in a building with at least 20 floors?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id JOIN building as t3 ON t3.building_id  =  t1.building_id WHERE t3.floors  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the protein name and the institution name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.protein_name ,  t1.institution FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "What are the average, maximum, and minimum number of floors for all buildings?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(floors) ,  MAX(floors) ,  MIN(floors) FROM building;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show institution types, along with the number of institutions and total enrollment for each type.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) ,  SUM(enrollment) FROM institution GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "What is the name of the tallest building?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building ORDER BY height_feet DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "How many buildings are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM building;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "For each building, show the name of the building and the number of institutions in it.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id GROUP BY t1.building_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "How many institutions do not have an associated protein in our record?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  street_address ,  floors FROM building ORDER BY floors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM institution WHERE founded  >  1990 AND enrollment  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id WHERE t1.founded  >  1880 OR t1.type  =  'Private';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "output": "```gerenated SQL\n-- SQL: SELECT institution ,  location FROM institution WHERE founded  >  1990 AND type  =  'Private';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the names and heights of buildings with at least two institutions founded after 1880.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.height_feet FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  >  1880 GROUP BY t1.building_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show all the distinct institution types.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT type FROM institution;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show institution names along with the number of proteins for each institution.", "output": "```gerenated SQL\n-- SQL: SELECT t1.institution ,  COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id GROUP BY t1.institution_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the institution type with the largest number of institutions.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM institution GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the park of the roller coaster with the highest speed.", "output": "```gerenated SQL\n-- SQL: SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the speeds of the longest roller coaster?", "output": "```gerenated SQL\n-- SQL: SELECT speed FROM roller_coaster ORDER BY length DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the names of countries that have more than one roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the name and population of the country that has the highest roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What is the average speed of roller coasters?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(speed) FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Please show the most common status of roller coasters.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the country names, area and population which has both roller coasters with speed higher", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  >  60 INTERSECT SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  <  55;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "How many countries do not have an roller coaster longer than 3000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE length  >  3000 );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster WHERE length  >  3300 OR height  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the names of roller coasters and names of country they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "How many roller coasters are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the names of countries and the average speed of roller coasters from each country.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  AVG(t2.speed) FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "List the status shared by more than two roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster GROUP BY status HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "List the names of countries whose language is not \"German\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM country WHERE languages != \"German\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the lengths and heights of roller coasters?", "output": "```gerenated SQL\n-- SQL: SELECT length ,  height FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "List the names of roller coasters by ascending order of length.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM roller_coaster ORDER BY length ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "List the service id and details for the events.", "output": "```gerenated SQL\n-- SQL: SELECT service_id ,  event_details FROM events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\n", "input": "Which services type had both successful and failure event details?", "output": "```gerenated SQL\n-- SQL: SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Success' INTERSECT SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Fail';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "How many events did not have any participants?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "What are the ids and details of events that have more than one participants?", "output": "```gerenated SQL\n-- SQL: SELECT t1.event_id ,  t1.event_details FROM events as t1 JOIN participants_in_events as t2 ON t1.event_id  =  t2.event_id GROUP BY t1.event_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "What are all the distinct participant ids who attended any events?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT participant_id) FROM participants_in_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\nCREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "Which service id and type has the least number of participants?", "output": "```gerenated SQL\n-- SQL: SELECT t3.service_id ,  t4.service_type_code FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id JOIN events as t3 ON t2.event_id   =  t3.event_id JOIN services as t4 ON t3.service_id  =  t4.service_id GROUP BY t3.service_id ORDER BY COUNT(*) asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\n", "input": "List the type of the services in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT service_type_code FROM services ORDER BY service_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "What is the most common participant type?", "output": "```gerenated SQL\n-- SQL: SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "How many events had participants whose details had the substring 'Dr.'", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id WHERE t1.participant_details LIKE '%Dr.%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "What is the id of the event with the most participants?", "output": "```gerenated SQL\n-- SQL: SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "output": "```gerenated SQL\n-- SQL: SELECT event_id FROM events EXCEPT SELECT t1.event_id FROM participants_in_events as t1 JOIN participants as t2 ON t1.participant_id  =  t2.participant_id WHERE participant_details  =  'Kenyatta Kuhn';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\n", "input": "what are the event details of the services that have the type code 'Marriage'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.event_details FROM events as t1 JOIN services as t2 ON t1.service_id  =  t2.service_id WHERE t2.service_type_code  =  'Marriage';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "What are all the the participant ids, type code and details?", "output": "```gerenated SQL\n-- SQL: SELECT participant_id ,  participant_type_code ,  participant_details FROM  participants;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "How many events have each participants attended? List the participant id, type and the number.", "output": "```gerenated SQL\n-- SQL: SELECT t1.participant_id ,  t1.participant_type_code ,  COUNT(*) FROM participants as t1 JOIN participants_in_Events as t2 ON t1.participant_id  =  t2.participant_id GROUP BY t1.participant_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What is the average length in feet of the bridges?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(length_feet) FROM bridge;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What is the id, name and nationality of the architect who built most mills?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What is the maximum length in meters for the bridges and what are the architects' names?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t1.length_meters) ,  t2.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What are the ids and names of the architects who built at least 3 bridges ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "How many architects are female?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM architect WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "How many architects haven't built a mill before year 1850?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the names of the mills which are not located in 'Donceel'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM mill WHERE location != 'Donceel';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What are the ids, names and genders of the architects who built two bridges or one mill?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  2 UNION SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the distinct types of mills that are built by American or Canadian architects?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.type FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' OR t2.nationality  =  'Canadian';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What is the most common mill type, and how many are there?", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM mill GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id JOIN bridge as t3 ON t3.architect_id  =  t2.id WHERE t3.length_meters  >  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "Which of the mill names contains the french word 'Moulin'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the distinct names and nationalities of the architects who have ever built a mill?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show the locations that have more than one railways.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM railway GROUP BY location HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show the most common builder of railways.", "output": "```gerenated SQL\n-- SQL: SELECT builder FROM railway GROUP BY builder ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What are the names of managers in ascending order of level?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manager ORDER BY level ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "List the object number of railways that do not have any trains.", "output": "```gerenated SQL\n-- SQL: SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the countries that have both managers of age above 50 and managers of age below 46.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM manager WHERE age  >  50 INTERSECT SELECT country FROM manager WHERE age  <  46;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "What are the names and arrival times of trains?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  arrival FROM train;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the maximum level of managers in countries that are not \"Australia\"?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(level) FROM manager WHERE country != \"Australia\t\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the working years of managers in descending order of their level.", "output": "```gerenated SQL\n-- SQL: SELECT working_year_starts FROM manager ORDER BY level DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "How many railways are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM railway;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the name of the oldest manager?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manager ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id WHERE t2.name  =  \"Andaman Exp\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show the names of trains and locations of railways they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show different locations of railways along with the corresponding number of railways at each location.", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM railway GROUP BY location;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show the id and builder of the railway that are associated with the most trains.", "output": "```gerenated SQL\n-- SQL: SELECT t2.railway_id ,  t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the average age for all managers?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM manager;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "List the builders of railways in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT builder FROM railway ORDER BY builder ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show id and location of railways that are associated with more than one train.", "output": "```gerenated SQL\n-- SQL: SELECT t2.railway_id ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the distinct countries of managers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT country FROM manager;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the countries that have managers of age above 50 or below 46.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM manager WHERE age  >  50 OR age  <  46;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show different publishers together with the number of publications they have.", "output": "```gerenated SQL\n-- SQL: SELECT publisher ,  COUNT(*) FROM publication GROUP BY publisher;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "output": "```gerenated SQL\n-- SQL: SELECT price FROM publication WHERE publisher  =  \"Person\" OR publisher  =  \"Wiley\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What are the dates of publications in descending order of price?", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication ORDER BY price DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What is the number of distinct publication dates?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT publication_date) FROM publication;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the writers who have written more than one book.", "output": "```gerenated SQL\n-- SQL: SELECT writer FROM book GROUP BY writer HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What are the distinct publishers of publications with price higher than 5000000?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT publisher FROM publication WHERE price  >  5000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication WHERE price  >  10000000 INTERSECT SELECT publisher FROM publication WHERE price  <  5000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book WHERE writer != \"Elaine Lee\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Please show the most common publication date.", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "Show writers who have published a book with price more than 4000000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.writer FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id WHERE t2.price  >  4000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the titles of the books in ascending order of issues.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book ORDER BY issues ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "List the publisher of the publication with the highest price.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication ORDER BY price DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "How many distinct publication dates are there in our record?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT publication_date) FROM publication;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "How many books are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM book;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the writers of the books in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT writer FROM book ORDER BY writer ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "List the publication dates of publications with 3 lowest prices.", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the titles of books that are not published.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "Show the titles of books in descending order of publication price.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id ORDER BY t2.price DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show publishers that have more than one publication.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*)  >  1;\n```"}
