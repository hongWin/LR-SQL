{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find number of products which Sony does not make.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many products have prices of at least 180?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM products WHERE price >= 180;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many companies were created by Andy?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is between 100 and 150.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is greater than the average revenue of all companies.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of products with price at most 200?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products WHERE price  <=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Find the first name and age of the students who are playing both Football and Lacrosse.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  \"Lacrosse\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the names of all the games that have been played for at least 1000 hours?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games have type Massively multiplayer online game?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games do you have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video game types exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT gtype) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the total number of hours per work and number of games played by David Shieber?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  \"David\" AND t2.lname  =  \"Shieber\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show ids of students who don't play video game.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the ids of all students who don't play sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" INTERSECT SELECT nominee FROM musical WHERE award  =  \"Drama Desk award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many actors have appeared in each musical?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List the name of musicals that do not have actors.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of musicals who have at 3 or more actors?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the name of the entrepreneur with the greatest weight?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of people in ascending order of weight?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people ORDER BY weight ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "Count the number of different companies.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT company) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions Vincent and Marcelle visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Marcelle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "What are the distinct visit dates?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT visit_date FROM visits;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"660 Shea Crescent\" OR t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which transportation method is used the most often to get to tourist attractions?", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Museums` (\r\n  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Museum_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Give me the detail and opening hour for each museum.", "output": "```gerenated SQL\n-- SQL: SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"254 Ottilie Junction\" OR t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of distinct names associated with the photos.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM photos;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"US museum\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Which teams had more than 3 eliminations?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the locations that are shared by more than two wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "How many wrestlers are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What is the number of distinct teams that suffer elimination?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT team) FROM elimination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many tips has Michelle written in 2010", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all users who reviewed restaurant \" Mesa Grill \"", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all the neighbourhoods with Italian restaurant in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many escape games are there in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many reviews has Michelle written in March 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all Dallas restaurant with a rating above 4.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "what is the average rating given in Michelle reviews", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.rating) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "list all the businesses which Niloofar rated 5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all reviews about \" Kabob Palace \" in year 2014", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "output": "```gerenated SQL\n-- SQL: SELECT date_incident_start ,  date_incident_end FROM behavior_incident WHERE incident_type_code  =  \"NOISE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the maximum and minimum monthly rental for all student addresses.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(monthly_rental) ,  MIN(monthly_rental) FROM student_addresses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What is the gender of the teacher with last name \"Medhurst\"?", "output": "```gerenated SQL\n-- SQL: SELECT gender FROM teachers WHERE last_name  =  \"Medhurst\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many distinct students have been in detention?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT student_id) FROM students_in_detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Return the average gross sales in dollars across all films.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gross_in_dollar) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film WHERE director  =  \"Nicholas Meyer\" INTERSECT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "Return the low and high estimates for all film markets.", "output": "```gerenated SQL\n-- SQL: SELECT low_estimate ,  high_estimate FROM film_market_estimation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Which studios have never worked with the director Walter Hill?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\nCREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\n", "input": "What are the entry names of catalog with the attribute possessed by most entries.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "What are the name and level of catalog structure with level number between 5 and 10", "output": "```gerenated SQL\n-- SQL: SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find all the catalog publishers whose name contains \"Murray\"", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the entry name of the catalog with the highest price (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of airports per country, ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, and country of the airport that has the lowest altitude.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "In how many cities are there airports in the country of Greenland?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, and country of the airport with the lowest altitude?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per country? Order the countries by decreasing number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the number of airlines based in Russia?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines WHERE country  =  'Russia';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the names of the top 10 airlines that operate the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "List the dates of games by the home team name in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT date FROM game ORDER BY home_team DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Which physicians are in charge of more than one patient? Give me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "Find the department with the most employees.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Sort the list of names and costs of all procedures in the descending order of cost.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\n", "input": "What are the names of the physician who prescribed the highest dose?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Find the id of the appointment with the most recent start date?", "output": "```gerenated SQL\n-- SQL: SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of nurses who are on call.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Which department has the largest number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "What is the stories of highest building?", "output": "```gerenated SQL\n-- SQL: SELECT stories FROM buildings ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Sort the company names in descending order of the company's market value.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies ORDER BY market_value_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies WHERE headquarters  =  \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters  =  \"China\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE status  =  \"on-hold\" ORDER BY stories ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all ministers who do not belong to Progress Party.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE party_name != 'Progress Party';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers who took office after 1961 or before 1959?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Show party names and the number of events for each party.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\n", "input": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id JOIN web_client_accelerator as t3 ON t2.accelerator_id  =  t3.id WHERE t3.name  =  'CProxy' AND t2.compatible_since_year  >  1998;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id ORDER BY AVG(amount_of_transaction);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show all investor details.", "output": "```gerenated SQL\n-- SQL: SELECT investor_details FROM investors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "What are the details of the lots which are not used in any transactions?", "output": "```gerenated SQL\n-- SQL: SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.lot_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  COUNT(*) FROM transactions WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the schools that were either founded before 1850 or are public?", "output": "```gerenated SQL\n-- SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the maximum enrollment across all schools?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the team name and acc regular season score of the school that was founded for the longest time?", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a good place in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me some good restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i find a jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best place in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what is the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name of the user who has the largest number of followers.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  followers FROM user_profiles ORDER BY followers DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates with a maximum temperature higher than 85?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE max_temperature_f  >  85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are all the different start station names for a trip that lasted less than 100?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "On which day has it neither been foggy nor rained in the zip code of 94107?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE zip_code  =  94107 AND events != \"Fog\" AND events != \"Rain\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the number of distinct cities the stations are located at?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM station;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the start station's name and id for the one that had the most start trips in August?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "Find the ids and names of stations from which at least 200 trips started.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Chico?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Chico\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many campuses are there in Los Angeles county?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many campuses exist are in the county of LA?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Report the name of all campuses in Los Angeles county.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "How many degrees were conferred in \"San Jose State University\" in 2000?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "What is the number of faculty at Long Beach State University in 2002?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  \"Long Beach State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the total number of campuses?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the most common nationality for journalists.", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the papers which have \"Olin Shivers\" as an author.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the number of papers published by authors from the institution \"Tokohu University\".", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which institution has the most papers? Find the name of the institution.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "How many papers are \"Atsushi Ohori\" the author of?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the name of the organization that has published the largest number of papers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find all the papers published by \"Aaron Turon\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "How many furniture components are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(num_of_component) FROM furniture;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the male friend of Alice whose job is a doctor?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the person that has no friend?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT name FROM personfriend;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the ages of all of Zach's friends who are in the longest relationship?", "output": "```gerenated SQL\n-- SQL: SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the number of people whose age is greater than all engineers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is minimum age for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is each gender, on average?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  gender FROM person GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find Alice's friends of friends.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the age of the doctor named Zach?", "output": "```gerenated SQL\n-- SQL: SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "output": "```gerenated SQL\n-- SQL: SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes who does not produce 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE product != 'Heme';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "Which enzyme names have the substring \"ALA\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\nCREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\n", "input": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\nCREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "output": "```gerenated SQL\n-- SQL: SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\nCREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "Show the facility codes of apartments with more than 4 bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return all the apartment numbers sorted by the room count in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY room_count ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the average number of bedrooms of all the apartments.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bedroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "What are the building full names that contain the word \"court\"?", "output": "```gerenated SQL\n-- SQL: SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What are the name, origin and owner of each program?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  origin ,  owner FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Find the names of programs that are never broadcasted in the morning.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the owner of the channel that has the highest rating ratio?", "output": "```gerenated SQL\n-- SQL: SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "List the names of all the channels owned by either CCTV or HBS", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "List all information about customer master index, and sort them by details in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM customer_master_index ORDER BY cmi_details DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the name and population of district with population between 200000 and 2000000", "output": "```gerenated SQL\n-- SQL: SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the name of the district with the smallest area?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the total population for all the districts that have an area larger tahn the average city area?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the name of the district with the most residents?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What is the name of the manager with the most gas stations that opened after 2000?", "output": "```gerenated SQL\n-- SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "List the company name and rank for all companies in the decreasing order of their sales.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  rank FROM company ORDER BY sales_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the companies and main industries of all companies that are not headquartered in the United States?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show the manager name for gas stations belonging to the ExxonMobil company.", "output": "```gerenated SQL\n-- SQL: SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names of festivals held in year 2007?", "output": "```gerenated SQL\n-- SQL: SELECT festival_name FROM festival_detail WHERE year  =  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "List the year in which there are more than one festivals.", "output": "```gerenated SQL\n-- SQL: SELECT year FROM festival_detail GROUP BY year HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the name of buildings that do not have any institution.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\nCREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the names of buildings except for those having an institution founded in 2003.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building EXCEPT SELECT t1.name FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  =  2003;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the different statuses and the numbers of roller coasters for each status.", "output": "```gerenated SQL\n-- SQL: SELECT status ,  COUNT(*) FROM roller_coaster GROUP BY status;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "How many participants belong to the type 'Organizer'?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM participants WHERE participant_type_code  =  'Organizer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  built_year FROM mill WHERE type  =  'Grondzeiler';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show different builders of railways, along with the corresponding number of railways using each builder.", "output": "```gerenated SQL\n-- SQL: SELECT builder ,  COUNT(*) FROM railway GROUP BY builder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "List the wheels and locations of the railways.", "output": "```gerenated SQL\n-- SQL: SELECT wheels ,  location FROM railway;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "What are the title and issues of the books?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  issues FROM book;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\nCREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show the title and publication dates of books.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.publication_date FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id;\n```"}
