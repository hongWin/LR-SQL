db_id,query,question,database_schema
manufactory_1,"SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder",Find the total revenue of companies of each founder.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing',Find the number of manufactures that are based in Tokyo or Beijing.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",Select the name of each manufacturer along with the name and price of its most expensive product.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy',Return the number of companies created by Andy.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name LIKE 'S%',Who is the founders of companies whose first letter is S?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name  =  'Sony',Who is the founder of Sony?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers","What are the average, maximum and total revenues of all companies?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products,What is the average price across all products?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony',What are the names of products produced by both Creative Labs and Sony?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM products WHERE price  <=  200,Select the name of the products with a price less than or equal to $200.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT COUNT(*) FROM products WHERE price >= 180,Compute the number of products with a price larger than or equal to $180.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC","Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code,"What is all the product data, as well as  each product's manufacturer?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin',What is the sum of revenue from companies with headquarters in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products WHERE manufacturer  =  2,Compute the average price of all products with manufacturer code equal to 2.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer","What are the average prices of products, grouped by manufacturer code?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM products,Select the names of all the products in the store.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter",How many different products are produced in each headquarter city?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  price FROM products",What are the names and prices of all products in the store?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',What is the headquarter of the company whose founder is James?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan',What is the total revenue of all companies whose main office is at Tokyo or Taiwan?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","What are the average prices of products, grouped by manufacturer name?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name  =  'Sony',Return the founder of Sony.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",How many products are there for each manufacturer?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin',Find the total revenue created by the companies whose headquarter is located at Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","What are the names, headquarters and founders of the company with the highest revenue?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1",Select the name and price of the cheapest product.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1",What is the name and price of the cheapest product?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name",What is the total revenue of each manufacturer?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products,Compute the average price of all the products.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Find the average prices of all products from each manufacture, and list each company's name.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",What are the average prices of products for each manufacturer?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM products,What are the names of all products?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',Where is the headquarter of the company founded by James?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing',How many manufacturers have headquarters in either Tokyo or Beijing?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter",What are the names and revenues of the companies with the highest revenues in each headquarter city?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Find the number of products for each manufacturer, showing the name of each company.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150,What are the names of companies with revenue between 100 and 150?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products WHERE price BETWEEN 60 AND 120,Find all information of all the products with a price between $60 and $120.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC","What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code,Select all the data from the products and each product's manufacturer.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter",Find the number of different products that are produced by companies at different headquarter cities.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony',Find the name of product that is produced by both companies Creative Labs and Sony.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder",What is the total revenue of companies started by founder?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products",Select the names and the prices of all the products in the store.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter",Find the name and revenue of the company that earns the highest revenue in each city.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products WHERE price BETWEEN 60 AND 120,What is all the information of all the products that have a price between 60 and 120?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT DISTINCT headquarter FROM manufacturers,Give the distinct headquarters of manufacturers.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT code ,  name ,  MIN(price) FROM products GROUP BY name",What are the codes and names of the cheapest products in each category?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT code ,  name ,  MIN(price) FROM products GROUP BY name",Select the code of the product that is cheapest in each product category.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150",What are the names and average prices of products for manufacturers whose products cost on average 150 or more?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name",Find the total revenue for each manufacturer.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers","Return the average, maximum, and total revenues across all manufacturers.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products WHERE manufacturer  =  2,What is the average price of products with manufacturer codes equal to 2?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","For each manufacturer name, what are the names and prices of their most expensive product?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","Find the name, headquarter and founder of the manufacturer that has the highest revenue.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC","Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC","What are the names and headquarters of all manufacturers, ordered by revenue descending?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony'),How many products are not made by Sony?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive',Find the name of companies that do not make DVD drive.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC","What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT DISTINCT headquarter FROM manufacturers,What are the different cities listed?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan',Return the total revenue of companies with headquarters in Tokyo or Taiwan.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name LIKE 'S%',Find the founder of the company whose name begins with the letter 'S'.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers),What are the names of manufacturers with revenue greater than the average of all revenues?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive',What are the names of companies that do not make DVD drives?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer","Select the average price of each manufacturer's products, showing only the manufacturer's code.","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Select the average price of each manufacturer's products, showing the manufacturer's name.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1,Which game type has least number of games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT SUM(gamesplayed) FROM sportsinfo,How many games are played for all students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname",How many students play each sport?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  ""Football""",What are the ids of all male students who do not play football?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  ""David"" AND t2.lname  =  ""Shieber""",Show total hours per week and number of games played for student David Shieber.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM student WHERE advisor  =  1121,Show ids for all students who have advisor 1121.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1,Which game type has most number of games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid",Show all student ids and the number of hours played.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo,Show student ids who don't have any sports.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM sportsinfo,How many different students are involved in sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2,What are the advisors,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM plays_games,How many different students play games?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20",Show total hours per week and number of games played for students under 20.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20",What is the total number of hours per week and number of games played by students under 20?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  ""football""",What are the ids of all female students who play football?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gtype FROM video_games WHERE gname  =  ""Call of Destiny""",What is the type of video game Call of Destiny.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1,What type has the most games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000,Show all game names played by at least 1000 hours.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid",Show all game ids and the number of hours played.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT gname ,  gtype FROM video_games ORDER BY gname",Show all video games and their types in the order of their names.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  ""Smith"" AND t3.fname  =  ""Linda""",What are the names of all games played by Linda Smith?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT fname FROM student WHERE major  =  600,Show first name for all students with major 600.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10,What are the student IDs for everybody who worked for more than 10 hours per week on all sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1,What is the name of the game that has been played the most?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',List ids for all student who are on scholarship.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  ""Football"" OR t1.sportname  =  ""Lacrosse""",What is the first and last name of all students who play Football or Lacrosse?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1",What is the first and last name of the student who played the most sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  ""Football""",Show all male student ids who don't play football.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major","Show the average, minimum, and maximum age for different majors.","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT fname FROM student WHERE major  =  600,What are the first names for all students who are from the major numbered 600?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Call of Destiny"" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Works of Widenius"")",Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gtype FROM video_games WHERE gname  =  ""Call of Destiny""",What type of game is Call of Destiny?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid",Show all student IDs with the number of sports and total number of games played,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',What are the ids for all sporty students who are on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  ""Football"" OR t1.sportname  =  ""Lacrosse""",Find the last and first name of students who are playing Football or Lacrosse.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',What are the student ids for those on scholarship in major number 600?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",What is the total number of all football games played by scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',Show student ids who are on scholarship and have major 600.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games,Show ids of students who play video game and play sports.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT SUM(gamesplayed) FROM sportsinfo,What is the total number of games played?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT COUNT(*) FROM video_games,How many video games exist?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1,Which sport has most number of students on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname",Show all sport name and the number of students.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT gname ,  gtype FROM video_games ORDER BY gname",What are the names of all the video games and their types in alphabetical order?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10,Show all student IDs with more than total 10 hours per week on all sports played.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  ""Football"" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  ""Lacrosse"")",What are the first names and ages of all students who are playing both Football and Lacrosse?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype",What are the types of video games and how many are in each type?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT stuid FROM student WHERE city_code  =  ""CHI""",Show ids for all students who live in CHI.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid",What are ids and total number of hours played for each game?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  ""Smith"" AND t3.fname  =  ""Linda""",Show all game names played by Linda Smith,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Call of Destiny"" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Works of Widenius"")",what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gname FROM video_games WHERE gtype  =  ""Collectible card game""",What are the names of all video games that are collectible cards?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gname FROM video_games WHERE gtype  =  ""Collectible card game""",Show all video games with type Collectible card game.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT COUNT(DISTINCT gtype) FROM video_games,What is the count of different game types?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT DISTINCT gtype FROM video_games,What are the different types of video games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",How many games are played for all football games by students on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1",What is the first name and last name of the student who have most number of sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid",What are the ids of all students and number of hours played?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT COUNT(*) FROM video_games WHERE gtype  =  ""Massively multiplayer online game""",Count the number of video games with Massively multiplayer online game type .,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games,What are the ids of all students who are not video game players?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y',Show last names for all student who are on scholarship.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid FROM student WHERE city_code  =  ""CHI""",What are the ids of all students who live in CHI?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT sportname) FROM sportsinfo,How many different types of sports do we offer?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1,Show the game name that has most number of hours played.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major","What are the average, minimum, and max ages for each of the different majors?","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  ""football""",Show student ids who are female and play football.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM plays_games,How many students play video games?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1,What is the type with the fewest games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM student WHERE advisor  =  1121,What are the ids of all students who have advisor number 1121?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1,What is the sport with the most scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid",What are the ids of all students along with how many sports and games did they play?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games,What are the ids of all students who played video games and sports?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y',What are the last names for all scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT DISTINCT gtype FROM video_games,Show all video game types.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2,Show all advisors who have at least two students.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT sportname) FROM sportsinfo,How many sports do we have?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM sportsinfo,How many students play sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
musical,SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1,Who is the nominee who has been nominated for the most musicals?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  ""The Phantom of the Opera""",What are the names of actors who have been in the musical titled The Phantom of the Opera?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC,Show names of actors in descending order of the year their musical is awarded.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  ""The Phantom of the Opera""","Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee",How many musicals has each nominee been nominated for?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" INTERSECT SELECT nominee FROM musical WHERE award  =  ""Drama Desk award""",Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2,Who are the nominees who have been nominated more than two times?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT duration FROM actor ORDER BY age DESC LIMIT 1,Return the duration of the actor with the greatest age.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT COUNT(*) FROM actor,Count the number of actors.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM actor ORDER BY name ASC,"What are the names of actors, ordered alphabetically?","CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT COUNT(*) FROM actor,How many actors are there?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT DISTINCT nominee FROM musical WHERE award != ""Tony award""",Return the different nominees of musicals that have an award that is not the Tony Award.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT character ,  duration FROM actor",Return the characters and durations for each actor.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2,List the nominees that have been nominated more than two musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT DISTINCT nominee FROM musical WHERE award != ""Tony award""","What are the distinct nominees of the musicals with the award that is not ""Tony Award""?","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id",Show names of actors and names of musicals they are in.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM actor ORDER BY name ASC,List the name of actors in ascending alphabetical order.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" OR award  =  ""Cleavant Derricks""",Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT name FROM actor WHERE age != 20,List the name of actors whose age is not 20.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT duration FROM actor ORDER BY age DESC LIMIT 1,What is the duration of the oldest actor?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM actor WHERE age != 20,What are the names of actors who are not 20 years old?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1,Please show the nominee who has been nominated the greatest number of times.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT character FROM actor ORDER BY age DESC,"Return the characters for actors, ordered by age descending.","CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1,List the most common result of the musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id",Show names of musicals and the number of actors who have appeared in the musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor),What are the names of musicals who have no actors?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT name FROM musical WHERE nominee  =  ""Bob Fosse""","What are the names of musicals with nominee ""Bob Fosse""?","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id",What are the names of actors and the musicals that they are in?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" OR award  =  ""Cleavant Derricks""","Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks"".","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC,What are the names of actors ordered descending by the year in which their musical was awarded?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1,Return the most frequent result across all musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee",Show different nominees and the number of musicals they have been nominated.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT character FROM actor ORDER BY age DESC,What are the characters of actors in descending order of age?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3,Show names of musicals which have at least three actors.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT character ,  duration FROM actor",What are the characters and duration of actors?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT name FROM musical WHERE nominee  =  ""Bob Fosse""",Return the names of musicals who have the nominee Bob Fosse.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
entrepreneur,SELECT COUNT(DISTINCT company) FROM entrepreneur,How many distinct companies are there?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2,Return the investors who have invested in two or more entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC,What are the weights of entrepreneurs in descending order of money requested?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT company FROM entrepreneur ORDER BY money_requested DESC,List the companies of entrepreneurs in descending order of money requested.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor",How many entrepreneurs correspond to each investor?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1,Show the company of the tallest entrepreneur.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1,What is the investor that has invested in the most number of entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1,Which company was started by the entrepreneur with the greatest height?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT AVG(money_requested) FROM entrepreneur,Return the average money requested across all entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur),List the names of people that are not entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85,What is the total money requested by entrepreneurs with height more than 1.85?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2,What are the investors that have invested in at least two entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  ""Simon Woodroffe"" OR t1.investor  =  ""Peter Jones""","What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT weight FROM people ORDER BY height ASC LIMIT 1,What is the weight of the shortest person?,"CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur),What are the names of people who are not entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id,What are the names of entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT company ,  investor FROM entrepreneur",What are the companies and investors that correspond to each entrepreneur?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT weight FROM people ORDER BY height ASC LIMIT 1,Return the weight of the shortest person.,"CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1,Return the name of the heaviest entrepreneur.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT name FROM people ORDER BY weight ASC,"Return the names of people, ordered by weight ascending.","CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000,What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor",What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT AVG(money_requested) FROM entrepreneur,What is the average money requested by all entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000,Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1,Return the investor who have invested in the greatest number of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id,Return the names of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT company FROM entrepreneur ORDER BY money_requested DESC,"What are the companies of entrepreneurs, ordered descending by amount of money requested?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT company ,  investor FROM entrepreneur",List the companies and the investors of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85,Give the total money requested by entrepreneurs who are taller than 1.85.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC,"Return the weights of entrepreneurs, ordered descending by amount of money requested.","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != ""Rachel Elnaugh""","What are the names of entrepreneurs whose investor is not ""Rachel Elnaugh""?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  ""Simon Woodroffe"" OR t1.investor  =  ""Peter Jones""",Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != ""Rachel Elnaugh""",Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT COUNT(*) FROM entrepreneur,Count the number of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested",List the names of entrepreneurs and their companies in descending order of money requested?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT COUNT(*) FROM entrepreneur,How many entrepreneurs are there?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
cre_Theme_park,"SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code",What is the average price range of hotels for each each star rating code?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id","What are the name, id and the corresponding number of visits for each  tourist attraction?","CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT price_range FROM hotels,What are the price ranges of hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1,Show the transportation method most people choose to get to tourist attractions.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping',Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attraction_Features` (
  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)
);

CREATE TABLE `Features` (
  Feature_ID INTEGER,
  Feature_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT location_name FROM locations WHERE location_name LIKE ""%film%""","Find all the locations whose names contain the word ""film"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3",What are the details and star ratings of the three hotels with the lowest price ranges?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn",What are the average prices of hotels grouped by their pet policy.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1",Show the description and code of the attraction type most tourist attractions belong to.,"CREATE TABLE `Ref_Attraction_Types` (
  Attraction_Type_Code CHAR(15) PRIMARY KEY,
  Attraction_Type_Description VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn",Show the average price of hotels for different pet policy.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id",What are the details and opening hours of the museums?,"CREATE TABLE `Museums` (
  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Museum_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT address FROM locations WHERE location_name  =  ""UK Gallery""","Find the address of the location named ""UK Gallery"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  ""game1""","Which tourist attraction is associated with the photo ""game1""? Return its name.","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id",Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"CREATE TABLE `Royal_Family` (
  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Royal_Family_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Alison"" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Rosalind""",Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT location_name FROM locations WHERE location_name LIKE ""%film%""","Which location names contain the word ""film""?","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk""",Find the details of the shops that can be reached by walk.,"CREATE TABLE `Shops` (
  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Shop_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2",Which tourist attractions are visited at least twice? Give me their names and ids.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM hotels,Find the total number of available hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk""",What are the details of the shops that can be accessed by walk?,"CREATE TABLE `Shops` (
  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Shop_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC",Find the id and star rating of each hotel and sort them in increasing order of price.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT price_range FROM hotels,Tell me the price ranges for all the hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT tourist_details FROM visitors,What is the detail of each visitor?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  other_details FROM staff",Show the names and details of all the staff members.,"CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  ""Vincent""",Find the visit date and details of the tourist whose detail is 'Vincent',"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC","Show the id and star rating of each hotel, ordered by its price from low to high.","CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""US museum""","Tell me the name of the staff in charge of the attraction called ""US museum"".","CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM hotels,How many available hotels are there in total?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""254 Ottilie Junction"" OR t2.how_to_get_there  =  ""bus""",What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk"" OR  t2.how_to_get_there  =  ""bus""",Find the details of all the markets that are accessible by walk or bus.,"CREATE TABLE `Street_Markets` (
  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Market_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  ""Vincent""",Show the tourist attractions visited by the tourist whose detail is 'Vincent'.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2",Show the names and ids of tourist attractions that are visited at least two times.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT address FROM locations WHERE location_name  =  ""UK Gallery""","What is the address of the location ""UK Gallery""?","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""film festival""","What are the names and descriptions of the photos taken at the tourist attraction ""film festival""?","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1",What are the names and ids of the tourist attractions that are visited at most once?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3",Show the details and star ratings of the 3 least expensive hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT visit_date FROM visits,Find all the distinct visit dates.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Alison"" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Rosalind""",What are the names of tourist attraction that Alison visited but Rosalind did not visit?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  ""5"" AND pets_allowed_yn  =  1",Show the average price range of hotels that have 5 star ratings and allow pets.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3,Show the details of the top 3 most expensive hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT location_name FROM locations,Show all distinct location names.,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3,What are the details of the three most expensive hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name FROM tourist_attractions WHERE how_to_get_there  =  ""bus""",What are the names of the tourist attractions that can be accessed by bus?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(DISTINCT name) FROM photos,How many distinct names are associated with all the photos?,"CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""film festival""","Find the names and descriptions of the photos taken at the tourist attraction called ""film festival"".","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there",Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name FROM tourist_attractions WHERE how_to_get_there  =  ""bus""",Which tourist attractions can we get to by bus? Tell me the names of the attractions.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000,Give me the star rating descriptions of the hotels that cost more than 10000.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

CREATE TABLE `Ref_Hotel_Star_Ratings` (
  star_rating_code CHAR(15) PRIMARY KEY,
  star_rating_description VARCHAR(80)
);

"
cre_Theme_park,"SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  ""Vincent""",What are the visit date and details of the visitor whose detail is 'Vincent'?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  ""bus"" OR how_to_get_there  =  ""walk""",Find the names and opening hours of the tourist attractions that we get to by bus or walk.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_details FROM locations WHERE location_name  =  ""UK Gallery""","Return the detail of the location named ""UK Gallery"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  other_details FROM staff",What is the name and detail of each staff member?,"CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1",Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.,"CREATE TABLE `Ref_Attraction_Types` (
  Attraction_Type_Code CHAR(15) PRIMARY KEY,
  Attraction_Type_Description VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id","Show different tourist attractions' names, ids, and the corresponding number of visits.","CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  ""bus"" OR how_to_get_there  =  ""walk""",What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" OR t2.tourist_details  =  ""Vivian""",What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT location_name FROM locations,What are the distinct location names?,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" OR t2.tourist_details  =  ""Vivian""","For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.","CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""660 Shea Crescent"" OR t2.how_to_get_there  =  ""walk""",What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping',What are the names of the tourist attractions that have parking or shopping as their feature details?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attraction_Features` (
  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)
);

CREATE TABLE `Features` (
  Feature_ID INTEGER,
  Feature_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code",Show the average price of hotels for each star rating code.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000,What are the star rating descriptions of the hotels with price above 10000?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

CREATE TABLE `Ref_Hotel_Star_Ratings` (
  star_rating_code CHAR(15) PRIMARY KEY,
  star_rating_description VARCHAR(80)
);

"
cre_Theme_park,"SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id",What are the details and ways to get to tourist attractions related to royal family?,"CREATE TABLE `Royal_Family` (
  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Royal_Family_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT price_range FROM hotels WHERE star_rating_code  =  ""5""",Show the price ranges of hotels with 5 star ratings.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits ),How many tourists did not make any visit?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT price_range FROM hotels WHERE star_rating_code  =  ""5""",What are the price ranges of five star hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  ""5"" AND pets_allowed_yn  =  1",What is the average price range of five star hotels that allow pets?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  ""Vincent""",Which tourist attractions does the visitor with detail 'Vincent' visit?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk"" OR  t2.how_to_get_there  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"CREATE TABLE `Street_Markets` (
  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Market_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT tourist_details FROM visitors,Show details of all visitors.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  ""game1""","What is the name of the tourist attraction that is associated with the photo ""game1""?","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1",Show the names and ids of tourist attractions that are visited at most once.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits ),Count the number of tourists who did not visit any place.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT other_details FROM locations WHERE location_name  =  ""UK Gallery""",What is the detail of the location UK Gallery?,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there","List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.","CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
wrestler,"SELECT team FROM elimination WHERE eliminated_by  =  ""Orton"" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  ""Benjamin""",What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id",Give the names of wrestlers and their elimination moves.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT DISTINCT reign FROM wrestler WHERE location != ""Tokyo , Japan""","What are the distinct reigns of wrestlers whose location is not ""Tokyo,Japan"" ?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common reigns of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT elimination_move FROM elimination WHERE team  =  ""team Orton""","What are the elimination moves of wrestlers whose team is ""Team Orton""?","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50,Show times of elimination of wrestlers with days held more than 50.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT elimination_move FROM elimination WHERE team  =  ""team Orton""",Return the elimination movies of wrestlers on Team Orton.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id",What are the names of wrestlers and the elimination moves?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3,Show teams that have suffered more than three eliminations.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination),What are the names of wrestlers who have never been eliminated?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT time FROM elimination WHERE eliminated_by  =  ""Punk"" OR eliminated_by  =  ""Orton""","Show the times of elimination by ""Punk"" or ""Orton"".","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(*) FROM wrestler,Count the number of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1,What is the name of the wrestler with the fewest days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC",List the names of wrestlers and the teams in elimination in descending order of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1,List the time of elimination of the wrestlers with largest days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT time FROM elimination WHERE eliminated_by  =  ""Punk"" OR eliminated_by  =  ""Orton""",What are the times of elimination for any instances in which the elimination was done by Punk or Orton?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(DISTINCT team) FROM elimination,How many different teams have had eliminated wrestlers?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT team FROM elimination WHERE eliminated_by  =  ""Orton"" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  ""Benjamin""","Show the teams that have both wrestlers eliminated by ""Orton"" and wrestlers eliminated by ""Benjamin"".","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held DESC,"What are the names of the wrestlers, ordered descending by days held?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT reign ,  days_held FROM wrestler",What are the reigns and days held of all wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1,What is the time of elimination for the wrestler with the most days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1,Which reign is the most common among wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1,Return the name of the wrestler who had the lowest number of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT reign ,  days_held FROM wrestler",Show the reign and days held of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE days_held  <  100,What are the names of wrestlers days held less than 100?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50,What are the times of elimination for wrestlers with over 50 days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT team ,  COUNT(*) FROM elimination GROUP BY team",Show different teams in eliminations and the number of eliminations from each team.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held DESC,List the names of wrestlers in descending order of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT DISTINCT reign FROM wrestler WHERE location != ""Tokyo , Japan""","Give the different reigns of wrestlers who are not located in Tokyo, Japan.","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT name ,  location FROM wrestler",What are the names and location of the wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT name ,  location FROM wrestler",Give the names and locations of all wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2,Which locations are shared by more than two wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination),List the names of wrestlers that have not been eliminated.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT team ,  COUNT(*) FROM elimination GROUP BY team",How many eliminations did each team have?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE days_held  <  100,Return the names of wrestlers with fewer than 100 days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC","What are the names of wrestlers and their teams in elimination, ordered descending by days held?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
yelp,"SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  ""April"" GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.text) DESC LIMIT 1;",Find the business with the most number of reviews in April,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Adrienne"";",How many reviews has Adrienne written ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";",Find all breweries in Los Angeles,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,SELECT AVG(rating) FROM review WHERE year  =  2014;,What is the average rating of reviews written in year 2014 ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t3.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  ""Pet Groomers"";",Find all the reviews for all Pet Groomers with more than 100 reviews,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Pennsylvania"" AND t2.category_name  =  ""restaurant"";",find all the restaurant in Pennsylvania,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  ""Texas"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"";",Give me all the Moroccan restaurant in Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT review_count FROM business WHERE name  =  ""Acacia Cafe"";","How many reviews does "" Acacia Cafe "" have ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;,Find all reviews for businesses rated 2.5,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT SUM(t1.likes) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Niloofar"";",What is the total likes on tips from Niloofar,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" GROUP BY t1.neighbourhood_name ORDER BY COUNT(DISTINCT t2.name) DESC LIMIT 1;",which neighbourhood has the most number of businesses in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN tip as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""Pet Groomers"";",Find the users who have given tips on Pet Groomers,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.name FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN category as t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t3.category_name  =  ""Italian"" AND t4.category_name  =  ""restaurant"" AND t2.neighbourhood_name  =  ""Meadowood"";",Find all Italian restaurant in the Meadowood neighbourhood of Madison,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT COUNT(DISTINCT text) FROM tip WHERE year  =  2015;,How many tips have been written in 2015,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.category_name) DESC LIMIT 1;,Find the business which has the most number of categories,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"" AND t4.day  =  ""Friday"";","find the total checkins in Moroccan restaurant in "" Los Angeles "" on Friday","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";","What is the number of escape games in "" Madison "" ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Taj Mahal"" AND t2.category_name  =  ""restaurant"";","find all cities which has a "" Taj Mahal "" restaurant","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Michelle"";",Return me the number of tips that are written by Michelle .,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT name) FROM user WHERE name  =  ""Michelle"";",Find the number of users called Michelle,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  ""Michelle"";",How many businesses has Michelle reviewed in 2010 ?,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""MGM Grand Buffet"" AND t2.category_name  =  ""category_category_name0"";","Find all cities in which there is a restaurant called "" MGM Grand Buffet ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,SELECT t1.name FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM(t2.count) DESC LIMIT 1;,which business has the most number of checkins,"CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT SUM(t3.count) FROM checkin as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  ""Brighton Heights"";","Find the total checkins in "" Brighton Heights "" neighbourhood","CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";",Find all restaurant Seafood in Los Angeles,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  ""April"" AND t2.name  =  ""Michelle"";",How many tips has Michelle written in April,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" AND t2.rating  <  2.5 AND t3.category_name  =  ""Italian"" AND t4.category_name  =  ""restaurant"";",List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT city FROM business WHERE rating  <  1.5;,Find the cities of businesses rated below 1.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";","What are all the breweries in "" Los Angeles "" ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Texas"";","Find all tips for "" Cafe Zinho "" in Texas .","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""restaurant"" AND t4.name  =  ""Patrick"";","Find all restaurant reviewed by Patrick in "" Dallas ""","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM neighbourhood as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.neighbourhood_name  =  ""Stone Meadows"";","How many businesses are there in the "" Stone Meadows "" neighbourhood in Madison ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""Irish Pub"";",How many users have reviewed Irish Pub in Dallas ?,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",find the number of escape games in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",How many escape games exist in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT city) FROM business WHERE name  =  ""Panda Express"";","Return me the number of cities that has "" Panda Express "" .","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""restaurant"";",List all users who reviewed businesses that are restaurant .,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT state FROM business WHERE name  =  ""Whataburger"";",Find all states in which there is a Whataburger,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.state  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  ""Italian"" AND t3.category_name  =  ""Delis"" AND t4.day  =  ""Sunday"" GROUP BY t1.state;",find the total checkins in Italian Delis in each state on Sunday,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  ""Michelle"";",Return me the number of tips that are written by Michelle in 2010 .,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t2.count FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t2.day  =  ""Friday"";","What is the number of checkins for "" Cafe Zinho "" on Friday","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT user_id FROM user WHERE name  =  ""Michelle"";",List all user ids with name Michelle,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.text) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","find the number of reviews written for "" Cafe Zinho "" restaurant in Texas","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Target"";","How many Target are there in "" Los Angeles "" ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""Bars"" AND t4.name  =  ""Patrick"";",Find all Bars reviewed by Patrick,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  ""restaurant"";",find the number of restaurant rated more than 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";","Find all breweries in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.text) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id JOIN review as t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  ""South Summerlin"";","Find the number of reviews on businesses located in "" South Summerlin "" neighbourhood","CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT text)  ,  month FROM tip GROUP BY month;",Find the number of tips written in each month,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  ""Niloofar"";",How many reviews has Niloofar written in 2015,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,SELECT name FROM business WHERE rating  >  4.5;,List all the businesses with more than 4.5 stars,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Mexican"" AND t3.category_name  =  ""restaurant"";",Find all Mexican restaurant in Dallas with at least 3.5 stars,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  ""restaurant"";",List all the restaurant rated more than 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT city FROM business WHERE name  =  ""Taj Mahal"";","Find all cities which has a "" Taj Mahal "" .","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""Dallas"";",Find all users who have written tips about businesses in Dallas,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  ""Patrick"";",Find all reviews by Patrick with a rating above 4,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Bars"";",How many Bars in Dallas have a rating above 3.5 ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT full_address FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Walmart"";","List the addresses of all Walmart in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT business_id FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Apple Store"";","Find all Apple Store in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  ""Flat Top Grill"" AND t3.category_name  =  ""category_category_name0"";","What neighbourhood is restaurant "" Flat Top Grill "" in ?","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Mexican"" AND t3.category_name  =  ""restaurant"";",Find all Mexican restaurant in Dallas with a rating above 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  ""Niloofar"";",list all the businesses which have a review by Niloofar,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t4.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN review as t4 ON t4.business_id  =  t1.business_id JOIN user as t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  ""Italian"" AND t3.category_name  =  ""category_category_name1"" AND t5.name  =  ""Michelle"";",List all the reviews by Michelle for Italian restaurant,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  ""restaurant"";",Return me the number of businesses that are restaurant .,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  ""Italian"" AND t3.category_name  =  ""restaurant"";",List all 5 star Italian restaurant,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  ""Bars"";","Find all Bars in "" Los Angeles "" with at least 30 reviews and average rating above 3 stars","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT AVG(t3.count)  ,  t3.day FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN checkin as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  ""Barrio Cafe"" AND t2.category_name  =  ""restaurant"" GROUP BY t3.day;","Find the average number of checkins in restaurant "" Barrio Cafe "" per day","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT name FROM business WHERE rating  =  3.5;,List all businesses with rating 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";",what is the number of restaurant in Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Edinburgh"" AND t2.category_name  =  ""restaurant"" AND t3.category_name  =  ""Egyptian"";",How many Egyptian restaurant are there in Edinburgh ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Pittsburgh"" AND t1.rating  =  4.5 AND t2.category_name  =  ""restaurant"";",What is the number of restaurant in Pittsburgh rated 4.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Pennsylvania"" AND t2.year  =  2010;","List all tips for "" Cafe Zinho "" in Pennsylvania in 2010 .","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t3.category_name  =  ""restaurant"" AND t2.neighbourhood_name  =  ""Hazelwood"";",How many restaurant are there in the Hazelwood district of Dallas ?,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",What is the number of escape games in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t4.day  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"" GROUP BY t4.day;","find the total checkins in Moroccan restaurant in "" Los Angeles "" per day","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT t2.text FROM user as t3 JOIN review as t1 ON t3.user_id  =  t1.user_id JOIN tip as t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;,Find all the tips from a user who has written a review in 2012,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  ""Bistro Di Napoli"" AND t2.year  =  2015;","How many people reviewed "" Bistro Di Napoli "" in 2015 ?","CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  ""Dallas"" AND name  =  ""Starbucks"" AND state  =  ""Texas"";",How many Starbucks are there in Dallas Texas ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Vintner Grill"" AND t2.likes  >  9;","Find all tips about "" Vintner Grill "" that received more than 9 likes","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""MGM Grand Buffet"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","Find all cities in Texas in which there is a restaurant called "" MGM Grand Buffet ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.neighbourhood_name) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" AND t2.rating  =  5;",How many neighbourhoods have a business with rating 5 in Madison ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

"
yelp,SELECT text FROM review WHERE rating  <  1;,List all the reviews which rated a business less than 1,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  ""Bars"" AND t4.name  =  ""Patrick"";",Find all Bars reviewed by Patrick with at least 3 stars,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""San Diego"" AND t2.year  =  2010 AND t3.name  =  ""Christine"";","How many businesses in "" San Diego "" has Christine reviewed in 2010 ?","CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""Pittsburgh"" AND t1.name  =  ""Sushi Too"";","how many users reviewed "" Sushi Too "" in Pittsburgh","CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""Valet Service"" AND t3.category_name  =  ""restaurant"";",Find all restaurant with Valet Service in Dallas Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,SELECT t2.name FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG(t1.rating)  <  3;,Find users whose average review rating is below 3,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""restaurant"" AND t3.category_name  =  ""Moroccan"";","find the total checkins in Moroccan restaurant in "" Los Angeles ""","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  ""Barrio Cafe"" AND t2.year  =  2015;","Find all users who have written tips for "" Barrio Cafe "" in 2015","CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT name FROM business WHERE rating  <  2 AND state  =  ""Texas"";",Find all businesses in Texas with a rating below 2,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"";","What is the total likes on tips about "" Cafe Zinho ""","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";","Find all restaurant that serve Seafood in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""restaurant"" AND t3.year  =  2010;",List all users who reviewed businesses that are restaurant in 2010 .,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Niloofar"";",list all the reviews by Niloofar,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t1.name  =  ""Texas de Brazil"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","How many people reviewed the restaurant "" Texas de Brazil "" in Dallas Texas ?","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Bars"";","How many Bars in "" Dallas "" have a rating above 3.5 ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""restaurant"" AND t4.name  =  ""Patrick"";",Which restaurant in Dallas were reviewed by user Patrick ?,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Pennsylvania"" AND t2.category_name  =  ""restaurant"";",List all businesses that are restaurant in Pennsylvania .,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";","List all the Seafood restaurant in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT text) FROM review WHERE month  =  ""March"";",Find the total number of reviews written in March,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
behavior_monitoring,"SELECT t1.detention_type_code ,  t2.detention_type_description FROM detention as t1 JOIN Ref_detention_Type as t2 ON t1.detention_type_code  =  t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT(*) asC LIMIT 1",What are the code and description of the least frequent detention type ?,"CREATE TABLE `Ref_Detention_Type` (
  detention_type_code VARCHAR(10) PRIMARY KEY,
  detention_type_description VARCHAR(80)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT first_name FROM teachers WHERE email_address LIKE '%man%',"Find the first names of teachers whose email address contains the word ""man"".","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.zip_postcode FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t2.first_name  =  ""Lyla""","What is the zip code of the address where the teacher with first name ""Lyla"" lives?","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.address_id ,  t1.city FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",Find the id and city of the student address with the highest average monthly rental.,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.first_name FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",What are the id and first name of the student whose addresses have the highest average monthly rental?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT DISTINCT detention_type_code FROM detention,Return all distinct detention type codes.,"CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT email_address FROM students WHERE first_name  =  ""Emma"" AND last_name  =  ""Rohan""","What is the email of the student with first name ""Emma"" and last name ""Rohan""?","CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.monthly_rental FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  ""Texas""",What are the monthly rentals of student addresses in Texas state?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT t1.line_1 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id INTERSECT SELECT t1.line_1 FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id,What are the line 1 of addresses shared by some students and some teachers?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.date_of_notes FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.first_name  =  ""Fanny""","Find the dates of assessment notes for students with first name ""Fanny"".","CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.first_name FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and first name of the student that has the most number of assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.teacher_id ,  t2.first_name FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3",Find the ids and first names of the 3 teachers that have the most number of assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT t2.cell_mobile_number FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id ORDER BY t1.monthly_rental asC LIMIT 1,What is the cell phone number of the student whose address has the lowest monthly rental?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(*) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident ),How many students are not involved in any behavior incident?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.email_address FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t1.zip_postcode  =  ""918""","What are the email addresses of teachers whose address has zip code ""918""?","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT first_name ,  last_name FROM teachers ORDER BY last_name",Find the first names and last names of teachers in alphabetical order of last name.,"CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers as t1 JOIN detention as t2 ON t1.teacher_id  =  t2.teacher_id,Find the last names of teachers who are not involved in any detention.,"CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT detention_summary FROM detention,Return all detention summaries.,"CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT * FROM assessment_notes ORDER BY date_of_notes ASC,List all information about the assessment notes sorted by date in ascending order.,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.line_1 ,  AVG(t2.monthly_rental) FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id",What are the line 1 and average monthly rentals of all student addresses?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.last_name FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and last name of the student that has the most behavior incidents?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT * FROM student_addresses ORDER BY monthly_rental DESC,"Find all information about student addresses, and sort by monthly rental in descending order.","CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.incident_type_code ,  t2.incident_type_description FROM behavior_incident as t1 JOIN ref_incident_type as t2 ON t1.incident_type_code  =  t2.incident_type_code GROUP BY t1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1",What are the code and description of the most frequent behavior incident type?,"CREATE TABLE `Ref_Incident_Type` (
  incident_type_code VARCHAR(10) PRIMARY KEY,
  incident_type_description VARCHAR(80)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.text_of_notes FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  ""Schuster""","Find the texts of assessment notes for teachers with last name ""Schuster"".","CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT city FROM addresses ORDER BY city,List all cities of addresses in alphabetical order.,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,SELECT date_of_notes FROM assessment_notes,What are the dates of the assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.teacher_id ,  t2.last_name FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t1.detention_type_code  =  ""AFTER"" GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1","Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(*) FROM assessment_notes,How many assessment notes are there in total?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT cell_mobile_number ,  email_address FROM students",Return the cell phone number and email address for all students.,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT incident_type_description FROM ref_incident_type WHERE incident_type_code  =  ""VIOLENCE""","What is the incident type description for the incident type with code ""VIOLENCE""?","CREATE TABLE `Ref_Incident_Type` (
  incident_type_code VARCHAR(10) PRIMARY KEY,
  incident_type_description VARCHAR(80)
);

"
behavior_monitoring,"SELECT COUNT(*) FROM addresses WHERE zip_postcode  =  ""197""",How many addresses have zip code 197?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.datetime_detention_start ,  datetime_detention_end FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  ""Schultz""","Find the start and end dates of detentions of teachers with last name ""Schultz"".","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(DISTINCT incident_type_code) FROM behavior_incident,How many distinct incident type codes are there?,"CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.first_name ,  t2.last_name FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  ""Wisconsin""",What are the first names and last names of students with address in Wisconsin state?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.date_incident_start ,  date_incident_end FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.last_name  =  ""Fahey""","Find the start and end dates of behavior incidents of students with last name ""Fahey"".","CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.address_id ,  t1.zip_postcode FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id ORDER BY monthly_rental DESC LIMIT 1",What are the id and zip code of the address with the highest monthly rental?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
film_rank,"SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id",Please list the countries and years of film market estimations.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China')",Return the titles and directors of films that were never in the market of China.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1,What is the title of the film that has the highest high market estimation.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995,Who are the different directors of films which had market estimation in 1995?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT COUNT(*) FROM film,Count the number of films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  ""Japan"" ORDER BY t1.year DESC","What are the years of film market estimation for the market of Japan, ordered by year descending?","CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT country FROM market ORDER BY number_cities DESC,What are the countries for each market ordered by decreasing number of cities?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id",What are the titles of films and corresponding types of market estimations?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000,List the studios which average gross is above 4500000.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id",What are the countries of markets and their corresponding years of market estimation?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT MAX(number_cities) ,  MIN(number_cities) FROM market",Return the maximum and minimum number of cities across all markets.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT type FROM film_market_estimation WHERE year  =  1995,Return the types of film market estimations in 1995.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT country FROM market ORDER BY country ASC,"What are the countries for each market, ordered alphabetically?","CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation),What are the titles of films that do not have a film market estimation?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT title ,  studio FROM film WHERE studio LIKE ""%Universal%""","What are the titles and studios of films that have been produced by a studio whose name contains ""Universal""?","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1,What is the name of teh studio that created the most films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT COUNT(*) FROM market WHERE number_cities  <  300,How many markets have number of cities smaller than 300?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT COUNT(*) FROM market WHERE number_cities  <  300,Count the number of markets that have a number of cities lower than 300.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT title ,  studio FROM film WHERE studio LIKE ""%Universal%""","Find the titles and studios of the films that are produced by some film studios that contained the word ""Universal"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China')",What are the titles and directors of the films were never presented in China?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT studio FROM film WHERE director  =  ""Nicholas Meyer"" INTERSECT SELECT studio FROM film WHERE director  =  ""Walter Hill""","Show the studios that have produced films with director ""Nicholas Meyer"" and ""Walter Hill"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT type FROM film_market_estimation WHERE year  =  1995,What are the types of film market estimations in year 1995?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT MAX(number_cities) ,  MIN(number_cities) FROM market",What are the maximum and minimum number of cities in all markets.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  ""Walter Hill""","Show the studios that have not produced films with director ""Walter Hill"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT country FROM market ORDER BY number_cities DESC,List all countries of markets in descending order of number of cities.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT country FROM market ORDER BY country ASC,List all countries of markets in ascending alphabetical order.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio ,  COUNT(*) FROM film GROUP BY studio",How films are produced by each studio?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000,Give the average number of cities within markets that had a low market estimation larger than 10000?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1,List the name of film studio that have the most number of films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000,Which studios have an average gross of over 4500000?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT director FROM film,What are the different film Directors?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id",Please show the titles of films and the types of market estimations.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT low_estimate ,  high_estimate FROM film_market_estimation",What are the low and high estimates of film markets?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000,What is the average number of cities of markets with low film market estimate bigger than 10000?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  ""Japan"" ORDER BY t1.year DESC","Please list the years of film market estimations when the market is in country ""Japan"" in descending order.","CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT COUNT(*) FROM film,How many film are there?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation),List the title of films that do not have any market estimation.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1,Return the title of the film with the highest high estimate?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995,Show the distinct director of films with market estimation in the year of 1995.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT director FROM film,List the distinct director of all films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2,What are the names of studios that have made two or more films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT studio ,  COUNT(*) FROM film GROUP BY studio",List the studios of each film and the number of films produced by that studio.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2,List the names of studios that have at least two films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT AVG(gross_in_dollar) FROM film,What is the average ticket sales gross in dollars of films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
product_catalog,SELECT COUNT(*) FROM catalog_contents,How many products are there in the records?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT COUNT(*) FROM catalog_contents,Find the total number of catalog contents.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  ""8""",Find the names of catalog entries with level number 8.,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  ""8""",What are the names of catalog entries with level number 8?,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",Find the names and publication dates of all catalogs that have catalog level number greater than 5.,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,What is the level name of the cheapest catalog (in USD)?,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8,What are the catalog entry names of the products with next entry ID above 8?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700",Find the name and capacity of products with price greater than 700 (in USD).,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8,Name all the products with next entry ID greater than 8.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3,What are the attribute data types with more than 3 attribute definitions?,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1,Find the dates on which more than one revisions were made.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,Which catalog content has the highest height? Give me the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,What is the product with the highest height? Give me the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT DISTINCT(catalog_entry_name) FROM catalog_contents,Find the names of all the catalog entries.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5,Which catalog contents have length below 3 or above 5? Find the catalog entry names.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents",Give me the average and minimum price (in Euro) of the products.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,Which catalog content has the smallest capacity? Return the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","Find the names of all the products whose stock number starts with ""2"".","CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",What are the name and publication date of the catalogs with catalog level number above 5?,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","Which catalog contents have a product stock number that starts from ""2""? Show the catalog entry names.","CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,What is the entry name of the most expensive catalog (in USD)?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1,On which days more than one revisions were made on catalogs.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,"SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",Find the name and attribute ID of the attribute definitions with attribute value 0.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

"
product_catalog,"SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents",What are the average and minimum price (in Euro) of all products?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%""","Which catalog publishers have substring ""Murray"" in their names?","CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,Find the name of the product that has the smallest capacity.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,Find the level name of the catalog with the lowest price (in USD).,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  ""Green""","What is the attribute data type of the attribute with name ""Green""?","CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1),Find the entry names of the catalog with the attribute that have the most entries.,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700",Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,Which catalog publisher has published the most catalogs?,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5,Find the names of the products with length smaller than 3 or height greater than 5.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10",Find the name and level of catalog structure with level between 5 and 10.,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT DISTINCT(catalog_entry_name) FROM catalog_contents,What are all the catalog entry names?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  ""Green""","Find the attribute data type for the attribute named ""Green"".","CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,Find the catalog publisher that has the most catalogs.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
flight_4,SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),How many routes go from the United States to Canada?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT AVG(elevation) ,  country FROM airports GROUP BY country","For each country, what is the average elevation of that country's airports?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'","What is the name, city, country, and elevation for every airport in the city of New York?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE city  =  'Goroka',Find the name of the airport in the city of Goroka.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy',Find the number of routes with destination airports in Italy.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE name LIKE 'Orbit%',Find the country of the airlines whose name starts with 'Orbit'.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airlines,What is the total number of airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina',Find the name of the airports located in Cuba or Argentina.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*),List the cities which have more than 2 airports sorted by the number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'","Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the busiest source airport that runs most number of routes in China.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC",List all countries and their number of airlines in the descending order of number of airlines.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airlines WHERE country  =  'Russia',How many airlines does Russia has?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,Which country is the airport that has the highest altitude located in?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',Find the number of different airports which are the destinations of the American Airlines.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC","Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland',What is the highest elevation of an airport in the country of Iceland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airport that is the destination of the most number of routes that start in China?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),Find the id of routes whose source and destination airports are in the United States.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3,Return the cities with more than 3 airports in the United States.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airport with the most number of routes that start in China?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2,Find the cities which have exactly two airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3),What is the count of cities with more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC",How many airports are there per city in the United States? Order the cities by decreasing number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name","For each airport name, how many routes start at that airport?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT AVG(elevation) ,  country FROM airports GROUP BY country",Find the average elevation of all airports for each country.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC",How many airports are there per city in the US ordered from most to least?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada',Find the number of routes whose destination airports are in Canada.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1",Find the name and city of the airport which is the source for the most number of flight routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,Which countries has the most number of airlines whose active status is 'Y'?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2,What are the cities with exactly two airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE name LIKE 'Orbit%',What are the countries of all airlines whose names start with Orbit?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1",What is the name and city of the airport that the most routes end at?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1",What is the name and city of the airport from most of the routes start?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airline with the most routes?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airports WHERE name LIKE '%International%',Find the number of airports whose name contain the word 'International'.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10","For the airline ids with the top 10 most routes operated, what are their names?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name",Find the number of routes for each source airport and the airport name.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the busiest destination airport that runs most number of routes in China.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1","What is the name, city, and country of the airport with the highest elevation?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1",List the cities which have more than one airport and number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport',What is the number of routes that end at John F Kennedy International Airport?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC","For each  airport name, how many routes start at that airport, ordered from most to least?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,What are the countries with the most airlines whose active status is Y?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name",What is the total number of routes for each country and airline in that country?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1",Find the name and city of the airport which is the destination of the most number of routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines',What is the number of routes operated by the airline American Airlines whose destinations are in Italy?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*),What are the cities that have more than 2 airports sorted by number of airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3,What is the number of cities in the United States with more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),What is the id of the routes whose source and destination airports are in the United States?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1","Find the name, city, and country of the airport that has the highest latitude.","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1",What are the names of all cities with more than one airport and how many airports do they have?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina',What are the names of all airports in Cuba or Argentina?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,What are the names of all airports whose elevation is between -50 and 50?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport',Find the number of routes that have destination John F Kennedy International Airport.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland',What is the maximum elevation of all airports in the country of Iceland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada',How many routes end in a Canadian airport?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name","For each country and airline name, how many routes are there?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),Find the number of routes from the United States to Canada.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy',What is the number of routes whose destinations are Italian airports?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',Find the number of routes operated by American Airlines.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,Which countries has the most number of airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,What is the country of the airport with the highest elevation?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC",How many airlines operate out of each country in descending order?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',What is the number of different different airports that are destinations for American Airlines?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3),How many cities are there that have more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports WHERE name LIKE '%International%',How many airports' names have the word Interanation in them?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the country with the most number of home airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland',How many different cities do have some airport in the country of Greenland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the name of airline which runs the most number of routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines',Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE city  =  'Goroka',What are the names of the airports in the city of Goroka?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,Find the name of airports whose altitude is between -50 and 50.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',How many routes does American Airlines operate?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
game_injury,SELECT COUNT(DISTINCT source) FROM injury_accident,How many different kinds of information sources are there for injury accidents?,"CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT season ,  home_team ,  away_team FROM game","List the season, home team, away team of all the games.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

"
game_injury,SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Walter Samuel' INTERSECT SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Thiago Motta',List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and name of the stadium where the largest number of injury accidents occurred.,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,SELECT t1.season FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id WHERE t2.player  =  'Walter Samuel',What is the season of the game which causes the player 'Walter Samuel' to get injured?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT t2.name ,  t2.average_attendance ,  t2.total_attendance FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id","Show the name, average attendance, total attendance for stadiums where no accidents happened.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT MAX(home_games) ,  MIN(home_games) ,  AVG(home_games) FROM stadium","What are the maximum, minimum and average home games each stadium held?","CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,SELECT COUNT(*) FROM game WHERE season  >  2007,How many games are held after season 2007?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

"
game_injury,SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100,What is the average attendance of stadiums with capacity percentage higher than 100%?,"CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What are the id and name of the stadium where the most injury accidents happened?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT t1.season ,  t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.injury  =  'Foot injury' OR t3.injury  =  'Knee problem'",In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT t1.id ,  t1.score ,  t1.date FROM game as t1 JOIN injury_accident as t2 ON t2.game_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2","What are the ids, scores, and dates of the games which caused at least two injury accidents?","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.date ,  t2.player FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id ORDER BY t1.season DESC","For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,SELECT COUNT(DISTINCT t1.injury) FROM injury_accident as t1 JOIN game as t2 ON t1.game_id  =  t2.id WHERE t2.season  >  2010,How many distinct kinds of injuries happened after season 2010?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT player ,  number_of_matches ,  source FROM injury_accident WHERE injury != 'Knee problem'","What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.id ,  COUNT(*) FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id GROUP BY t1.id",How many games has each stadium held?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT name FROM stadium WHERE name LIKE ""%Bank%""","Which stadium name contains the substring ""Bank""?","CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,SELECT COUNT(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ),How many games are free of injury accidents?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
hospital_1,"SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1",what are name and phone number of patients who had more than one appointment?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,Which physicians have never taken any appointment? Find their names.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X',Find the names of patients who are not using the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1,Find the name of the nurse who has the largest number of appointments.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What procedures cost less than 5000 and have John Wen as a trained physician?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,Find the patient who has the most recent undergoing treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

"
hospital_1,SELECT COUNT(patient) FROM stay WHERE room  =  112,How many patients stay in room 112?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,SELECT name FROM physician WHERE position LIKE '%senior%',Find the name of physicians whose position title contains the word 'senior'.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What is the average cost of procedures that physician John Wen was trained in?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0,What are the unique block codes that have available rooms?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT DISTINCT name FROM medication ORDER BY name,What is the alphabetically ordered list of all distinct medications?,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1,Find the name of the patient who made the appointment with the most recent start date.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry',Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry',Find the name of physicians who are affiliated with Surgery or Psychiatry department.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000,Find the physicians who are trained in a procedure that costs more than 5000.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1,Which physician was trained in the procedure that costs the most.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1,Find the physician who prescribed the highest dose. What is his or her name?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111,Find the name of medication used on the patient who stays in room 111?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X',What are the names of patients who are not taking the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,"SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1",Find the names of all physicians and their primary affiliated departments' names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1",Which patients made more than one appointment? Tell me the name and phone number of these patients.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,List the name of physicians who took some appointment.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0,Tell me the distinct block codes where some rooms are available.,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT DISTINCT name FROM nurse ORDER BY name,List the names of all distinct nurses ordered by alphabetical order?,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What are the procedures that cost more than 1000 or are specialized in by physician John Wen?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT COUNT(*) FROM appointment,Count how many appointments have been made in total.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse,What are the distinct names of nurses on call?,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn,List the names of patients who have made appointments.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,"SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  ""Thesisin""",What is the names of the physicians who prescribe medication Thesisin?,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,"SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Find the names of procedures which physician John Wen was trained in.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry',Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1,List the names of departments where some physicians are primarily affiliated with.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid",Return the name of each physician and the number of patients he or she treats.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111,What is the name of the medication used for the patient staying in room 111?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,What are the names of all the physicians who took appointments.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",What are each physician's employee id and department id primarily affiliated.,"CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111,What are the names of patients who are staying in room 111 and have an undergoing treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,SELECT COUNT(*) FROM appointment,How many appointments are there?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the nurse has the most appointments?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT name FROM nurse ORDER BY name,What is the alphabetically ordered list of all the distinct names of nurses?,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1,Find the name of physicians who are in charge of more than one patient.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",List the physicians' employee ids together with their primary affiliation departments' ids.,"CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,"SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;",what is the name and position of the head whose department has least number of employees?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand",Find the number of medications prescribed for each brand.,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT COUNT(DISTINCT roomtype) FROM room,How many different types of rooms are there?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,"SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What are the names of procedures physician John Wen was trained in?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid",How many patients do each physician take care of? List their names and number of patients they take care of.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand",How many medications are prescribed for each brand?,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  ""X""",Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;,Tell me the employee id of the head of the department with the least employees.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn,What are names of patients who made an appointment?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,Find the patient who most recently stayed in room 111.,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' ),How many patients are not using Procrastin-X as medication?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor",Find the number of rooms located on each block floor.,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111,Find the names of all patients who have an undergoing treatment and are staying in room 111.,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor",How many rooms does each block floor have?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

"
hospital_1,SELECT COUNT(DISTINCT roomtype) FROM room,Find the number of distinct room types available.,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,Which patient is undergoing the most recent treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

"
hospital_1,SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,List the name of physicians who never took any appointment.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid,Find the names of nurses who are nursing an undergoing treatment.,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""","Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?","CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1,Find the physician who was trained in the most expensive procedure?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1,What are the names of departments that have primarily affiliated physicians.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,"SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  ""Thesisin""",List the names of all the physicians who prescribe Thesisin as medication.,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT name FROM procedures ORDER BY cost LIMIT 3,What are the three most costly procedures?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;",Find the name and position of the head of the department with the least employees.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1",What are the name and primarily affiliated department name of each physician?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1,What is the id of the appointment that started most recently?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  ""X""",Find the name and position of physicians who prescribe some medication whose brand is X?,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,What nurses are on call with block floor 1 and block code 1? Tell me their names.,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

"
hospital_1,"SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = ""John Dorian""",How many patients' prescriptions are made by physician John Dorian?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,Find the ids of the nurses who are on call in block floor 1 and block code 1.,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

"
hospital_1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","Tell me the highest, lowest, and average cost of procedures.","CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' ),Find the number of patients who are not using the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","What are the highest cost, lowest cost and average cost of procedures?","CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT name ,  cost FROM procedures ORDER BY cost DESC",List the name and cost of all procedures sorted by the cost from the highest to the lowest.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT name FROM physician WHERE position LIKE '%senior%',What are the names of the physicians who have 'senior' in their titles.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT COUNT(patient) FROM stay WHERE room  =  112,Count the number of patients who stayed in room 112.,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode",Find the number of rooms for different block code?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

"
hospital_1,SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1,What is the name of the patient who made the most recent appointment?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,"SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Compute the mean price of procedures physician John Wen was trained in.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode",How many rooms are located for each block code?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid,Which nurses are in charge of patients undergoing treatments?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;,What is the employee id of the head whose department has the least number of employees?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT DISTINCT name FROM medication ORDER BY name,"List the names of all distinct medications, ordered in an alphabetical order.","CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry',Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = ""John Dorian""",Find the number of patients' prescriptions physician John Dorian made.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT name FROM procedures ORDER BY cost LIMIT 3,Find the three most expensive procedures.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000,Which physicians are trained in procedures that are more expensive than 5000?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
company_office,SELECT COUNT(*) FROM companies,Count the number of companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings ORDER BY height DESC,What are the names of buildings sorted in descending order of building height?,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1,Show the names of the buildings that have more than one company offices.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != ""Banking""","Find the maximum and minimum sales of the companies that are not in the ""Banking"" industry.","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT AVG(profits_billion) FROM companies,Compute the average profits companies make.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1,Which building has the largest number of company offices? Give me the building name.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC,Please show the industries of companies in descending order of the number of companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings ORDER BY height DESC,List the names of buildings in descending order of building height.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC,Sort all the industries in descending order of the count of companies in each industry,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2,Which headquarter locations are used by more than 2 companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT COUNT(*) FROM companies WHERE industry  =  ""Banking"" OR industry  =  ""Conglomerate""","How many companies are in either ""Banking"" industry or ""Conglomerate"" industry?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1,List the industry shared by the most companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT stories FROM buildings ORDER BY height DESC LIMIT 1,Find the stories of the building with the largest height.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT name ,  assets_billion FROM companies ORDER BY name ASC","What are the name and assets of each company, sorted in ascending order of company name?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(DISTINCT industry) FROM companies,How many different industries are the companies in?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT COUNT(*) FROM companies WHERE industry  =  ""Banking"" OR industry  =  ""Conglomerate""","Find the number of companies whose industry is ""Banking"" or ""Conglomerate"",","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies WHERE headquarters != 'USA',"What are the names of companies whose headquarters are not ""USA""?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations),Which buildings do not have any company office? Give me the building names.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

"
company_office,"SELECT industry ,  COUNT(*) FROM companies GROUP BY industry",Whah are the name of each industry and the number of companies in that industry?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies ORDER BY market_value_billion DESC,List the names of companies in descending order of market value.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2,Show the headquarters shared by more than two companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != ""Banking""","What are the maximum and minimum sales of the companies whose industries are not ""Banking"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Sales` (
  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  sales_details VARCHAR(255)
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1,Show the name of the building that has the most company offices.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT name ,  assets_billion FROM companies ORDER BY name ASC",List the name and assets of each company in ascending order of company name.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations),List the names of buildings that have no company office.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

"
company_office,"SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id","For each company, return the company name and the name of the building its office is located in.","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT AVG(profits_billion) FROM companies,What are the average profits of companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT name FROM buildings WHERE status  =  ""on-hold"" ORDER BY stories ASC","Find the names of the buildings in ""on-hold"" status, and sort them in ascending order of building stories.","CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT industry ,  COUNT(*) FROM companies GROUP BY industry",Please show each industry and the corresponding number of companies in that industry.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies WHERE headquarters != 'USA',"Find the names of the companies whose headquarters are not located in ""USA"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id",List the name of a building along with the name of a company whose office is in the building.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1,Which industry has the most companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT industry FROM companies WHERE headquarters  =  ""USA"" INTERSECT SELECT industry FROM companies WHERE headquarters  =  ""China""","Show the industries shared by companies whose headquarters are ""USA"" and companies whose headquarters are ""China"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(DISTINCT industry) FROM companies,Count the number of distinct company industries.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(*) FROM companies,How many companies are there?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1,Which buildings have more than one company offices? Give me the building names.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
party_people,SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of party with most number of members?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office","Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?","CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT minister ,  party_name FROM party ORDER BY took_office DESC",Show all ministers and parties they belong to in descending order of the time they took office.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,Show the minister who took office after 1961 or before 1959.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party WHERE party_name != 'Progress Party',Which ministers are not a part of the Progress Party?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",How many events are there for each party?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.event_name  =  ""Annaual Meeting""",Count the number of Annual Meeting events that took place in the region of the United Kingdom.,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2,Which event names were used more than twice for party events?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,Return the minister who left office at the latest time.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1,Which member names are shared among members in the party with the id 3 and the party with the id 1?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != ""Progress Party""",Which member names corresponding to members who are not in the Progress Party?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT COUNT(*) FROM party_events,How many party events do we have?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",Show all party names and the number of members in each party.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT COUNT(*) FROM party_events,Count the number of party events.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1,Return the name of the party with the most members.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of member in charge of greatest number of events?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id",List member names and their party names.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,Which minister left office the latest?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT DISTINCT region_name FROM region ORDER BY label,"What are the different region names, ordered by labels?","CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member),What are the names of parties that have no members?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2,Return the names of parties that have two or more events.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT COUNT(*) FROM region,Count the number of regions.,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,"SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id",What are the names of parties and their respective regions?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,"SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id",Show all party names and their region names.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office","Show the ministers and the time they took and left office, listed by the time they left office.","CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT DISTINCT region_name FROM region ORDER BY label,Show all distinct region names ordered by their labels.,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1,Return the name of the member who is in charge of the most events.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id,Show all member names who are not in charge of any event.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != ""Progress Party""",Show member names that are not in the Progress Party.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2,What are the names of parties with at least 2 events?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",How many members are in each party?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member),Show names of parties that does not have any members.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id",What are the names of members and their corresponding parties?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT COUNT(*) FROM region,How many regions do we have?,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1,Show the member names which are in both the party with id 3 and the party with id 1.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2,find the event names that have more than 2 records.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT COUNT(DISTINCT party_name) FROM party,How many parties do we have?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.event_name  =  ""Annaual Meeting""",How many Annual Meeting events happened in the United Kingdom region?,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT COUNT(DISTINCT party_name) FROM party,Count the number of different parties.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id,What are the names of members who are not in charge of any events?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
browser_web,SELECT COUNT(DISTINCT client) FROM web_client_accelerator,How many different kinds of clients are supported by the web clients accelerators?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT MAX(market_share) ,  MIN(market_share) ,  AVG(market_share) FROM browser","What is the maximum, minimum and average market share of the listed browsers?","CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT name ,  operating_system FROM web_client_accelerator WHERE connection != 'Broadband'",What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT t1.id ,  t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the browser that is compatible with the most web accelerators?,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,SELECT name FROM browser ORDER BY market_share DESC,List the name of browsers in descending order by market share.,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT COUNT(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );,How many accelerators are not compatible with the browsers listed ?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,"SELECT operating_system ,  COUNT(*) FROM web_client_accelerator GROUP BY operating_system",Find the number of web accelerators used for each Operating system.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT name FROM web_client_accelerator WHERE name LIKE ""%Opera%""","Which accelerator name contains substring ""Opera""?","CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT t2.name ,  t3.name FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id ORDER BY t1.compatible_since_year DESC",give me names of all compatible browsers and accelerators in the descending order of compatible year,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,SELECT t1.compatible_since_year FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id WHERE t3.name  =  'CACHEbox' AND t2.name  =  'Internet Explorer',When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT t1.name ,  t1.operating_system FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.name  =  'Opera'",Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'Fasterfox',List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,SELECT COUNT(*) FROM browser WHERE market_share  >=  5,How many main stream browsers whose market share is at least 5 exist?,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",What is the id and market share of the browser Safari?,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT id ,  name ,  market_share FROM browser","List the ids, names and market shares of all browsers.","CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT DISTINCT t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.market_share  >  15;,What distinct accelerator names are compatible with the browswers that have market share higher than 15?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
browser_web,"SELECT t1.id ,  t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2",What are the ids and names of the web accelerators that are compatible with two or more browsers?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

"
tracking_share_transactions,"SELECT t1.sales_details ,  t2.date_of_transaction FROM sales as t1 JOIN transactions as t2 ON t1.sales_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  <  3000",What are the sale details and dates of transactions with amount smaller than 3000?,"CREATE TABLE `Sales` (
  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  sales_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT lot_details ,  investor_id FROM lots",Return the lot details and investor ids.,"CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t2.investor_id FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id HAVING COUNT(*)  >=  2,Show the ids of the investors who have at least two transactions.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",Show the id and details for the investors who have the top 3 number of transactions.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(amount_of_transaction) FROM transactions GROUP BY investor_id",Show the average amount of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT MAX(share_count) FROM transactions WHERE amount_of_transaction  <  10000,Show the maximum share count of transactions where the amount is smaller than 10000,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.investor_details FROM  investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.share_count  >  100,Show details of all investors if they make any transaction with share count greater than 100.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT COUNT(DISTINCT transaction_type_code) FROM transactions,How many distinct transaction types are used in the transactions?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT date_of_transaction FROM transactions WHERE transaction_type_code  =  ""SALE""","Show all dates of transactions whose type code is ""SALE"".","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id",Show the average share count of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON  t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  >  100 AND t3.transaction_type_code  =  ""PUR""","What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is ""PUR""?","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,SELECT t1.purchase_details FROM purchases as t1 JOIN transactions as t2 ON t1.purchase_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  >  10000,What are the purchase details of transactions with amount bigger than 10000?,"CREATE TABLE `Purchases` (
  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  purchase_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT transaction_type_code ,  AVG(amount_of_transaction) FROM transactions GROUP BY transaction_type_code",Show the average transaction amount for different transaction types.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT AVG(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  ""SALE""","Show the average amount of transactions with type code ""SALE"".","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT MIN(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  ""PUR"" AND share_count  >  50","Show the minimum amount of transactions whose type code is ""PUR"" and whose share count is bigger than 50.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  COUNT(*) FROM transactions GROUP BY investor_id",Show the number of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT SUM(share_count) FROM transactions,What is the total share of transactions?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t1.transaction_type_description ,  t2.date_of_transaction FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code WHERE t2.share_count  <  10",Show the transaction type descriptions and dates if the share count is smaller than 10.,"CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id",Show the average amount of transactions for different lots.,"CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT DISTINCT lot_details FROM lots,Show all distinct lot details.,"CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1,Show the transaction type code that occurs the fewest times.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.transaction_type_description FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the description of the transaction type that occurs most frequently.,"CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT date_of_transaction FROM transactions WHERE share_count  >  100 OR amount_of_transaction  >  1000,Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.lot_details FROM investors as t1 JOIN lots as t2 ON  t1.investor_id  =  t2.investor_id WHERE t1.investor_details  =  ""l""","Return the lot details of lots that belong to investors with details ""l""?","CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id ORDER BY AVG(share_count)","Show the average share count of transactions each each investor, ordered by average share count.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the transaction type code that occurs the most frequently.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT COUNT(*) FROM investors,Find the number of investors in total.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.transaction_type_code  =  ""SALE"" GROUP BY t2.investor_id HAVING COUNT(*)  >=  2","Show the ids and details of the investors who have at least two transactions with type code ""SALE"".","CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT MAX(amount_of_transaction) FROM transactions,Show the maximum amount of transaction.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT date_of_transaction FROM transactions WHERE share_count  >=  100 OR amount_of_transaction  >=  100,What are the dates of transactions with at least 100 share count or amount bigger than 100?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",Show the id and details of the investor that has the largest number of transactions.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  <  50,What are the lot details of lots associated with transactions with share count smaller than 50?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,"SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code	  =  ""PUR""","Show the description of transaction type with code ""PUR"".","CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

"
tracking_share_transactions,"SELECT transaction_type_code ,  MAX(share_count) ,  MIN(share_count) FROM transactions GROUP BY transaction_type_code",Show the maximum and minimum share count of different transaction types.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_id FROM transactions WHERE transaction_type_code  =  'PUR',Show all transaction ids with transaction code 'PUR'.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT date_of_transaction ,  share_count FROM transactions",Show all date and share count of transactions.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases,What are the details of all sales and purchases?,"CREATE TABLE `Purchases` (
  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  purchase_details VARCHAR(255)
);

CREATE TABLE `Sales` (
  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  sales_details VARCHAR(255)
);

"
university_basketball,SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),Count the number of universities that do not participate in the baketball match.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  MIN(enrollment) FROM university",Return the total and minimum enrollments across all schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT team_name FROM basketball_match ORDER BY all_home DESC,"What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?","CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT AVG(enrollment) FROM university WHERE founded  <  1850,What are the average enrollment size of the universities that are founded before 1850?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT school ,  location FROM university WHERE affiliation  =  'Public'",List all public schools and their locations.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT school_id) FROM basketball_match,Count the number of schools that have had basketball matches.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",Return the name of the team and the acc during the regular season for the school that was founded the earliest.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded",List all schools and their nicknames in the order of founded year.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT school_id) FROM basketball_match,How many schools are in the basketball match?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,Return the founded year for the school with the largest enrollment.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",What are the all games score and location of the school called Clemson?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT AVG(enrollment) FROM university WHERE founded  <  1850,Return the average enrollment of universities founded before 1850.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,Return the primary conference of the school with the lowest acc percentage score.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,What is the primary conference of the school that has the lowest acc percent score in the competition?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public',Find the schools that were either founded after 1850 or public.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university),What are the names of teams from universities that have a below average enrollment?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT * FROM basketball_match,List all information regarding the basketball match.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university),Find the team names of the universities whose enrollments are smaller than the average enrollment size.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",Find the location and all games score of the school that has Clemson as its team name.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded","What are the different schools and their nicknames, ordered by their founding years?","CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",Show the enrollment and primary_conference of the oldest college.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,Return the highest acc percent across all basketball matches.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,What is the highest acc percent score in the competition?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT school ,  location FROM university WHERE affiliation  =  'Public'",What are the public schools and what are their locations?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT MAX(enrollment) FROM university,Return the maximum enrollment across all schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) FROM university WHERE location LIKE ""%NY%""",How many universities have a location that contains NY?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  MIN(enrollment) FROM university",What is the total and minimum enrollment of all schools?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT affiliation) FROM university,Count the number of different affiliation types.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),How many schools do not participate in the basketball match?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,When was the school with the largest enrollment founded?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation",What are the total enrollments of universities of each affiliation type?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT * FROM basketball_match,What is all the information about the basketball match?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation","What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?","CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",What are the enrollment and primary conference for the university which was founded the earliest?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",Find the number of universities that have over a 20000 enrollment size for each affiliation type.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT affiliation) FROM university,Find how many different affiliation types there are.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,Find the founded year of the newest non public school.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,What is the founded year of the non public school that was founded most recently?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT team_name FROM basketball_match ORDER BY all_home DESC,"List names of all teams in the basketball competition, ordered by all home scores in descending order.","CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation",Find the total student enrollment for different affiliation type schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) FROM university WHERE location LIKE ""%NY%""",Find how many school locations have the word 'NY'.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best restaurant in the bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me some restaurants good for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a restaurant in mountain view that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",give me a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  ""santa cruz county"" AND t1.name  =  ""jamerican cuisine"";",how many jamerican cuisine are there in santa cruz county ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",give me some restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",give me some good restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",where can we find a restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",what is a good restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",give me a restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabics on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",give me some restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",where can we find some restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""buttercup kitchen"";",how many buttercup kitchen are there in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many places for chinese are there in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some restaurants good for arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",what are some good places in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""french"";",where can i eat french food in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where are some restaurants good for french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good restaurant in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best restaurant in bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where can we find a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",where can i find a restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",what are some good restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me a good restaurant in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good place in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",where can we find some restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many french restaurant are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best french in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  ""yolo county"" AND t1.food_type  =  ""italian"";",how many italian restaurants are in the yolo county ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good place in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabic restaurants in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many french restaurants are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where can we find some restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a restaurant on buchanan in san francisco that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good french restaurant in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabics in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",show me a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best place in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best french in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me some restaurants good for french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a restaurant in mountain view that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabic restaurants in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best restaurant in bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",what are some good restaurants in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",give me some restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where can i eat some good arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",give me a good restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",give me a restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good restaurants on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",give me some good restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good restaurants in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good place on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",what are some good restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where can i eat some good arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many chinese places are there in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a restaurant on buchanan in san francisco that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.name  =  ""denny"";",how many denny are there in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.name  =  ""denny"";",where is denny in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",what are some good restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some restaurants good for arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many chinese restaurants are there in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",give me a good restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",what is a good restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best restaurant in the bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good restaurant in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where are some restaurants good for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",what is the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",what is a good restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good place on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where is a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""french"";",where can i eat french food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good place in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many places for chinese food are there in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where can i eat some good french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many places for french are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabics in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many places for french food are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some restaurants good for arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good restaurant on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me a good french restaurant in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabics on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",give me a good restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good restaurant on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
twitter_1,"SELECT t1.name ,  t1.email FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  1",Find the name and email for the users who have more than one follower.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(*) FROM tweets,Find the number of tweets in record.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%',Find the names of users whose emails contain 鈥榮uperstar鈥?or 鈥榚du鈥?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t1.name ,  t1.partitionid FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  <  2",Find the name and partition id for users who tweeted less than twice.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT t1.name FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  (SELECT COUNT(*) FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 WHERE t1.name  =  'Tyler Swift'),"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(DISTINCT uid) FROM tweets,Find the number of users who posted some tweets.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5,List the names of 5 users followed by the largest number of other users.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT AVG(followers) FROM user_profiles WHERE uid NOT IN (SELECT uid FROM tweets),Find the average number of followers for the users who do not have any tweet.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT COUNT(*) FROM user_profiles,How many users are there?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT name ,  email FROM user_profiles WHERE followers  >  1000",Find the name and email of the users who have more than 1000 followers.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT MAX(followers) ,  SUM(followers) FROM user_profiles",Find the maximum and total number of followers of all users.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1","Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT COUNT(*) FROM follows,How many followers does each user have?,"CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT t1.name FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1,Find the names of users who have more than one tweet.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,"SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",Find the name and email of the user whose name contains the word 鈥楽wift鈥?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT email FROM user_profiles WHERE name  =  'Mary',"Find the emails of the user named ""Mary"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT AVG(followers) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets),Find the average number of followers for the users who had some tweets.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT text FROM tweets WHERE text LIKE '%intern%',Return the text of tweets about the topic 'intern'.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT text FROM tweets ORDER BY createdate,List the text of all tweets in the order of date.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,"SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid",Find the name of each user and number of tweets tweeted by each of them.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",Find the name and email of the user followed by the least number of people.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Mary"" OR t1.name  =  ""Susan""",Find the id of users who are followed by Mary or Susan.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(*) FROM follows GROUP BY f1,Find the number of followers for each user.,"CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,"SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Mary"" INTERSECT SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Susan""",Find the id of users who are followed by Mary and Susan.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man',"What is the partition id of the user named ""Iron Man"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
bike_1,"SELECT date FROM weather WHERE zip_code  =  94107 AND events != ""Fog"" AND events != ""Rain""","In zip code 94107, on which day neither Fog nor Rain was not observed?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",List the name and the number of stations for all the cities that have at least 15 stations.,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1,Which trip started from the station with the largest dock count? Give me the trip id.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,What is the zip code in which the average mean sea level pressure is the lowest?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",When and in what zip code did max temperature reach 80?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,What are the 3 most common cloud covers in the zip code of 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  ""San Jose""",What is the average latitude and longitude of stations located in San Jose city?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT id FROM trip ORDER BY duration LIMIT 1,What is the id of the shortest trip?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT name FROM station WHERE lat  <  37.5,What are the names of stations that have latitude lower than 37.5?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1","What is the latitude, longitude, city of the station from which the shortest trip started?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT COUNT(DISTINCT bike_id) FROM trip,How many different bike ids are there?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",What are the ids of the trips that lasted the longest and how long did they last?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10,"For each zip code, select all those that have an average mean visiblity below 10.","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  ""San Jose""",What are names of stations that have average bike availability above 10 and are not located in San Jose city?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What is the name, latitude, and city of the station that is located the furthest South?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,"For each city, list their names in decreasing order by their highest station latitude.","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10),What is the mean longitude for all stations that have never had more than 10 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,What is the id of the bike that traveled the most in 94002?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id","For each start station id, what is its name, longitude and average duration of trips started there?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,What are the dates in which the mean sea level pressure was between 30.3 and 31?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1","What is the latitude, longitude, and city of the station from which the trip with smallest duration started?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id",What is the average latitude and longitude of the starting points of all trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100,What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7,What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM station WHERE city  =  ""Mountain View""",How many stations are in Mountain View?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7,What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(DISTINCT city) FROM station,How many different cities have these stations?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12",What are the id and name of the stations that have ever had more than 12 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100",What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,What is the zip code that has the lowest average mean sea level pressure?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT id FROM station WHERE city  =  ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10",What are the ids of stations that are located in San Francisco and have average bike availability above 10.,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",What is the station station and end station for the trips with the three smallest ids?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id",What is the installation date for each ending station on all the trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107)","Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",What are the ids and names of all start stations that were the beginning of at least 200 trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103),Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,What are the dates that have an average sea level pressure between 30.3 and 31?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,List all the cities in a decreasing order of each city's stations' highest latitude.,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city != ""San Francisco""",How many trips did not end in San Francisco?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT city ,  MAX(lat) FROM station GROUP BY city","For each city, what is the highest latitude for its stations?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code","For each zip code, how many times has the maximum wind speed reached 25 mph?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60,"For each zip code, find the ids of all trips that have a higher average mean temperature above 60?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT date FROM weather WHERE max_temperature_f  >  85,Give me the dates when the max temperature was higher than 85.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10,Find the zip code in which the average mean visibility is lower than 10.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",What are the ids and durations of the trips with the top 3 durations?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12",What are the different ids and names of the stations that have had more than 12 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT COUNT(DISTINCT bike_id) FROM trip,"From the trip record, find the number of unique bikes.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","For each zip code, what is the average mean temperature for all dates that start with '8'?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636",What is the total and maximum duration for all trips with the bike id 636?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7,What are the different names for each station that has ever had 7 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",Give me the start station and end station for the trips with the three oldest id.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,Which bike traveled the most often in zip code 94002?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT name FROM station WHERE lat  <  37.5,What are the names of all stations with a latitude smaller than 37.5?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100,List all the distinct stations from which a trip of duration below 100 started.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  ""Palo Alto"")",What is the average bike availability in stations that are not located in Palo Alto?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id","For each station, find its latitude and the minimum duration of trips that ended at the station.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  ""San Jose""",What are the names of all stations that have more than 10 bikes available and are not located in San Jose?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id","For each trip, return its ending station's installation date.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",Which start station had the most trips starting from August? Give me the name and id of the station.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that have the 5 highest cloud cover rates and what are the rates?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What are the name, latitude, and city of the station with the lowest latitude?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,What are all the different zip codes that have a maximum dew point that was always below 70?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8,How many days had both mean humidity above 50 and mean visibility above 8?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10),What is the average longitude of stations that never had bike availability more than 10?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,Find all the zip codes in which the max dew point have never reached 70.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  MAX(lat) FROM station GROUP BY city","For each city, return the highest latitude among its stations.","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7,Return the unique name for stations that have ever had 7 bikes available.,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM station WHERE city  =  ""Mountain View""",How many stations does Mountain View city has?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1,What is the id of the trip that started from the station with the highest dock count?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",On which day and in which zip code was the min dew point lower than any day in zip code 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  ""Mountain View"" AND t3.city  =  ""Palo Alto""",How many trips started from Mountain View city and ended at Palo Alto city?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city !=  ""San Francisco""",Count the number of trips that did not end in San Francisco city.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636",What is the total and maximum duration of trips with bike id 636?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8,What is the number of days that had an average humity above 50 and an average visibility above 8?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",What is the name of every city that has at least 15 stations and how many stations does it have?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code","For each zip code, return how many times max wind speed reached 25?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","For each zip code, return the average mean temperature of August there.","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE ""12/%""",What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100",What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","What are the days that had the smallest temperature range, and what was that range?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  ""Palo Alto"")",What is the average bike availablility for stations not in Palo Alto?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id","For each station, return its longitude and the average duration of trips that started from the station.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  ""Mountain View"" AND t3.city  =  ""Palo Alto""",How many trips stated from  a station in Mountain View and ended at one in Palo Alto?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE ""12/%""",What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,What is the 3 most common cloud cover rates in the region of zip code 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id","For each end station id, what is its name, latitude, and minimum duration for trips ended there?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT id FROM trip ORDER BY duration LIMIT 1,What is the id of the trip that has the shortest duration?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id",What is the average latitude and longitude of all starting stations for the trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  ""San Jose""",What is the average latitude and longitude in San Jose?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
csu_1,SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1,What campus has the most degrees  conferrred over its entire existence?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",What campuses are in Los Angeles county?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,How many faculty members are at the university that gave the least number of degrees in 2001?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""",How many people graduated from San Francisco State University in 2004?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

"
csu_1,"SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  ""Orange"")",What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1,Which campus has the most degrees conferred in all times?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus",how many degrees were conferred between 1998 and 2002?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1,What campus has the most faculties in 2003?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  1996",What is the campus fee for San Jose State University in 1996?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",What campuses are located in the county of Los Angeles?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles"" AND year  >  1950",What campuses are located in Los Angeles county and opened after 1950?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT SUM(faculty) FROM faculty WHERE year  =  2002,How many faculty is there in total in the year of 2002?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",List the campuses in Los Angeles county.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),Find the count of universities whose campus fee is greater than the average campus fee.,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1,Which campus has the most faculties in year 2003?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1,Which year has the most degrees conferred?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005,What is the average fee on a CSU campus in 2005?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  <  1800,What campuses opened before 1800?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Jose State University""",How many undergraduates are there at San Jose State,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  2000",How many degrees were conferred at San Jose State University in 2000?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1,In what year was the most degrees conferred?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),How many universities have a campus fee greater than the average?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,How many faculty members did the university that conferred the most degrees in 2002 have?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Francisco State University"" AND t1.year  =  2000","In the year 2000, what is the campus fee for San Francisco State University?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  ""Orange"" AND t2.year  >=  2000 GROUP BY t1.campus","For each Orange county campus, report the number of degrees granted after 2000.","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  ""Long Beach State University""","What is the number of faculty lines in campus ""Long Beach State University"" in 2002?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200,"What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Year INTEGER PRIMARY KEY,
  TotalEnrollment_AY INTEGER,
  FTE_AY INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus",report the total number of degrees granted between 1998 and 2002.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Chico""",What are the names of all campuses located at Chico?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,How many faculty lines are there in the university that conferred the least number of degrees in year 2001?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  =  1958,What are the campuses that opened in 1958?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""",How many faculty lines are there at San Francisco State University in 2004?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM campuses,How many CSU campuses are there?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939,What campuses opened between 1935 and 1939?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996,Find the average fee on a CSU campus in 1996,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  1996","What is the campus fee of ""San Jose State University"" in year 1996?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Francisco State University"" AND t1.year  =  2000","What is the campus fee of ""San Francisco State University"" in year 2000?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  1996","What is the campus fee of ""San Francisco State University"" in year 1996?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  =  1958,Find all the campuses opened in 1958.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  <  1800,Find the name of the campuses opened before 1800.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,How many faculty lines are there in the university that conferred the most number of degrees in year 2002?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles"" AND year  >  1950",Which university is in Los Angeles county and opened after 1950?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996,What is the average fee for a CSU campus in the year of 1996?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  1996",What is the campus fee for San Francisco State University in 1996?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004,What are the campuses that had between 600 and 1000 faculty members in 2004?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Jose State University""","How many undergraduates are there in ""San Jose State University"" in year 2004?","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005,What is the average fee for a CSU campus in the year of 2005?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Jose State University"" AND t1.year  =  2000","Find the campus fee of ""San Jose State University"" in year 2000.","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  2001",What degrees were conferred in San Francisco State University in the year 2001?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200,What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Year INTEGER PRIMARY KEY,
  TotalEnrollment_AY INTEGER,
  FTE_AY INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Northridge"" AND county  =  ""Los Angeles"" UNION SELECT campus FROM campuses WHERE location  =  ""San Francisco"" AND county  =  ""San Francisco""","Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  ""Orange"")",Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),How many universities have a campus fee higher than average?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Jose State University"" AND t1.year  =  2000",What is the campus fee in the year 2000 for San Jose State University?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  2001","What are the degrees conferred in ""San Francisco State University"" in 2001.","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  ""Orange"" AND t2.year  >=  2000 GROUP BY t1.campus",What is the total number of degrees granted after 2000 for each Orange county campus?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Northridge"" AND county  =  ""Los Angeles"" UNION SELECT campus FROM campuses WHERE location  =  ""San Francisco"" AND county  =  ""San Francisco""","What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),Find the count of universities whose campus fee is greater than the average campus fee.,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT SUM(faculty) FROM faculty WHERE year  =  2002,"How many faculty, in total, are there in the year 2002?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""","What is the number of graduates in ""San Francisco State University"" in year 2004?","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004,List the campus that have between 600 and 1000 faculty lines in year 2004.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939,Which campus was opened between 1935 and 1939?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
news_report,"SELECT t3.name ,  t2.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id ORDER BY t2.event_attendance asC",Show the names of journalists and the names of the events they reported in ascending order,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,"SELECT t3.name ,  t2.date FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id",Show the names of journalists and the dates of the events they reported.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,SELECT COUNT(*) FROM journalist,How many journalists are there?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT nationality ,  COUNT(*) FROM journalist GROUP BY nationality",Show the different nationalities and the number of journalists of each nationality.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT name FROM journalist WHERE nationality  =  ""England"" OR nationality  =  ""Wales""","Show the names of journalists from ""England"" or ""Wales"".","CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report),List the names of journalists who have not reported any event.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT AVG(event_attendance) ,  MAX(event_attendance) FROM event",what are the average and maximum attendances of all events?,"CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,"SELECT t3.name ,  COUNT(*) FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name",Show the names of journalists and the number of events they reported.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,"SELECT venue ,  name FROM event ORDER BY event_attendance DESC LIMIT 2",List the event venues and names that have the top 2 most number of people attended.,"CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,SELECT t3.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name HAVING COUNT(*)  >  1,Show the names of journalists that have reported more than one event.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,"SELECT AVG(t1.age) ,  AVG(years_working) ,  t2.work_type FROM journalist as t1 JOIN news_report as t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",Find the average age and experience working length of journalists working on different role type.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT nationality FROM journalist WHERE years_working  >  10 INTERSECT SELECT nationality FROM journalist WHERE years_working  <  3,Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT AVG(years_working) FROM journalist,What is the average number of years spent working as a journalist?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT nationality ,  age FROM journalist",What are the nationalities and ages of journalists?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT nationality FROM journalist ORDER BY years_working DESC LIMIT 1,What is the nationality of the journalist with the largest number of years working?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT date ,  name ,  venue FROM event ORDER BY event_attendance DESC","Show the dates, places, and names of events in descending order of the attendance.","CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,SELECT name FROM journalist ORDER BY years_working ASC,List the names of journalists in ascending order of years working.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1",Which author has written the most papers? Find his or her last name.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Katsuhiro"" AND t1.lname  =  ""Ueno""","Which institution does ""Katsuhiro Ueno"" belong to?","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Oxford""","Who belong to the institution ""University of Oxford""? Show the first names and last names.","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""Japan"" AND t2.authorder  =  1 AND t1.lname  =  ""Ohori""","Find the titles of papers whose first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""?","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Binders Unbound""","What are the last names of the author of the paper titled ""Binders Unbound""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM papers,How many papers are published in total?,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Jeremy"" AND t1.lname  =  ""Gibbons""","Find the titles of all the papers written by ""Jeremy Gibbons""","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT lname FROM authors WHERE fname  =  ""Amal""","Find the last name of the author with first name ""Amal"".","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM inst,Count the number of institutions.,"CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,SELECT COUNT(*) FROM papers,Count the number of total papers.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%Database%""","Which papers have the substring ""Database"" in their titles? Show the titles of the papers.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Which authors belong to the institution ""Google""? Show the first names and last names.","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1",What is the last name of the author that has published the most papers?,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT fname FROM authors ORDER BY fname,Find the first names of all the authors ordered in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Which papers were written by authors from the institution ""Google""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Monadic%""","Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Tokohu University""","How many papers are published by the institution ""Tokohu University""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%ML%""","Find the titles of the papers that contain the word ""ML"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,SELECT fname FROM authors ORDER BY fname,Sort the first names of all the authors in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","What is the name of the institution that ""Matthias Blume"" belongs to?","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Find all the papers published by the institution ""Google"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Functional%""","Find the first names of all the authors who have written a paper with title containing the word ""Functional"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT lname FROM authors WHERE fname  =  ""Amal""","Which authors have first name ""Amal""? List their last names.","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Monadic%""","Which authors have written a paper with title containing the word ""Monadic""? Return their last names.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM authors,How many authors are there?,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Find the first names and last names of the authors whose institution affiliation is ""Google"".","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""","Find papers whose second author has last name ""Turon"" and is affiliated with an institution in the country ""USA"".","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname FROM authors WHERE lname  =  ""Ueno""","What is the first name of the author with last name ""Ueno""?","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Binders Unbound""","Who is the author of the paper titled ""Binders Unbound""? Give me the last name.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1,Retrieve the country that has published the most papers.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%ML%""","Which papers have the substring ""ML"" in their titles? Return the titles of the papers.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Stephanie"" AND t1.lname  =  ""Weirich""","Which papers have ""Stephanie Weirich"" as an author?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Functional%""","Who has written a paper that has the word ""Functional"" in its title? Return the first names of the authors.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","Which institution is the author ""Matthias Blume"" belong to? Give me the name of the institution.","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Nameless ,  Painless""","Find the first and last name of the author(s) who wrote the paper ""Nameless, Painless"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Olin"" AND t1.lname  =  ""Shivers""","Which papers did the author ""Olin Shivers"" write? Give me the paper titles.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM authors,Count the number of authors.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Indiana University""","List the titles of the papers whose authors are from the institution ""Indiana University"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Indiana University""","What are the papers published under the institution ""Indiana University""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,SELECT lname FROM authors ORDER BY lname,Give me a list of all the last names of authors sorted in alphabetical order,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Oxford""","Find the first names and last names of the authors whose institution affiliation is ""University of Oxford"".","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,SELECT lname FROM authors ORDER BY lname,Retrieve all the last names of authors in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Aaron"" AND t1.lname  =  ""Turon""","Find the titles of all the papers written by ""Aaron Turon"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname ,  lname FROM authors ORDER BY lname",Retrieve all the first and last names of authors in the alphabetical order of last names.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship),Retrieve the title of the paper that has the largest number of authors.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Katsuhiro"" AND t1.lname  =  ""Ueno""","What is the name of the institution the author ""Katsuhiro Ueno"" belongs to?","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Nameless ,  Painless""","What are the first and last name of the author who published the paper titled ""Nameless, Painless""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname FROM authors WHERE lname  =  ""Ueno""","Which authors have last name ""Ueno""? List their first names.","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Jeremy"" AND t1.lname  =  ""Gibbons""","What are the titles of papers published by ""Jeremy Gibbons""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Stephanie"" AND t1.lname  =  ""Weirich""","Find the titles of the papers the author ""Stephanie Weirich"" wrote.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM inst,How many institutions are there?,"CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1,Find the country that the most papers are affiliated with.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Atsushi"" AND t1.lname  =  ""Ohori""","How many papers have ""Atsushi Ohori"" published?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""","Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""","How many papers are written by authors from the institution ""University of Pennsylvania""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""","Find the number of papers published by the institution ""University of Pennsylvania"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""Japan"" AND t2.authorder  =  1 AND t1.lname  =  ""Ohori""","Which papers' first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""? Give me the titles of the papers.","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname ,  lname FROM authors ORDER BY lname",Sort the list of all the first and last names of authors in alphabetical order of the last names.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%Database%""","Which paper's title contains the word ""Database""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship),Which paper has the most authors? Give me the paper title.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
manufacturer,"SELECT name ,  num_of_component FROM furniture ORDER BY market_rate LIMIT 1",Find the name and component amount of the least popular furniture.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,"SELECT MAX(num_of_shops) ,  AVG(num_of_factories) FROM manufacturer WHERE open_year  <  1990",what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,SELECT AVG(num_of_factories) FROM manufacturer WHERE num_of_shops  >  20,Find the average number of factories for the manufacturers that have more than 20 shops.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,"CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT COUNT(*) ,  t1.name FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",Find the number of funiture types produced by each manufacturer as well as the company names.,"CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT t1.name ,  t2.price_in_dollar FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id",Give me the names and prices of furnitures which some companies are manufacturing.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,"SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",List all manufacturer names and ids ordered by their opening year.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT market_rate ,  name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte)",Find the market shares and names of furnitures which no any company is producing in our records.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,SELECT t1.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id WHERE t2.price_in_dollar  <  (SELECT MAX(price_in_dollar) FROM furniture_manufacte),Find the names of furnitures whose prices are lower than the highest price.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,"SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",Which manufacturer has the most number of shops? List its name and year of opening.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",Return the name and id of the furniture with the highest market rate.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,"SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",Find the id and number of shops for the company that produces the most expensive furniture.,"CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR num_of_factories  <  10",Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT num_of_component ,  name FROM furniture WHERE num_of_component  >  10",Find the component amounts and names of all furnitures that have more than 10 components.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2,find the total market rate of the furnitures that have the top 2 market shares.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
network_2,"SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person)",Who has friends that are older than the average age? Print their friends and their ages as well,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1,Find the person who has exactly one friend.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age,What is the name of all the people who are older than at least one engineer? Order them by age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice')","Find the name, age, and job title of persons who are friends with Alice for the longest years.","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach'),What is the age of the friend of Zach with longest year relationship?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' ),What is the name of the youngest male?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice'",What are the names and ages of every person who is a friend of both Dan and Alice?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT AVG(age) FROM person,What is the average age for all person?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female',Find the female friends of Alice.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person ORDER BY age DESC,What are the names of everybody sorted by age in descending order?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' ORDER BY age,Find the name and age of all males in order of their age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1,What are the names of everybody who has exactly one friend?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan',How many friends does Dan have?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student',What are the names of the people who have no friends who are students?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender",Find the number of people who is under 40 for each gender.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT MIN(age) ,  job FROM person GROUP BY job",How old is the youngest person for each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer'),How many people are older than every engineer?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1",Which person whose friends have the oldest average age?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice'",What are the different names and ages of every friend of either Dan or alice?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who has no friend living in the city of Austin.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob',Find the name of persons who are friends with Bob.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),Find the name of the person who has friends with age above 40 and under age 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job",What is average age of male for different job title?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT city) FROM person,How many different cities do people originate from?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT city) FROM person,How many different cities are they from?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT name ,  job FROM person ORDER BY name","list the name, job title of all people ordered by their names.","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),What are the names of the people who are older 40 but no friends under age 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city',What are the names of all friends who are from New York?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female',Find the names of females who are friends with Zach,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female',What are all the friends of Alice who are female?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student',Find the name of the person who has no student friends.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' ),Who is the oldest person whose job is student?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice'),Find the name of persons who are friends with Alice for the shortest years.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job",What is the average age for a male in each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT AVG(age) FROM person,What is the average age for all people in the table?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT job) FROM person,How many type of jobs do they have?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob',Who are Bob's friends?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),What are the names of every person who has a friend over 40 and under 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach'),Which friend of Zach has the longest-lasting friendship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(DISTINCT job) FROM person,How many different jobs are listed?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice')","What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female',What are the names of all females who are friends with Zach?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob',What are the names of all of Bob's friends?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),Find the name of the person who has friends with age above 40 but not under age 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(*) FROM person WHERE gender  =  'female',How many females does this network has?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach',How old is the doctor named Zach?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  job FROM person GROUP BY job",How old is the average person for each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' ),Who is the youngest male?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice'",Find the name and age of the person who is a friend of Dan or Alice.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1","What is the name of the person who has the oldest average age for their friends, and what is that average age?","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender",How many people are under 40 for each gender?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who have no friends living in Austin?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor',Who are the friends of Alice that are doctors?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age,Find the name of people whose age is greater than any engineer sorted by their age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person ORDER BY age DESC,Find the names of all person sorted in the descending order using age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person EXCEPT SELECT name FROM personfriend,What are the names of all people who do not have friends?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan',How many friends does Dan have?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE age  <  30,Who is the person whose age is below 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person),Who has friends that are younger than the average age?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' ORDER BY age,What is the name and age of every male? Order the results by age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person),Who is the oldest person?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE gender  =  'female',How many females are in the network?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' ),What is the name of the oldest student?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT name ,  job FROM person ORDER BY name",What are the names and job titles of every person ordered alphabetically by name?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  gender FROM person GROUP BY gender",What is the average age for each gender?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  <  30,What is the name of the person whose age is below 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  job FROM person GROUP BY job",What is average age for different job title?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person)","Whare the names, friends, and ages of all people who are older than the average age of a person?","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city',Who has a friend that is from new york city?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice',What are the names of all of Alice's friends of friends?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person),What is the name of the person who is the oldest?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice'",Find the name and age of the person who is a friend of both Dan and Alice.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice'),What are the names of all people who are friends with Alice for the shortest amount of time?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer',HOw many engineers are older than 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer',How many people whose age is greater 30 and job is engineer?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob',Who are the friends of Bob?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach'),Who is the friend of Zach with longest year relationship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,What is the count of enzymes without any interactions?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor'",What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor'","What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2",What are the ids and names of the medicine that can interact with two or more enzymes?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX'",What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor'","What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name",How many medicines are offered by each trade name?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme ORDER BY name DESC,List the name of enzymes in descending lexicographical order.,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole',What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No',How many medicines were not approved by the FDA?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme,How many kinds of enzymes are there?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name",find the number of medicines offered by each trade.,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol'","What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3",What are the ids and trade names of the medicine that can interact with at least 3 enzymes?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1","What are the most common types of interactions between enzymes and medicine, and how many types are there?","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX'",Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  location FROM enzyme",What are the names and locations of all enzymes listed?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(DISTINCT fda_approved) FROM medicine,How many distinct FDA approval statuses are there for the medicines?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the enzyme that can interact with the most medicines as an activator?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC","What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor',What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes'",What are the names and trade names of the medicines which has 'Yes' value in the FDA record?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor',What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1",What is the most common interaction type between enzymes and medicine? And how many are there?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor'",List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT MAX(omim) FROM enzyme,What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  location FROM enzyme",List the names and the locations that the enzymes can make an effect.,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole',What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No',How many medicines have the FDA approval status 'No' ?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme ORDER BY name DESC,What are the names of enzymes in descending order?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,How many enzymes do not have any interactions?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3",What is the id and trade name of the medicines can interact with at least 3 enzymes?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme WHERE product != 'Heme',What are the names of enzymes whose product is not 'Heme'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC","What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?","CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme,What is the total count of enzymes?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT MAX(omim) FROM enzyme,What is the maximum OMIM value in the database?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes'",What are the names and trade names of the medcines that are FDA approved?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT name FROM enzyme WHERE name LIKE ""%ALA%""",What are the names of enzymes that include the string 'ALA'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(DISTINCT fda_approved) FROM medicine,How many different FDA approval statuses exist for medicines?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","What is the average room count of the apartments whose booking status code is ""Provisional""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id","What are the guest first name, start date, and end date of each apartment booking?","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_number ,  room_count FROM apartments",Return the apartment number and the number of rooms for each apartment.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC",Show each gender code and the corresponding count of guests sorted by the count in descending order.,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT DISTINCT building_description FROM apartment_buildings,Show all distinct building descriptions.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4,What are the facility codes of the apartments with more than four bedrooms?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities),Find the number of apartments that have no facility.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,"SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager	 =  ""Brenden""","What are the address and phone number of the buildings managed by ""Brenden""?","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT apt_number ,  room_count FROM apartments",What are the apartment number and the room count of each apartment?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  ""Kyle""","What apartment type codes and apartment numbers do the buildings managed by ""Kyle"" have?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2,Show the addresses of the buildings that have apartments with more than 2 bathrooms.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC","Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1,Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `View_Unit_Status` (
  apt_id INTEGER REFERENCES Apartments(apt_id),
  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),
  status_date DATETIME PRIMARY KEY,
  available_yn BIT
);

"
apartment_rentals,SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Which apartment type code is the most common among apartments with more than one bathroom?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT 	booking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code",How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3,Show the top 3 apartment type codes sorted by the average number of rooms in descending order.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT AVG(bedroom_count) FROM apartments,What is the average number of bedrooms of all apartments?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT 	booking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code",Show the booking status code and the corresponding number of bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  ""Studio""","What is the average number of rooms of apartments with type code ""Studio""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  ""Studio""","Find the average room count of the apartments that have the ""Studio"" type code.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_short_name FROM apartment_buildings WHERE building_manager	 =  ""Emma""","Which buildings does ""Emma"" manage? Give me the short names of the buildings.","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  ""Confirmed""","Which guests have apartment bookings with status code ""Confirmed""? Return their first names and last names.","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  ""Female""","What are the start date and end date of the apartment bookings made by female guests (gender code ""Female"")?","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  ""Columbus Square""","How many rooms in total are there in the apartments in the building with short name ""Columbus Square""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2",What are the booking start and end dates of the apartments with more than 2 bedrooms?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_number FROM apartments WHERE apt_type_code  =  ""Flat""","Return the apartment numbers of the apartments with type code ""Flat"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1,Return the apartment number with the largest number of bedrooms.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  ""Gym""","Find the total number of rooms in the apartments that have facility code ""Gym"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id","Show the guest first names, start dates, and end dates of all the apartment bookings.","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT date_of_birth FROM guests WHERE gender_code  =  ""Male""","What are dates of birth of all the guests whose gender is ""Male""?","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3,What are the top three apartment types in terms of the average room count? Give me the,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE ""%court%""","Find all the building full names containing the word ""court"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT date_of_birth FROM guests WHERE gender_code  =  ""Male""","Return the date of birth for all the guests with gender code ""Male"".","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments",What is the minimum and maximum number of bathrooms of all the apartments?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the most common apartment type code.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC",Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed""","Show the distinct apartment numbers of the apartments that have bookings with status code ""Confirmed"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  ""Duplex""","What are the booking start and end dates of the apartments with type code ""Duplex""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code",Return each apartment type code along with the maximum and minimum number of rooms among each type.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed"" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Which apartments have bookings with both status codes ""Provisional"" and ""Confirmed""? Give me the apartment numbers.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed""","Which apartments have bookings with status code ""Confirmed""? Return their apartment numbers.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,SELECT COUNT(*) FROM apartment_bookings,How many apartment bookings are there in total?,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_number FROM apartments WHERE apt_type_code  =  ""Flat""","Which apartments have type code ""Flat""? Give me their apartment numbers.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT DISTINCT building_description FROM apartment_buildings,Give me a list of all the distinct building descriptions.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  ""Suite 634""","What is the booking status code of the apartment with apartment number ""Suite 634""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  ""Kyle""","Show the apartment type codes and apartment numbers in the buildings managed by ""Kyle"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1,Show the apartment numbers of apartments with unit status availability of both 0 and 1.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `View_Unit_Status` (
  apt_id INTEGER REFERENCES Apartments(apt_id),
  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),
  status_date DATETIME PRIMARY KEY,
  available_yn BIT
);

"
apartment_rentals,"SELECT booking_start_date ,  booking_end_date FROM apartment_bookings",Show the start dates and end dates of all the apartment bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT booking_start_date ,  booking_end_date FROM apartment_bookings",What are the start date and end date of each apartment booking?,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id","Show the apartment numbers, start dates, and end dates of all the apartment bookings.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT guest_first_name ,  guest_last_name FROM guests",Return the first names and last names of all guests,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT COUNT(*) FROM apartment_bookings,Count the total number of apartment bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  ""Duplex""","Return the booking start date and end date for the apartments that have type code ""Duplex"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the most common apartment type code among apartments with more than 1 bathroom.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT guest_first_name ,  guest_last_name FROM guests",What are the first names and last names of all the guests?,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1,What is the apartment number of the apartment with the most beds?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Show the average room count of the apartments that have booking status code ""Provisional"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed"" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  ""Columbus Square""","Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id","What are the apartment number, start date, and end date of each apartment booking?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code","Show each apartment type code, and the maximum and minimum number of rooms for each type.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  ""Suite 634""","Tell me the booking status code for the apartment with number ""Suite 634"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT building_short_name FROM apartment_buildings WHERE building_manager	 =  ""Emma""","Show the short names of the buildings managed by ""Emma"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities),How many apartments do not have any facility?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,"SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager	 =  ""Brenden""","Show the addresses and phones of all the buildings managed by ""Brenden"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Which apartment type code appears the most often?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  ""Gym""","Show the total number of rooms of all apartments with facility code ""Gym"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY room_count ASC,Sort the apartment numbers in ascending order of room count.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments",Give me the minimum and maximum bathroom count among all the apartments.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
program_share,SELECT name FROM channel WHERE owner != 'CCTV',Find the names of channels that are not owned by CCTV.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(*) FROM program,Count the number of programs.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel WHERE owner != 'CCTV',Which channels are not owned by CCTV? Give me the channel names.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM program ORDER BY launch,"list all the names of programs, ordering by launch time.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT COUNT(DISTINCT owner) FROM channel,what is the number of different channel owners?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night',"How many distinct programs are broadcast at ""Night"" time?","CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM program WHERE origin != 'Beijing',"Which programs' origins are not ""Beijing""? Give me the program names.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',Find the names of the channels that are broadcast in the morning.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning"" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Night""",find the program owners that have some programs in both morning and night time.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS',What are the names of the channels owned by CCTV or HBS?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV',find the total percentage share of all channels owned by CCTV.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM program ORDER BY launch,"What is the list of program names, sorted by the order of launch date?","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner",What is the total rating of channel for each channel owner?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning"" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Night""",Who are the owners of the programs that broadcast both in the morning and at night?,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1,Which program is broadcast most frequently? Give me the program name.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,"SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning""",Which programs are never broadcasted in the morning? Give me the names of the programs.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM program ORDER BY launch DESC LIMIT 1,Which program was launched most recently? Return the program name.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1,Show me the owner of the channel with the highest rating.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV',What is the total share (in percent) of all the channels owned by CCTV?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',Which channels are broadcast in the morning? Give me the channel names.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT origin FROM program ORDER BY origin,List all program origins in the alphabetical order.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",how many programs are broadcast in each time section of the day?,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,"SELECT name ,  origin ,  owner FROM program","List the name, origin and owner of each program.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night',find the number of different programs that are broadcast during night time.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',Which channels broadcast both in the morning and at night? Give me the channel names.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT origin FROM program ORDER BY origin,What is the list of program origins ordered alphabetically?,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT COUNT(*) FROM program,how many programs are there?,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel ORDER BY rating_in_percent DESC,Give me a list of all the channel names sorted by the channel rating in descending order.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",Count the number of programs broadcast for each time section of a day.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM program WHERE origin != 'Beijing',find the names of programs whose origin is not in Beijing.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM program ORDER BY launch DESC LIMIT 1,find the name of the program that was launched most recently.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner",Find the total rating ratio for each channel owner.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(DISTINCT owner) FROM channel,Count the number of distinct channel owners.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM channel ORDER BY rating_in_percent DESC,List all channel names ordered by their rating in percent from big to small.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1,Find the name of the program that is broadcast most frequently.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',what are the names of the channels that broadcast in both morning and night?,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
local_govt_mdm,"SELECT t1.council_tax_id FROM rent_arrears as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id JOIN customer_master_index as t3 ON t3.master_customer_id  =  t2.master_customer_id WHERE t3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'","What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","CREATE TABLE `Rent_Arrears` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t1.source_system_code ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN benefits_overpayments as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id ORDER BY t2.council_tax_id","What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.","CREATE TABLE `Benefits_Overpayments` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t1.source_system_code ,  t1.master_customer_id ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN parking_fines as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id",Wat is the tax source system code and master customer id of the taxes related to each parking fine id?,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t1.cmi_cross_ref_id ,  t1.source_system_code FROM cmi_cross_references as t1 JOIN council_tax as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING COUNT(*)  >=  1",What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,"CREATE TABLE `Council_Tax` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT COUNT(*) FROM rent_arrears,How many council taxes are collected for renting arrears ?,"CREATE TABLE `Rent_Arrears` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,SELECT t1.electoral_register_id FROM electoral_register as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id WHERE t2.source_system_code  =  'Electoral' OR t2.source_system_code  =  'Tax',What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?,"CREATE TABLE `Electoral_Register` (
  electoral_register_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",List the council tax ids and their related cmi cross references of all the parking fines.,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,"SELECT DISTINCT t2.source_system_code FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t1.cmi_details  =  'Gottlieb ,  Becker and Wyman'","What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t2.cmi_cross_ref_id ,  t2.master_customer_id ,  COUNT(*) FROM business_rates as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id","How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

CREATE TABLE `Business_Rates` (
  business_rates_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references,How many different source system code for the cmi cross references are there?,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%',Which distinct source system code includes the substring 'en'?,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT t1.cmi_details FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t2.source_system_code  =  'Tax',what are the details of the cmi masters that have the cross reference code 'Tax'?,"CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,Which cmi cross reference id is not related to any parking taxes?,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
store_product,"SELECT product FROM product WHERE product LIKE ""%Scanner%""","Find all the product whose name contains the word ""Scanner"".","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT type ,  COUNT(*) FROM store GROUP BY type","For each type of store, how many of them are there?","CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  ""Khanewal District""",What are the names of all the stores located in Khanewal District?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,"SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",How many stores are headquarted in each city?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1,Find the most prominent max page size among all the products.,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",Find the number of stores in each city.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" OR pages_per_minute_color  <  5",What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),What are the names of all the stores in the largest district by population?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT DISTINCT district_name FROM district ORDER BY city_area DESC,What are the different district names in order of descending city area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT AVG(pages_per_minute_color) FROM product,What is the average number of pages per minute color?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000,Find the name all districts with city area greater than 10 or population larger than 100000,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district),Find the total population of the districts where the area is bigger than the average city area.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1,What is the most common maximum page size?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT product FROM product WHERE product LIKE ""%Scanner%""","What are all of the products whose name includes the substring ""Scanner""?","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1,Find the city with the most number of stores.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3,Find the total population of the top 3 districts with the largest area.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""City Mall"" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""Village Store""",Find the names of districts where have both city mall and village store type stores.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1,What is the city with the most number of flagship stores?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT AVG(pages_per_minute_color) FROM product,What is the average pages per minute color?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,Which district has the largest population?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  ""Blackville""",What city is the headquarter of the store Blackville?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,"SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  ""Miramichi""",What products are sold at the store named Miramichi?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

CREATE TABLE `store_product` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3,What is the maximum page size for everything that has more than 3 products listed?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1),Find the name of the products that are not using the most frequently-used max page size.,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  ""Miramichi""","What products are available at store named ""Miramichi""?","CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

CREATE TABLE `store_product` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)
);

"
store_product,"SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""City Mall"" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""Village Store""",What are the names of the districts that have both mall and village store style shops?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000,What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" OR pages_per_minute_color  <  5","Find products with max page size as ""A4"" or pages per minute color smaller than 5.","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" AND pages_per_minute_color  <  5",What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  ""Blackville""","Which city is the headquarter of the store named ""Blackville"" in?","CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT DISTINCT district_name FROM district ORDER BY city_area DESC,Find all the distinct district names ordered by city area in descending.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000","What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?","CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1,Which district has the least area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT type ,  COUNT(*) FROM store GROUP BY type",Find all types of store and number of them.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  ""Khanewal District""",Find the names of all stores in Khanewal District.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3,What is the total number of residents for the districts with the 3 largest areas?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" AND pages_per_minute_color  <  5","Find products with max page size as ""A4"" and pages per minute color smaller than 5.","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3,Find the list of page size which have more than 3 product listed,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),Find all the stores in the district with the most population.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

"
store_product,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1),What are the names of all products that are not the most frequently-used maximum page size?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
gas_company,"SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year","What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas',What are the headquarters that have both a company in the banking and 'oil and gas' industries?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id",Show the company name with the number of gas station.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

"
gas_company,"SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*)","For each location, how many gas stations are there in order?","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company","Show minimum, maximum, and average market value for all companies.","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",Show the company name and the main industry for all companies whose headquarters are not from USA.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking',What are the headquarters without companies that are in the banking industry?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters",List all headquarters and the number of companies in each headquarter.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas',Show all headquarters with both a company in banking industry and a company in Oil and gas.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking',Show all headquarters without a company in banking industry.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT COUNT(*) FROM company,What is the total number of companies?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1","For each main industry, what is the total number of companies for the industry with the highest total market value?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC",Show all company names and headquarters in the descending order of market value.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*)",Show all locations and the number of gas stations in each location ordered by the count.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,How many gas station are opened between 2000 and 2005?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT company ,  rank FROM company ORDER BY sales_billion DESC",What is the name and rank of every company ordered by descending number of sales?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry",What are the main indstries and total market value for each industry?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters","For each headquarter, what are the headquarter and how many companies are centered there?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion","find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT DISTINCT main_industry FROM company,Show all main industry for all companies.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT COUNT(*) FROM company,How many gas companies are there?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2,What are the headquarters with at least two companies in the banking industry?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion","What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC",What are the names and headquarters of all companies ordered by descending market value?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT DISTINCT main_industry FROM company,What are the different main industries for all companies?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",Show company name and main industry without a gas station.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

"
gas_company,SELECT location FROM gas_station ORDER BY open_year,What are the locations of all the gas stations ordered by opening year?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry",Show all main industry and total market value in each industry.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",What are the main industries of the companies without gas stations and what are the companies?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

"
gas_company,SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,What is the total number of gas stations that opened between 2000 and 2005?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100,What are the locations that have gas stations owned by a company with a market value greater than 100?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT location FROM gas_station ORDER BY open_year,order all gas station locations by the opening year.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1",List the main industry with highest total market value and its number of companies.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year","Show gas station id, location, and manager_name for all gas stations ordered by open year.","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100,Show all locations where a gas station for company with market value greater than 100 is located.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2,Show headquarters with at least two companies in the banking industry.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil',What are the names of the managers for gas stations that are operated by the ExxonMobil company?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id","For each company id, what are the companies and how many gas stations does each one operate?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

"
gas_company,"SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company","What is the minimum, maximum, and average market value for every company?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
entertainment_awards,SELECT AVG(num_of_audience) FROM festival_detail,What is the average number of audience for festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT num_of_audience FROM festival_detail WHERE year  =  2008 OR year  =  2010,Show the number of audience in year 2008 or 2010.,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT COUNT(*) FROM artwork,How many artworks are there?,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT t1.festival_id ,  t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id HAVING COUNT(*)  >=  2",Show the ids and names of festivals that have at least two nominations for artworks.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT type FROM artwork GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of artworks.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT festival_name FROM festival_detail ORDER BY year DESC LIMIT 3,Show the names of the three most recent festivals.,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t2.name ,  t3.Festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id","For each nomination, show the name of the artwork and name of the festival where it is nominated.","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT location FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1,What is the location of the festival with the largest number of audience?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT chair_name FROM festival_detail ORDER BY year ASC,"What are the names of the chairs of festivals, sorted in ascending order of the year held?","CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t2.type  =  ""Program Talent Show""","Show the names of festivals that have nominated artworks of type ""Program Talent Show"".","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT name FROM artwork WHERE type != ""Program Talent Show""","List the name of artworks whose type is not ""Program Talent Show"".","CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT SUM(num_of_audience) FROM festival_detail,What are the total number of the audiences who visited any of the festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t1.festival_id ,  t3.festival_name ,  COUNT(*) FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id","Show the id, name of each festival and the number of artworks it has nominated.","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT name FROM artwork WHERE artwork_ID NOT IN (SELECT artwork_ID FROM nomination),List the name of artworks that are not nominated.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT festival_name ,  location FROM festival_detail",What are the names and locations of festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT year FROM festival_detail WHERE location  =  'United States' INTERSECT SELECT year FROM festival_detail WHERE location != 'United States',In which year are there festivals both inside the 'United States' and outside the 'United States'?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT name FROM artwork ORDER BY name ASC,List the name of artworks in ascending alphabetical order.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT DISTINCT t2.type FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t3.year  =  2007,Show distinct types of artworks that are nominated in festivals in 2007.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT t2.name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id ORDER BY t3.year,Show the names of artworks in ascending order of the year they are nominated in.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT type ,  COUNT(*) FROM artwork GROUP BY type",Please show different types of artworks with the corresponding number of artworks of each type.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
protein_institute,SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20,List the names of buildings with at least 200 feet of height and with at least 20 floors.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT COUNT(*) FROM building WHERE height_feet  >  (SELECT AVG(height_feet) FROM building) OR floors  >  (SELECT AVG(floors) FROM building),Show the number of buildings with a height above the average or a number of floors above the average.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id JOIN building as t3 ON t3.building_id  =  t1.building_id WHERE t3.floors  >=  20,How many proteins are associated with an institution in a building with at least 20 floors?,"CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,"SELECT t2.protein_name ,  t1.institution FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id",Show the protein name and the institution name.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

"
protein_institute,"SELECT AVG(floors) ,  MAX(floors) ,  MIN(floors) FROM building","What are the average, maximum, and minimum number of floors for all buildings?","CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,"SELECT type ,  COUNT(*) ,  SUM(enrollment) FROM institution GROUP BY type","Show institution types, along with the number of institutions and total enrollment for each type.","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT name FROM building ORDER BY height_feet DESC LIMIT 1,What is the name of the tallest building?,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT COUNT(*) FROM building,How many buildings are there?,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,"SELECT t1.name ,  COUNT(*) FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id GROUP BY t1.building_id","For each building, show the name of the building and the number of institutions in it.","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT COUNT(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein),How many institutions do not have an associated protein in our record?,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

"
protein_institute,"SELECT name ,  street_address ,  floors FROM building ORDER BY floors","Show the name, street address, and number of floors for all buildings ordered by the number of floors.","CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT type FROM institution WHERE founded  >  1990 AND enrollment  >=  1000,Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id WHERE t1.founded  >  1880 OR t1.type  =  'Private',"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

"
protein_institute,"SELECT institution ,  location FROM institution WHERE founded  >  1990 AND type  =  'Private'","Show the names and locations of institutions that are founded after 1990 and have the type ""Private"".","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t1.name ,  t1.height_feet FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  >  1880 GROUP BY t1.building_id HAVING COUNT(*)  >=  2",Show the names and heights of buildings with at least two institutions founded after 1880.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT DISTINCT type FROM institution,Show all the distinct institution types.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t1.institution ,  COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id GROUP BY t1.institution_id",Show institution names along with the number of proteins for each institution.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

"
protein_institute,SELECT type FROM institution GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1,Show the institution type with the largest number of institutions.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
roller_coaster,SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1,Show the park of the roller coaster with the highest speed.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT speed FROM roller_coaster ORDER BY length DESC LIMIT 1,What are the speeds of the longest roller coaster?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name HAVING COUNT(*)  >  1,Show the names of countries that have more than one roller coaster.,"CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t1.name ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id ORDER BY t2.height DESC LIMIT 1",Show the name and population of the country that has the highest roller coaster.,"CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT AVG(speed) FROM roller_coaster,What is the average speed of roller coasters?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common status of roller coasters.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  >  60 INTERSECT SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  <  55","What are the country names, area and population which has both roller coasters with speed higher","CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT COUNT(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE length  >  3000 ),How many countries do not have an roller coaster longer than 3000?,"CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster WHERE length  >  3300 OR height  >  100,Show the statuses of roller coasters longer than 3300 or higher than 100.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t2.name ,  t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id",Show the names of roller coasters and names of country they are in.,"CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT COUNT(*) FROM roller_coaster,How many roller coasters are there?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t1.name ,  AVG(t2.speed) FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name",Show the names of countries and the average speed of roller coasters from each country.,"CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster GROUP BY status HAVING COUNT(*)  >  2,List the status shared by more than two roller coaster.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT name FROM country WHERE languages != ""German""","List the names of countries whose language is not ""German"".","CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,"SELECT length ,  height FROM roller_coaster",What are the lengths and heights of roller coasters?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT name FROM roller_coaster ORDER BY length ASC,List the names of roller coasters by ascending order of length.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
local_govt_in_alabama,"SELECT service_id ,  event_details FROM events",List the service id and details for the events.,"CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Success' INTERSECT SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Fail',Which services type had both successful and failure event details?,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events),How many events did not have any participants?,"CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,"SELECT t1.event_id ,  t1.event_details FROM events as t1 JOIN participants_in_events as t2 ON t1.event_id  =  t2.event_id GROUP BY t1.event_id HAVING COUNT(*)  >  1",What are the ids and details of events that have more than one participants?,"CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT COUNT(DISTINCT participant_id) FROM participants_in_events,What are all the distinct participant ids who attended any events?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,"SELECT t3.service_id ,  t4.service_type_code FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id JOIN events as t3 ON t2.event_id   =  t3.event_id JOIN services as t4 ON t3.service_id  =  t4.service_id GROUP BY t3.service_id ORDER BY COUNT(*) asC LIMIT 1",Which service id and type has the least number of participants?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT service_type_code FROM services ORDER BY service_type_code,List the type of the services in alphabetical order.,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

"
local_govt_in_alabama,SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1,What is the most common participant type?,"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT COUNT(*) FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id WHERE t1.participant_details LIKE '%Dr.%',How many events had participants whose details had the substring 'Dr.',"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY COUNT(*) DESC LIMIT 1,What is the id of the event with the most participants?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT event_id FROM events EXCEPT SELECT t1.event_id FROM participants_in_events as t1 JOIN participants as t2 ON t1.participant_id  =  t2.participant_id WHERE participant_details  =  'Kenyatta Kuhn',Which events id does not have any participant with detail 'Kenyatta Kuhn'?,"CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT t1.event_details FROM events as t1 JOIN services as t2 ON t1.service_id  =  t2.service_id WHERE t2.service_type_code  =  'Marriage',what are the event details of the services that have the type code 'Marriage'?,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,"SELECT participant_id ,  participant_type_code ,  participant_details FROM  participants","What are all the the participant ids, type code and details?","CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,"SELECT t1.participant_id ,  t1.participant_type_code ,  COUNT(*) FROM participants as t1 JOIN participants_in_Events as t2 ON t1.participant_id  =  t2.participant_id GROUP BY t1.participant_id","How many events have each participants attended? List the participant id, type and the number.","CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
architecture,SELECT AVG(length_feet) FROM bridge,What is the average length in feet of the bridges?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,"SELECT t1.id ,  t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1","What is the id, name and nationality of the architect who built most mills?","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT MAX(t1.length_meters) ,  t2.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id",What is the maximum length in meters for the bridges and what are the architects' names?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,"SELECT t1.id ,  t1.name FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  >=  3",What are the ids and names of the architects who built at least 3 bridges ?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,SELECT COUNT(*) FROM architect WHERE gender  =  'female',How many architects are female?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );,How many architects haven't built a mill before year 1850?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,SELECT name FROM mill WHERE location != 'Donceel',What are the names of the mills which are not located in 'Donceel'?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  2 UNION SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  1","What are the ids, names and genders of the architects who built two bridges or one mill?","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,SELECT DISTINCT t1.type FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' OR t2.nationality  =  'Canadian',What are the distinct types of mills that are built by American or Canadian architects?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT type ,  COUNT(*) FROM mill GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1","What is the most common mill type, and how many are there?","CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,SELECT t1.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet,"show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,"SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name","List the name, nationality and id of all male architects ordered by their names lexicographically.","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT DISTINCT t1.name FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id JOIN bridge as t3 ON t3.architect_id  =  t2.id WHERE t3.length_meters  >  80,What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,SELECT name FROM mill WHERE name LIKE '%Moulin%',Which of the mill names contains the french word 'Moulin'?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT DISTINCT t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id",What are the distinct names and nationalities of the architects who have ever built a mill?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,SELECT location FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge',What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
railway,SELECT location FROM railway GROUP BY location HAVING COUNT(*)  >  1,Show the locations that have more than one railways.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT builder FROM railway GROUP BY builder ORDER BY COUNT(*) DESC LIMIT 1,Show the most common builder of railways.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT name FROM manager ORDER BY level ASC,What are the names of managers in ascending order of level?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train),List the object number of railways that do not have any trains.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,SELECT country FROM manager WHERE age  >  50 INTERSECT SELECT country FROM manager WHERE age  <  46,Show the countries that have both managers of age above 50 and managers of age below 46.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,"SELECT name ,  arrival FROM train",What are the names and arrival times of trains?,"CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT MAX(level) FROM manager WHERE country != ""Australia	""","What is the maximum level of managers in countries that are not ""Australia""?","CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT working_year_starts FROM manager ORDER BY level DESC,Show the working years of managers in descending order of their level.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT COUNT(*) FROM railway,How many railways are there?,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT name FROM manager ORDER BY age DESC LIMIT 1,What is the name of the oldest manager?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,"SELECT t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id WHERE t2.name  =  ""Andaman Exp""","Show the builder of railways associated with the trains named ""Andaman Exp"".","CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT t2.name ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id",Show the names of trains and locations of railways they are in.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT location ,  COUNT(*) FROM railway GROUP BY location",Show different locations of railways along with the corresponding number of railways at each location.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,"SELECT t2.railway_id ,  t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT(*) DESC LIMIT 1",Show the id and builder of the railway that are associated with the most trains.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,SELECT AVG(age) FROM manager,What is the average age for all managers?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT builder FROM railway ORDER BY builder ASC,List the builders of railways in ascending alphabetical order.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,"SELECT t2.railway_id ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id HAVING COUNT(*)  >  1",Show id and location of railways that are associated with more than one train.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,SELECT DISTINCT country FROM manager,Show the distinct countries of managers.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT country FROM manager WHERE age  >  50 OR age  <  46,Show the countries that have managers of age above 50 or below 46.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
book_2,"SELECT publisher ,  COUNT(*) FROM publication GROUP BY publisher",Show different publishers together with the number of publications they have.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,"SELECT price FROM publication WHERE publisher  =  ""Person"" OR publisher  =  ""Wiley""","Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT publication_date FROM publication ORDER BY price DESC,What are the dates of publications in descending order of price?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(DISTINCT publication_date) FROM publication,What is the number of distinct publication dates?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT writer FROM book GROUP BY writer HAVING COUNT(*)  >  1,List the writers who have written more than one book.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT DISTINCT publisher FROM publication WHERE price  >  5000000,What are the distinct publishers of publications with price higher than 5000000?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT publisher FROM publication WHERE price  >  10000000 INTERSECT SELECT publisher FROM publication WHERE price  <  5000000,Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,"SELECT title FROM book WHERE writer != ""Elaine Lee""","What are the titles of the books whose writer is not ""Elaine Lee""?","CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common publication date.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT t1.writer FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id WHERE t2.price  >  4000000,Show writers who have published a book with price more than 4000000.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT title FROM book ORDER BY issues ASC,List the titles of the books in ascending order of issues.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publisher FROM publication ORDER BY price DESC LIMIT 1,List the publisher of the publication with the highest price.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(DISTINCT publication_date) FROM publication,How many distinct publication dates are there in our record?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(*) FROM book,How many books are there?,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT writer FROM book ORDER BY writer ASC,List the writers of the books in ascending alphabetical order.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3,List the publication dates of publications with 3 lowest prices.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication),List the titles of books that are not published.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT t1.title FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id ORDER BY t2.price DESC,Show the titles of books in descending order of publication price.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*)  >  1,Show publishers that have more than one publication.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
