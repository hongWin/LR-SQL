db_id,query,question,database_schema
manufactory_1,"SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder",Find the total revenue of companies of each founder.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing',Find the number of manufactures that are based in Tokyo or Beijing.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",Select the name of each manufacturer along with the name and price of its most expensive product.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy',Return the number of companies created by Andy.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name LIKE 'S%',Who is the founders of companies whose first letter is S?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name  =  'Sony',Who is the founder of Sony?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers","What are the average, maximum and total revenues of all companies?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products,What is the average price across all products?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony',What are the names of products produced by both Creative Labs and Sony?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM products WHERE price  <=  200,What are the names of products with price at most 200?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT COUNT(*) FROM products WHERE price >= 180,Compute the number of products with a price larger than or equal to $180.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC","Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code,"What is all the product data, as well as  each product's manufacturer?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products WHERE manufacturer  =  2,Compute the average price of all products with manufacturer code equal to 2.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer","What are the average prices of products, grouped by manufacturer code?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM products,Select the names of all the products in the store.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter",How many different products are produced in each headquarter city?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products",What are the names and prices of all products in the store?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',What is the headquarter of the company whose founder is James?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","What are the average prices of products, grouped by manufacturer name?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name  =  'Sony',Return the founder of Sony.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",How many products are there for each manufacturer?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin',Find the total revenue created by the companies whose headquarter is located at Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","What are the names, headquarters and founders of the company with the highest revenue?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1",Select the name and price of the cheapest product.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1",What is the name and price of the cheapest product?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT AVG(price) FROM products,Compute the average price of all the products.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Find the average prices of all products from each manufacture, and list each company's name.","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name",What are the average prices of products for each manufacturer?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM products,What are the names of all products?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers),Find the name of companies whose revenue is greater than the average revenue of all companies.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',Where is the headquarter of the company founded by James?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing',How many manufacturers have headquarters in either Tokyo or Beijing?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter",What are the names and revenues of the companies with the highest revenues in each headquarter city?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150",Select the names of manufacturer whose products have an average price higher than or equal to $150.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Find the number of products for each manufacturer, showing the name of each company.","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150,What are the names of companies with revenue between 100 and 150?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products WHERE price BETWEEN 60 AND 120,Find all information of all the products with a price between $60 and $120.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC","What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code,Select all the data from the products and each product's manufacturer.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150,Find the name of companies whose revenue is between 100 and 150.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy',How many companies were created by Andy?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter",Find the number of different products that are produced by companies at different headquarter cities.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony',Find the name of product that is produced by both companies Creative Labs and Sony.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder",What is the total revenue of companies started by founder?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter",Find the name and revenue of the company that earns the highest revenue in each city.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT * FROM products WHERE price BETWEEN 60 AND 120,What is all the information of all the products that have a price between 60 and 120?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT code ,  name ,  MIN(price) FROM products GROUP BY name",What are the codes and names of the cheapest products in each category?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT code ,  name ,  MIN(price) FROM products GROUP BY name",Select the code of the product that is cheapest in each product category.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150",What are the names and average prices of products for manufacturers whose products cost on average 150 or more?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name",Find the total revenue for each manufacturer.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers","Return the average, maximum, and total revenues across all manufacturers.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT AVG(price) FROM products WHERE manufacturer  =  2,What is the average price of products with manufacturer codes equal to 2?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","For each manufacturer name, what are the names and prices of their most expensive product?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","Find the name, headquarter and founder of the manufacturer that has the highest revenue.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC","Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC","What are the names and headquarters of all manufacturers, ordered by revenue descending?","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony'),How many products are not made by Sony?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive',Find the name of companies that do not make DVD drive.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC","What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT DISTINCT headquarter FROM manufacturers,What are the different cities listed?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
manufactory_1,SELECT founder FROM manufacturers WHERE name LIKE 'S%',Find the founder of the company whose name begins with the letter 'S'.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT COUNT(*) FROM products WHERE price >= 180,How many products have prices of at least 180?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers),What are the names of manufacturers with revenue greater than the average of all revenues?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive',What are the names of companies that do not make DVD drives?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony'),Find number of products which Sony does not make.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer","Select the average price of each manufacturer's products, showing only the manufacturer's code.","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name","Select the average price of each manufacturer's products, showing the manufacturer's name.","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
game_1,SELECT SUM(gamesplayed) FROM sportsinfo,How many games are played for all students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname",How many students play each sport?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  ""Football""",What are the ids of all male students who do not play football?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  ""David"" AND t2.lname  =  ""Shieber""",Show total hours per week and number of games played for student David Shieber.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM student WHERE advisor  =  1121,Show ids for all students who have advisor 1121.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1,Which game type has most number of games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid",Show all student ids and the number of hours played.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo,Show student ids who don't have any sports.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM sportsinfo,How many different students are involved in sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2,What are the advisors,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM plays_games,How many different students play games?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20",Show total hours per week and number of games played for students under 20.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20",What is the total number of hours per week and number of games played by students under 20?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  ""football""",What are the ids of all female students who play football?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gtype FROM video_games WHERE gname  =  ""Call of Destiny""",What is the type of video game Call of Destiny.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1,What type has the most games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000,Show all game names played by at least 1000 hours.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid",Show all game ids and the number of hours played.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT gname ,  gtype FROM video_games ORDER BY gname",Show all video games and their types in the order of their names.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo,What are the ids of all students who don't play sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  ""Smith"" AND t3.fname  =  ""Linda""",What are the names of all games played by Linda Smith?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games,Show ids of students who don't play video game.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  ""David"" AND t2.lname  =  ""Shieber""",What is the total number of hours per work and number of games played by David Shieber?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT fname FROM student WHERE major  =  600,Show first name for all students with major 600.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10,What are the student IDs for everybody who worked for more than 10 hours per week on all sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1,What is the name of the game that has been played the most?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',List ids for all student who are on scholarship.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  ""Football"" OR t1.sportname  =  ""Lacrosse""",What is the first and last name of all students who play Football or Lacrosse?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1",What is the first and last name of the student who played the most sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  ""Football""",Show all male student ids who don't play football.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major","Show the average, minimum, and maximum age for different majors.","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT fname FROM student WHERE major  =  600,What are the first names for all students who are from the major numbered 600?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Call of Destiny"" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Works of Widenius"")",Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gtype FROM video_games WHERE gname  =  ""Call of Destiny""",What type of game is Call of Destiny?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid",Show all student IDs with the number of sports and total number of games played,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',What are the ids for all sporty students who are on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  ""Football"" OR t1.sportname  =  ""Lacrosse""",Find the last and first name of students who are playing Football or Lacrosse.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',What are the student ids for those on scholarship in major number 600?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",What is the total number of all football games played by scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y',Show student ids who are on scholarship and have major 600.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games,Show ids of students who play video game and play sports.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT SUM(gamesplayed) FROM sportsinfo,What is the total number of games played?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT COUNT(*) FROM video_games,How many video games exist?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1,Which sport has most number of students on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname",Show all sport name and the number of students.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT gname ,  gtype FROM video_games ORDER BY gname",What are the names of all the video games and their types in alphabetical order?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10,Show all student IDs with more than total 10 hours per week on all sports played.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT stuid FROM student WHERE city_code  =  ""CHI""",Show ids for all students who live in CHI.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid",What are ids and total number of hours played for each game?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  ""Smith"" AND t3.fname  =  ""Linda""",Show all game names played by Linda Smith,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Call of Destiny"" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  ""Works of Widenius"")",what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gname FROM video_games WHERE gtype  =  ""Collectible card game""",What are the names of all video games that are collectible cards?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gname FROM video_games WHERE gtype  =  ""Collectible card game""",Show all video games with type Collectible card game.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT COUNT(DISTINCT gtype) FROM video_games,How many video game types exist?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT COUNT(DISTINCT gtype) FROM video_games,What is the count of different game types?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT COUNT(*) FROM video_games,How many video games do you have?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT COUNT(*) FROM video_games WHERE gtype  =  ""Massively multiplayer online game""",How many video games have type Massively multiplayer online game?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",How many games are played for all football games by students on scholarship?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,"SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1",What is the first name and last name of the student who have most number of sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT COUNT(*) FROM video_games WHERE gtype  =  ""Massively multiplayer online game""",Count the number of video games with Massively multiplayer online game type .,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games,What are the ids of all students who are not video game players?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y',Show last names for all student who are on scholarship.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid FROM student WHERE city_code  =  ""CHI""",What are the ids of all students who live in CHI?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT sportname) FROM sportsinfo,How many different types of sports do we offer?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1,Show the game name that has most number of hours played.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  ""football""",Show student ids who are female and play football.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1,What is the type with the fewest games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000,What are the names of all the games that have been played for at least 1000 hours?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT stuid FROM student WHERE advisor  =  1121,What are the ids of all students who have advisor number 1121?,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1,What is the sport with the most scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games,What are the ids of all students who played video games and sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y',What are the last names for all scholarship students?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT DISTINCT gtype FROM video_games,Show all video game types.,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  ""Football"" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  ""Lacrosse"")",Find the first name and age of the students who are playing both Football and Lacrosse.,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2,Show all advisors who have at least two students.,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT COUNT(DISTINCT sportname) FROM sportsinfo,How many sports do we have?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM sportsinfo,How many students play sports?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code  =  ""ORG""",Return the description of the budget type that has the code ORG.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_code ,  budget_type_description FROM ref_budget_codes",List all budget type codes and descriptions.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT project_id ,  project_details FROM projects",What are the ids and details for each project?,"CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT statement_id ,  COUNT(*) FROM accounts GROUP BY statement_id",Show all statement id and the number of accounts for each statement.,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses,Return the ids of documents that do not have expenses.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*)  <  3,Show the document type code with fewer than 3 documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT project_id ,  project_details FROM projects",List ids and details for all projects.,"CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code WHERE t2.budget_type_description  =  ""Government""",Show ids for all documents with budget types described as 'Government'.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses ),Count the number of documents that do not have expenses.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  COUNT(*) FROM documents GROUP BY document_type_code",How many documents are there of each type?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*)  <  3,What are the codes corresponding to document types for which there are less than 3 documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_code ,  COUNT(*) FROM documents_with_expenses GROUP BY budget_type_code","What are the different budget type codes, and how many documents are there for each?","CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.project_id ,  t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id GROUP BY t1.project_id HAVING COUNT(*)  >  2",Return the ids and details corresponding to projects for which there are more than two documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM accounts,How many accounts do we have?,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_id ,  t2.statement_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT(*) DESC LIMIT 1",Show the statement id and the statement detail for the statement with most number of accounts.,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'GV' INTERSECT SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'SF',What are the dates for the documents with both 'GV' type and 'SF' type expenses?,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT statement_id ,  statement_details FROM statements",What are the ids and details of all statements?,"CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t2.budget_type_code ,  t2.budget_type_description ,  t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code",Show the budget type code and description and the corresponding document id.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code  =  ""ORG""",What is the description for the budget type with code ORG?,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT project_id ,  COUNT(*) FROM documents GROUP BY project_id",How many documents correspond with each project id?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1,Give the budget type code that is most common among documents with expenses.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT t1.document_id FROM documents as t1 JOIN documents_with_expenses as t2 ON t1.document_id  =  t2.document_id WHERE t1.document_name LIKE '%s%',Give the ids of documents that have expenses and contain the letter s in their names.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_details ,  t2.document_name FROM statements as t1 JOIN documents as t2 ON t1.statement_id  =  t2.document_id WHERE t1.statement_details  =  'Private Project'","What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?","CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id WHERE t2.document_name  =  ""King Book""",Give the details of the project with the document name 'King Book'.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT account_id ,  account_details FROM accounts",Show all account ids and account details.,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  document_type_name ,  document_type_description FROM ref_document_types","What are the codes, names, and descriptions of the different document types?","CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  COUNT(*) FROM documents GROUP BY document_type_code",List document type codes and the number of documents in each code.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_description FROM ref_document_types WHERE document_type_name  =  ""Film""",What is the document type description for document type named Film?,"CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_description FROM ref_document_types WHERE document_type_name  =  ""Film""",Return the description of the document type name 'Film'.,"CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT MAX(account_details) FROM accounts UNION SELECT account_details FROM accounts WHERE account_details LIKE ""%5%""",What are the account details with the largest value or with value having char '5' in it?,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code WHERE t2.budget_type_description  =  ""Government""",Give the ids for documents that have the budget description 'Government'.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_id FROM documents WHERE document_type_code  =  ""CV"" EXCEPT SELECT document_id FROM documents_with_expenses",Show ids for all documents in type CV without expense budgets.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_type_code FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1,What is the document type code with most number of documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT COUNT(*) ,  project_id FROM documents WHERE document_type_code  =  ""BK"" GROUP BY project_id",Count the number of documents with the type code BK that correspond to each product id.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id WHERE t2.document_name  =  ""King Book""","What is the project detail for the project with document ""King Book""?","CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_type_code FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1,Return the code of the document type that is most common.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT project_id FROM documents GROUP BY project_id HAVING COUNT(*)  >=  2,Show the ids for projects with at least 2 documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1,What is the budget type code with most number of documents.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_name ,  document_date FROM documents as t1 JOIN projects as t2 ON t1.project_id  =  t2.project_id WHERE t2.project_details  =  'Graph Database project'",Show the document name and the document date for all documents on project with details 'Graph Database project'.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT COUNT(*) ,  project_id FROM documents WHERE document_type_code  =  ""BK"" GROUP BY project_id",How many documents are with document type code BK for each product id?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT account_id ,  account_details FROM accounts",What are the ids and details of all accounts?,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_id ,  t2.statement_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT(*) DESC LIMIT 1",What are the statement id and statement detail for the statement that has the most corresponding accounts?,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'GV' INTERSECT SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'SF',Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_code ,  budget_type_description FROM ref_budget_codes",What are the type codes and descriptions of each budget type?,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1,What is the id of the project with least number of documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses ),How many documents do not have any expense?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  document_name ,  document_description FROM documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'","List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.","CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_id ,  document_name FROM documents",What are the ids and names for each of the documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT MAX(account_details) FROM accounts UNION SELECT account_details FROM accounts WHERE account_details LIKE ""%5%""","Return the account details with the greatest value, as well as those that include the character 5.","CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_id ,  document_name FROM documents",Show the ids and names of all documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM accounts,Count the number of accounts.,"CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_name ,  document_date FROM documents as t1 JOIN projects as t2 ON t1.project_id  =  t2.project_id WHERE t2.project_details  =  'Graph Database project'",What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_id FROM documents_with_expenses WHERE budget_type_code  =  'SF',Give the ids of documents with expenses that have the budget code 'SF'.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents_with_expenses,Count the number of documents with expenses.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM projects,Show the number of projects.,"CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.document_type_name ,  t1.document_type_description ,  t2.document_date FROM ref_document_types as t1 JOIN documents as t2 ON t1.document_type_code  =  t2.document_type_code","Return the type name, type description, and date of creation for each document.","CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM statements,How many statements do we have?,"CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT statement_id ,  statement_details FROM statements",List all statement ids and statement details.,"CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM statements,Count the number of statements.,"CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  document_name ,  document_description FROM documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'","What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?","CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_details ,  t2.document_name FROM statements as t1 JOIN documents as t2 ON t1.statement_id  =  t2.document_id WHERE t1.statement_details  =  'Private Project'",Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.document_type_name ,  t1.document_type_description ,  t2.document_date FROM ref_document_types as t1 JOIN documents as t2 ON t1.document_type_code  =  t2.document_type_code",What is the document type name and the document type description and creation date for all the documents?,"CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_id ,  t2.statement_details ,  t1.account_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id","What are the statement ids, statement details, and account details, for all accounts?","CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM projects,How many projects are there?,"CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents_with_expenses,How many documents have expenses?,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_name ,  document_id FROM documents WHERE document_type_code  =  ""BK""",What are the names and ids of documents that have the type code BK?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t2.budget_type_code ,  t2.budget_type_description ,  t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code","Return the budget type codes, budget type descriptions and document ids for documents with expenses.","CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT project_id ,  COUNT(*) FROM documents GROUP BY project_id",Show project ids and the number of documents in each project.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses,What are the ids of documents which don't have expense budgets?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_id FROM documents WHERE document_type_code  =  ""CV"" EXCEPT SELECT document_id FROM documents_with_expenses",What are the ids of documents with the type code CV that do not have expenses.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT budget_type_code ,  COUNT(*) FROM documents_with_expenses GROUP BY budget_type_code",Show budget type codes and the number of documents in each budget type.,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.statement_id ,  t2.statement_details ,  t1.account_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id","Show statement id, statement detail, account detail for accounts.","CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

CREATE TABLE `Statements` (
  Statement_ID INTEGER REFERENCES Documents(Document_ID),
  Statement_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents,Count the number of documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT project_id FROM documents GROUP BY project_id HAVING COUNT(*)  >=  2,What are project ids of projects that have 2 or more corresponding documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1,Return the id of the project that has the fewest corresponding documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM ref_budget_codes,How many budget types do we have?,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",pldi papers in 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid JOIN author as t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  ""Bacterial Wilt"" AND t4.year  =  2016;",Who wrote on the topic of Bacterial Wilt in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""zachary tatlock"";",citation count of zachary tatlock 's papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",Papers by sharon goldwater,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",Which papers were accepted in pldi 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",Datasets with semantic parsing information,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase as t2 ON t2.paperid  =  t3.paperid JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  ""YAGO"" AND t4.keyphrasename  =  ""Semantic Data"";",What are some papers dealing with Semantic Data in YAGO ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t5.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN writes as t5 ON t5.paperid  =  t4.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Ameet Soni"" AND t1.authorname  =  ""Ras Bodik"";",who else was on the paper with Ameet Soni and Ras Bodik ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT ( t1.paperid )  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  ""ACL"" GROUP BY t1.paperid HAVING COUNT(t3.citingpaperid)  >  7;",how many ACL 2012 papers have more than 7 citations ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",papers by Liwen Xiong from 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",At which conferences does Daniella Coelho publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",newest deep learning papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",what topics does Luke Zettlemoyer publish in,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",who had papers at acl 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""convolutional neural networks"" AND t3.year  =  2016;",How many papers were published on convolutional neural networks in 2016 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",How many papers has David M. Blei published in AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",how many Parsing papers did acl 2012 have ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",What is the paper about Question Answering ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",What conference does Daniella Coelho publish in ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""RGB-D Object Dataset"" AND t3.title  =  ""Class consistent multi-modal fusion with binary features"" AND t3.year  =  2016 AND t4.venuename  =  ""CVPR"";",What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",papers in chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid JOIN author as t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  ""Bacterial Wilt"" AND t4.year  =  2016;",What authors wrote papers about Bacterial Wilt in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Samuel Madden"" AND t4.venuename != ""PVLDB"";",How many papers does Samuel Madden publish outside of PVLDB area ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What is the paper about parsing of the most citation ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ali farhadi"" AND t3.year  =  2016 AND t4.venuename  =  ""eccv"";",papers of ali farhadi in eccv 2016,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",Papers about chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",How many citations does noah a smith has ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",TAIL papers in NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",what are the papers that have Peter Mertens and Dina Barbian as co-authors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.journalid FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""linda shapiro"";",Which journals did linda shapiro submit papers to ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `journal` (
  journalId INTEGER,
  journalName varchar(100)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",what paper has Richard Ladner published in chi journal ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,SELECT DISTINCT paperid FROM paper WHERE year  =  2014;,papers from 2014,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",convolution papers by brian curless,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""NIPS"";",NIPS authors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",papers that used WebKB,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",Who is a coauthor with Noah A Smith ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",give me the keywords used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who wrote the most papers on syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""sigcomm"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citingpaperid) DESC;",What is the most cited paper at sigcomm ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",What is the latest paper by oren etzioni ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",most cited papers on parsing,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",papers by Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,SELECT DISTINCT t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;,who wrote papers in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers that are coauthored by Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",top author in syntactic parsing,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What is the most recent paper of deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ali farhadi"" AND t3.year  =  2016 AND t4.venuename  =  ""eccv"";",papers published in eccv 2016 by ali farhadi,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""RGB-D Object Dataset"" AND t3.title  =  ""Class consistent multi-modal fusion with binary features"" AND t3.year  =  2016 AND t4.venuename  =  ""CVPR"";",What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers used ImageNet dataset ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",pldi papers 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",number of papers written by Christopher D. Manning,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""ACL"" GROUP BY t1.authorid;",number of ACL papers by author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers published in nature communications in 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Does Peter Mertens ever collaborated with Dina Barbian ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT(t2.paperid)  >=  5;",authors with at least 5 papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",who wrote the most papers for CVPR 2007,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""sigir"";",number of papers in sigir conference,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" GROUP BY t3.year ORDER BY t3.year asC;",What was the first paper on deep learning written ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.title FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Donald E Knuth"";",What are all the publication titles by Donald E Knuth ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Michael Stonebraker"" AND t5.keyphrasename  =  ""GIS Database"";",When does Michael Stonebraker publish the GIS Database paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",pldi 2015 list of papers,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",Most recent deep learning conference ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""sigir"";",how many papers does sigir have ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",how many papers are based on ImageNet,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",Who are the authors with the most published papers in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",which papers has sharon goldwater written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers that mention Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"";",How many papers are about deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Ye Cao"" GROUP BY t3.year ORDER BY COUNT(DISTINCT t3.paperid) DESC;",What year did Ye Cao publish the most papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What are some recent papers written in deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",What were the papers published at pldi 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""oren etzioni"";",who does oren etzioni cite,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"";",how many papers about deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets used for semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",What topic does Luke Zettlemoyer write about ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT paperid FROM paper WHERE year != 2015;,papers that were not published in the last year,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.year  ,  t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Michael Armstrong"" AND t3.year LIKE ""199"";",What paper did Michael Armstrong wrote in the 90s ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",papers published in 2015 by Liwen Xiong,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""deep reinforcement learning"" AND t4.venuename  =  ""nips"";",How many papers related to deep reinforcement learning in nips ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""NIPS"";",who authored papers at NIPS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Papers authored by Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",how many papers does David M. Blei have in AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Takashi Matsumoto"" GROUP BY t3.journalid;",What journals has Takashi Matsumoto published in ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paper as t2 JOIN journal as t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  ""Academic radiology"" AND t2.year  =  1995;",what papers were published in Academic radiology in 1995 ?,"CREATE TABLE `journal` (
  journalId INTEGER,
  journalName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT COUNT(t3.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""ras bodik"";",does ras bodik publish a lot ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 on Parsing,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""sanjeev arora"" ORDER BY t3.year DESC;",recent papers written by sanjeev arora,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t5.citingpaperid) FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN cite as t5 ON t3.paperid  =  t5.citedpaperid JOIN writes as t4 ON t4.paperid  =  t5.citingpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""michael i. jordan"" AND t1.authorname  =  ""dan klein"";",how many of dan klein 's papers cite michael i. jordan,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",papers in pldi 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers coauthored by Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who has written the most syntactic parsing papers ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""ACL"" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  >  2;",Number of ACL papers with more than 2 citations,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Question Answering papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",Who are Noah A Smith 's coauthors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Peter Mertens and Dina Barbian as co-authors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,SELECT DISTINCT paperid FROM paper WHERE year  =  2014;,2014 papers,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Have Peter Mertens and Dina Barbian written a paper together ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT venueid FROM venue WHERE venuename  =  ""Neuroscience"";",What venues are for Neuroscience ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers was published in nature communications in 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Papers written by Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",papers by sharon goldwater,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",Current research on deep learning,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT venueid FROM paper WHERE year  =  2013;,conferences in 2013,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",List papers that has keyword Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers before 2010,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",in what conferences does Daniella Coelho publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",how many papers does David M. Blei have at AISTATS,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"";",How many papers are in deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""ACL"";",number of papers published in ACL 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",What papers were written by authors Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  ""Jeopardy! Questions"" AND t1.keyphrasename  =  ""Parsing"" AND t2.year  =  2014 AND t6.venuename  =  ""ACL"";",which ACL 2014 papers about Parsing used Jeopardy! Questions ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""jamie callan"" GROUP BY t3.year;",How many papers does jamie callan publish each year ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""ACL"" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;",what papers have fewer than 5 citations by ACL papers,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets in semantic parsing papers,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",keyphrases by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite as t5 ON t2.paperid  =  t5.citingpaperid JOIN paper as t3 ON t3.paperid  =  t5.citedpaperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Euclidean Distance"" AND t4.venuename  =  ""NIPS"";",Euclidean Distance papers citing NIPS papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""semantic parsing"" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who has the most papers in semantic parsing after 2005 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""ACL"" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;",what ACL papers have less than 5 citations ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Trophic Cascade"";",conferences for Trophic Cascade,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""ACL"";",How many papers in ACL 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Michael Stonebraker"" AND t5.keyphrasename  =  ""GIS Database"";",When did Michael Stonebraker publish his GIS Database paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""semantic parsing"" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who has written the most papers on semantic parsing since 2005 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",How many citations does noah a smith have,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""NIPS"" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;",when were most NIPS papers published ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  ""EMNLP"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;",most cited EMNLP 2010 papers,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",semantic parsing dataset,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t5.citingpaperid) FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN cite as t5 ON t3.paperid  =  t5.citedpaperid JOIN writes as t4 ON t4.paperid  =  t5.citingpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""michael i. jordan"" AND t1.authorname  =  ""dan klein"";",how many papers by dan klein are cited by michael i. jordan,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",Who has coauthored with Noah A Smith ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who has the most publications in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",What is the paper about convolution from brian curless ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",how many papers appeared at nature communications last year,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What are the latest publications on deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",pldi best paper award 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",list papers that used Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",most recent papers by oren etzioni,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Peter Mertens"";",Where does Peter Mertens publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  ""ACL"";",datasets mentioned at ACL,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",brian curless convolution paper,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",what keywords are used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",papers from pldi 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",list papers published in chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",What are the papers of Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",parsing papers that have the most citations,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",Papers on WebKB,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christof Dallermassl"" AND t3.year  =  2000;",keyphrases Christof Dallermassl used in papers written last year,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Multiuser Receiver in the Decision Feedback"" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT(DISTINCT t1.keyphrasename)  >  1;",How many papers were written on Multiuser Receiver in the Decision Feedback this year ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who published the most in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",what paper did Peter Mertens and Dina Barbian write together ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""ACL"";",ACL papers by author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",What papers did Liwen Xiong publish last year ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citingpaperid)  ,  t3.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN writes as t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  ""Daniel A Reed"" GROUP BY t3.authorid ORDER BY COUNT(t4.citingpaperid) DESC;",Who cites Daniel A Reed the most,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""li dong"" AND t3.year  =  2016;",Where did li dong publish in 2016,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",what datasets were used by jitendra malik ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers written on ImageNet ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",Most cited papers on parsing,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",how many papers in nature communications 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",who wrote the most CVPR papers in 2007,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""monte carlo simulation"" AND t3.year  >  2011;",monte carlo simulation papers published after 2011,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""dependent types"";",top dependent types papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",Does brian curless do convolution ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",co-authors of Noah A Smith,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers related to Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  ""Mirella Lapata"";",how many papers does Mirella Lapata cite,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",coauthors of Noah A Smith,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  ""deep learning"" ORDER BY t4.year asC;",what was the first deep learning paper ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",Who are Noah A Smith 's co-authors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != ""chris dyer"" AND t5.keyphrasename  =  ""syntactic parsing"";",what are syntactic parsing papers not written by chris dyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",number of citations of noah a smith,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What are recent papers on deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",brian curless 's papers on convolution,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Which papers are about about Question Answering ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Papers published in 2015 by Liwen Xiong,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",What conferences does Daniella Coelho submit to ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers were at nature communications 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Daniel Jurafsky"";",citations for Daniel Jurafsky,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Luke S Zettlemoyer"" ORDER BY t3.year;",When did Luke S Zettlemoyer publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE ""the effects of juicing for cancer patients"" AND year  >  2006;",What articles have been published since 2006 about the effects of juicing for cancer patients ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",List of authors in acl 2016,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE ""sensor fusion"";",people working on sensor fusion,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",Who are Noah A Smith 's coauthors ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",most popular topics at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""ImageNet"" AND t3.year  =  2014;",2014 papers using ImageNet,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE ""sensor fusion"";",who publishes papers about sensor fusion,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",papers about Parsing in acl 2012,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",Who published the most papers in 2007 at CVPR ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christof Dallermassl"" AND t3.year  =  2000;",What are keyphrases by Christof Dallermassl in 2000 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Trophic Cascade"";",venue for Trophic Cascade,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphrasename  ,  SUM(t3.numcitedby) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Brian DeRenzi"" GROUP BY t1.keyphrasename ORDER BY SUM(t3.numcitedby) DESC;",what keyphrase does Brian DeRenzi write about that gets most citations ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  ""Mirella Lapata"";",how many papers has Mirella Lapata cited ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",keywords used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""ImageNet"" AND t3.year  =  2014 AND t4.venuename  =  ""eccv"";",the papers at eccv in 2014 using ImageNet dataset,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",convolution paper by brian curless,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""subhasis chaudhuri"";",conference papers of subhasis chaudhuri,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",How many papers does David M. Blei have in AISTATS,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",how many papers published in nature communications 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""convolutional neural networks"" AND t3.year  =  2016;",how many papers on convolutional neural networks have been published in the past year ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""jamie callan"" ORDER BY t3.year;",jamie callan 's publications by year,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",How many citation noah a smith has ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",keyphrases used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",what are the collaborations of Peter Mertens and Dina Barbian ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",papers about character recognition from before 2010,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",what papers did chi publish ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  ""Ed Desmond"" AND t4.keyphrasename  =  ""Semantic Parsing"";",How many paper has Ed Desmond written about Semantic Parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Temporal Data"" GROUP BY t3.journalid;",List the journals related to Temporal Data,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",What did Liwen Xiong published in 2015 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  ""Ed Desmond"" AND t4.keyphrasename  =  ""Semantic Parsing"";",How many Semantic Parsing papers has Ed Desmond written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT paperid FROM paper WHERE title  =  ""machine networks for one shot learning"";",machine networks for one shot learning,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  ""Mirella Lapata"";",How many papers did Mirella Lapata cite ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",brian curless 's paper about convolution,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",What is oren etzioni 's latest paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  ""Ed Desmond"" AND t4.keyphrasename  =  ""Semantic Parsing"";",How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christof Dallermassl"" AND t3.year  =  2000;",Keyphrases used by Christof Dallermassl in 2000,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",What papers has Liwen Xiong written in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",How many papers David M. Blei has in AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",papers published at pldi 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who is the most published author in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",topics used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",In which conferences does Daniella Coelho typically publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""parsing"" AND t3.year  =  2014 AND t4.venuename  =  ""ACL"";",how many parsing papers in ACL 2014,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers with Question Answering in keyphrases,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",What has Richard Ladner published at chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many papers has Christopher D. Manning written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""convolutional neural networks"" AND t3.year  =  2016;",How many papers were written on convolutional neural networks in the past year ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",Papers about TAIL in NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.title FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN paper as t3 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE ""Ranjit Jhala"" AND t5.keyphrasename  =  ""Liquid Haskell"";",What is the name of Ranjit Jhala 's Liquid Haskell paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != ""chris dyer"" AND t5.keyphrasename  =  ""syntactic parsing"";",what are some syntactic parsing papers that chris dyer did not write ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""NLP"" GROUP BY t3.venueid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;",What are the best NLP conferences ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",List top papers for parsing,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christof Dallermassl"" AND t3.year  =  2000;",keyphrases used by Christof Dallermassl in 2000,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""sergey levine"" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;",Where did sergey levine publish his last paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",topics popular at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",Parsing papers from acl 2012,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  ""Jeopardy! Questions"" AND t1.keyphrasename  =  ""Parsing"" AND t2.year  =  2014 AND t6.venuename  =  ""ACL"";",Parsing papers from ACL 2014 using Jeopardy! Questions,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Trophic Cascade"";",What was the conference name that approved Trophic Cascade ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Trophic Cascade"";",what conferences are related to Trophic Cascade,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  ""parsing"";",papers typically cited by parsing papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""ACL"" GROUP BY t1.authorid;",how many ACL papers by author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",data sets for semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Daniel Jurafsky"";",Which papers cite Daniel Jurafsky ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citingpaperid)  ,  t3.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN writes as t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  ""Daniel A Reed"" GROUP BY t3.authorid ORDER BY COUNT(t4.citingpaperid) DESC;",Who cites Daniel A Reed most ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",who published at acl 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",what datasets did jitendra malik use in his papers ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  ""EMNLP"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;",Which paper from EMNLP 2010 was cited most ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Papers about Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers were published in nature communications 2015 conference ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""sigir"";",how many papers are published in sigir ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != ""chris dyer"" AND t5.keyphrasename  =  ""syntactic parsing"";",are there any syntactic parsing papers not written by chris dyer ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",what papers are published by Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  ""Jeopardy! Questions"" AND t1.keyphrasename  =  ""Parsing"" AND t2.year  =  2014 AND t6.venuename  =  ""ACL"";",Parsing papers using Jeopardy! Questions published at ACL 2014,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",What papers has Richard Ladner written at chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""Artificial Intelligence"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citingpaperid) DESC;",Fetch me the most cited publications for Artificial Intelligence,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",who published Parsing papers at acl 2012,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",papers on Parsing appeared at acl in 2012,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",Papers authored by sharon goldwater,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",most published author at CVPR 2007,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""michael i. jordan"" AND t3.year  =  2016;",How many papers did michael i. jordan publish in 2016,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE ""sensor fusion"";",Who publishes in sensor fusion ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""NIPS"";",who has papers at NIPS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""semantic parsing"" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who published the most in semantic parsing after 2005 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Pedro Domingos"" GROUP BY t3.year;",In what years did Pedro Domingos publish a paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",What papers have been written by both Peter Mertens and Dina Barbian ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",noah a smith citation count,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who writes papers with Noah A Smith ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""jamie callan"" GROUP BY t3.year;",number of papers by year from jamie callan,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""ImageNet"";",conferences that mention ImageNet,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers by Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",what kind of papers does Luke Zettlemoyer publish,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorname  ,  COUNT(t3.citingpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT(t3.citingpaperid) DESC;",what author is most cited ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t4 ON t4.paperid  =  t2.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  ""ImageNet"" GROUP BY t3.paperid ORDER BY COUNT(t4.paperid) DESC;",top authors working on ImageNet ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",Show me some recent papers on deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",What papers were published in acl in 2012 about Parsing ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",Papers written by sharon goldwater,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""monte carlo simulation"" AND t3.year  >  2011;",monte carlo simulation papers since 2011,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Peter Mertens"";",in what venues does Peter Mertens publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",papers before 2010 about character recognition,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",datasets used in papers written by jitendra malik ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT paperid FROM paper WHERE title  =  ""machine networks for one shot learning"";",List all academic papers on machine networks for one shot learning,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",What papers have been written by Peter Mertens and Dina Barbian .,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers published in the area of Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""parsing"" AND t3.year  =  2014 AND t4.venuename  =  ""ACL"";",how many parsing papers were published at ACL 2014 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",what is the most cited paper of ohad shamir ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",large-scale datasets used in semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase as t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  ""Cell"" AND t3.year  =  2015;",How many publications were added to the Cell journal this year ?,"CREATE TABLE `journal` (
  journalId INTEGER,
  journalName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets used for evaluating semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers were published in nature communications in 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ali farhadi"" AND t3.year  =  2016 AND t4.venuename  =  ""eccv"";",Does ali farhadi have a paper in eccv in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",Paper on parsing with most citations,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",papers brian curless wrote about convolution,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Takashi Matsumoto"" GROUP BY t3.journalid;",In what scholarly journals does Takashi Matsumoto publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Daniel Jurafsky"";",What papers cite Daniel Jurafsky ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""mohammad rastegari"" AND t3.journalid  >=  0;",journal articles by mohammad rastegari,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""oren etzioni"";",what papers does oren etzioni cite,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",what papers are published in pldi 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Fetch me some papers on Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",authors who collaborated with Noah A Smith,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many papers has Christopher D. Manning published ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""dependent types"";",List the popular publications on dependent types,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != ""chris dyer"" AND t5.keyphrasename  =  ""syntactic parsing"";",syntactic parsing papers not written by chris dyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Michael Stonebraker"" AND t5.keyphrasename  =  ""GIS Database"";",When was Michael Stonebraker GIS Database published ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE ""neural attention"" AND t1.year  =  2016 AND t2.venuename  =  ""ACL"";",ACL papers in 2016 with neural attention in the title,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",which topics were most popular at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",List papers that has a keyword Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  ""CVPR"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citingpaperid) DESC;",What is the most popular paper this year in CVPR ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  ""Ed Desmond"" AND t4.keyphrasename  =  ""Semantic Parsing"";",How many papers does Ed Desmond have in Semantic Parsing area ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Pedro Domingos"" GROUP BY t3.year;",What years did Pedro Domingos publish papers in ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",What papers were published at acl in 2012 were about Parsing ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",How many papers does David M. Blei have in AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid JOIN cite as t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;",how is the most cited author in CVPR ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What is the highest cited paper by ohad shamir ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",Datasets by jitendra malik,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",who published the most papers in CVPR 2007,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",what datasets are used in papers by jitendra malik,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",Papers that use the WebKB dataset,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",latest deep learning papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",Latest paper by oren etzioni,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""chi"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;",Who has written the most papers at chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",What are the papers from pldi 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",what datasets did jitendra malik use ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",parsing top papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""subhasis chaudhuri"";",list papers by subhasis chaudhuri,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""li dong"" AND t3.year  =  2016;",Where did li dong publish in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Mirella Lapata"" ORDER BY t3.year DESC LIMIT 5;",What are the 5 most recent papers of Mirella Lapata ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",papers about TAIL published at NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",list datasets for semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT COUNT(DISTINCT paperid) FROM paper;,How many papers are there ?,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",papers on Parsing appeared at acl last year,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",How many citations does noah a smith have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.year FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Michael Stonebraker"" AND t4.venuename  =  ""VLDB"" ORDER BY t3.year;",When does Michael Stonebraker publish the first VLDB paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",Papers from pldi 2015 conference,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"";",How many papers are related to deep learning ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many papers does Christopher D. Manning have,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Question Answering experiments,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",what paper has Richard Ladner published in chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",WebKB papers,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers written by authors Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""Neutralizing Antibody"" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",Who are the prominent researchers in Neutralizing Antibody in 2012 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid) FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase as t1 ON t4.paperid  =  t1.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  ""ImageNet"" AND t5.keyphrasename  =  ""deep learning"";",How many papers related to deep learning cited the dataset ImageNet ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering this year ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",What papers has sharon goldwater written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",top syntactic parsing author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid) FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  ""sigcse"";",How many authors published at sigcse in 2010 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",what are the papers in NIPS about TAIL ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",What papers have Peter Mertens and Dina Barbian written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",acl 2016 authors,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t2.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""mirella lapata"" AND t3.year  =  2016 GROUP BY t2.authorid;",Has mirella lapata written any papers in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",popular topics at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""mohammad rastegari"" AND t3.journalid  >=  0;",Journal Papers by mohammad rastegari,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Papers from Liwen Xiong in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  ""Jeopardy! Questions"" AND t1.keyphrasename  =  ""Parsing"" AND t2.year  =  2014 AND t6.venuename  =  ""ACL"";",papers about Parsing that used Jeopardy! Questions and were published at ACL 2014,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",author who wrote papers with Noah A Smith,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",papers on TAIL NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",papers that use WebKB,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT title  ,  year FROM paper WHERE title  =  ""A Switching Architecture For ISDN"";","What is the year of publication of "" A Switching Architecture For ISDN "" ?","CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.citingpaperid)  ,  t1.paperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  ""TACL"" GROUP BY t1.paperid ORDER BY COUNT(DISTINCT t3.citingpaperid) DESC;",best paper in TACL 2014 ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""ameet soni"" GROUP BY t3.year ORDER BY t3.year;",When did ameet soni publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers for Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers on nature communications in 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""chi"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;",who published the most at chi,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",sharon goldwater papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",Which paper did Richard Ladner present at chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.title FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t5.paperid JOIN paper as t2 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid JOIN venue as t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE ""Eric C. Kerrigan"" AND t3.keyphrasename  =  ""Liquid"" AND t6.venuename  =  ""Automatica"";",What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper as t2 ON t2.paperid  =  t5.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""li dong"" AND t3.keyphrasename  =  ""semantic parsing"" AND t2.year  =  2016 AND t6.venuename  =  ""acl"";",the papers on semantic parsing by li dong at acl in 2016,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets in papers about semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""monte carlo simulation"" AND t3.year  >  2011;",monte carlo simulation later than 2011,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",papers by brian curless about convolution,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many papers does Christopher D. Manning have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",What papers has brian curless written about convolution ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""benjamin mako hill"" GROUP BY t3.year ORDER BY t3.year;",When was benjamin mako hill 's first paper written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""ImageNet"" AND t3.year  =  2014 AND t4.venuename  =  ""eccv"";",which papers in eccv 2014 use ImageNet ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers written by Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",Does sharon goldwater have any papers published ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",Has Christopher D. Manning published any papers ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",what were some Parsing based papers in acl 2012 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",How many papers did David M. Blei publish at AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" GROUP BY t3.year ORDER BY t3.year asC;",first deep learning paper,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.journalid FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""linda shapiro"";",in what journals does linda shapiro publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `journal` (
  journalId INTEGER,
  journalName varchar(100)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",question answering 2016 papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.journalid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Donald E Knuth"" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",which journal did Donald E Knuth publish his last paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who published the most papers in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",List prominent scholars in syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",most common topics at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who does Noah A Smith author with ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",papers about WebKB,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",highly cited parsing papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who does Noah A Smith work with ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Show me Question Answering papers .,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT MAX(t3.year) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Mary Crainie"";",When was the last time Mary Crainie published a paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,SELECT DISTINCT t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;,Which authors published papers in 2015 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t1.authorid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != ""Mark Steedman"" AND t2.paperid IN ( SELECT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Mark Steedman"" );",How many co-authors has Mark Steedman had ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets used by semantic parsing papers,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets with semantic parsing,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE ""sensor fusion"";",Authors of papers on sensor fusion,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many publications does Christopher D. Manning have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",what did sharon goldwater write ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",papers at chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who does Noah A Smith collaborate with ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",Does Richard Ladner publish in chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",papers by authors Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  ""Machine Learning"" GROUP BY t1.authorname ORDER BY COUNT(DISTINCT t3.paperid) DESC;",Who writes a lot of papers in Machine Learning ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""michael i. jordan"" AND t3.year  =  2016;",How many papers does michael i. jordan have in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.keyphrasename  ,  SUM(t3.numcitedby) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Brian DeRenzi"" GROUP BY t1.keyphrasename ORDER BY SUM(t3.numcitedby) DESC;",main topics of work by Brian DeRenzi,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",TAIL papers used in NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  ""EMNLP"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;",which EMNLP 2010 papers have the most citations ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",most cited parsing papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t5.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN cite as t5 ON t4.paperid  =  t5.citedpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Dan Makumbi"" AND t3.keyphrasename  =  ""Genetic Identity"";",How many citations does Dan Makumbi 's Genetic Identity paper have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Luke S Zettlemoyer"" ORDER BY t3.year  ,  t2.keyphraseid;",keyphrases used by Luke S Zettlemoyer for each year,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  ""parsing"";",what papers do parsing papers typically cite ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",What TAIL paper published in NIPS ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",Papers on chi,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",how many David M. Blei papers are in AISTATS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Liwen Xiong publication 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t4.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""deep learning"" GROUP BY t4.venueid ORDER BY COUNT(t3.paperid) DESC;",which venue publishes the most papers about deep learning,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering in 2016 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",What are the papers of brian curless in convolution ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",What papers are authored by sharon goldwater ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid)  ,  t3.year FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""luke zettlemoyer"" GROUP BY t3.year;",How many citations does luke zettlemoyer have per year,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  ""EMNLP"" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;",which EMNLP 2010 papers have been cited the most ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",papers at NIPS related to TAIL,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",sharon goldwater 's papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",List the papers that used WebKB dataset,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",How many times was noah a smith cited ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  ""NIPS"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",hot topics at NIPS 2015,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""sanjeev arora"" ORDER BY t3.year DESC;",recent research interests of sanjeev arora,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  ""ACL"";",what datasets do papers at ACL use most ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",Keyphrases used by Luke Zettlemoyer,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""NIPS"" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;",what year had the most number of NIPS papers ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Show me the papers on Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",papers by Richard Ladner published at chi,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Peter Mertens"";",where does Peter Mertens publish ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  ""ACL"" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;",topics at ACL 2014,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What paper by ohad shamir has the most citation ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Takashi Matsumoto"" GROUP BY t3.journalid;",What journals are Takashi Matsumoto 's articles published in ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""sanjeev arora"" ORDER BY t3.year DESC;",recent papers by sanjeev arora,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >  10;,papers with more than 10 citations,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""li dong"" AND t3.year  =  2016;",What conferences did li dong publish in in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who are all the co-authors of Noah A Smith ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers were accepted at nature communications 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",What has sharon goldwater published ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Daniel Jurafsky"";",papers citing Daniel Jurafsky,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""ImageNet"" AND t4.venuename  =  ""cvpr"";",How many papers used ImageNet datasets in cvpr ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid JOIN writes as t5 ON t5.paperid  =  t3.paperid JOIN author as t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  ""dan klein"" AND t4.venuename  =  ""emnlp"";",keyphrases used by dan klein in his emnlp papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""parsing"" AND t3.year  =  2014 AND t4.venuename  =  ""ACL"";",how many parsing papers appeared in the proceeeding of ACL 2014 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",parsing papers with most citations,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""chi"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;",Who has published more papers in chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers on Question Answering experiments,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",recent deep learning papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  ""uist"";",what keywords are used by papers at uist,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""monte carlo simulation"" AND t3.year  >  2011;",monte carlo simulation papers later than 2011,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""ACL"" GROUP BY t1.authorid;",count of ACL papers by author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",What was oren etzioni 's latest paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""subhasis chaudhuri"";",List of papers by subhasis chaudhuri,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers earlier than 2010,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != ""Noah Smith"" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE ""Noah Smith"" );",How many papers has Noah Smith co-authored since 2009 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""monte carlo simulation"" AND t3.year  >  2011;",are there any monte carlo simulation papers since 2011 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t5.paperid JOIN paper as t2 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid JOIN venue as t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  ""Eric C. Kerrigan"" AND t3.keyphrasename  =  ""Liquid"" AND t6.venuename  =  ""Automatica"";",Eric C. Kerrigan 's Liquid Automatica paper,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",what has Liwen Xiong done in the past year,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM paperkeyphrase as t6 JOIN keyphrase as t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t6.paperid JOIN writes as t5 ON t5.paperid  =  t4.paperid JOIN author as t1 ON t5.authorid  =  t1.authorid JOIN author as t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  ""Philipp Koehn"" AND t3.keyphrasename  =  ""Machine Translation Output"";",I want the co-authors of papers on Machine Translation Output with Philipp Koehn,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""NIPS"";",who publishes in NIPS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Question Answering research papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""jamie callan"" GROUP BY t3.year;",how many papers jamie callan published each year ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""NIPS"" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;",what year had the most NIPS papers ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many papers has Christopher D. Manning ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",show me papers by sharon goldwater .,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;",who has written the most papers on syntactic parsing ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""dependent types"";",Which paper should I read about dependent types ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""NIPS"";",who are the authors at NIPS ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Papers by Peter Mertens and Dina Barbian,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",papers using WebKB,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers from before 2010,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""sigir"";",how many papers are in sigir ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",What papers were published during the conference pldi 2015 ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",what are the parsing papers that have the most citations ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",What papers does Richard Ladner have in chi ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" GROUP BY t3.year ORDER BY t3.year asC;",When was deep learning proposed ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",authors of acl 2016 papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""noah a smith"";",how many citations does noah a smith have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",I want the papers on keyphrase0 by brian curless,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""convolutional neural networks"" AND t3.year  =  2016;",How many papers were written on convolutional neural networks in 2016 ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT journalid FROM paper WHERE year  =  2011 GROUP BY journalid;,List today 's journals,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers on Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Temporal Data"" GROUP BY t3.journalid;",Find journals about Temporal Data .,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN writes as t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  ""ImageNet"" GROUP BY t2.paperid;",authors working on ImageNet,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase as t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  ""Cell"" AND t3.year  =  2015;",How many articles were published in the Cell journal in 2015 ?,"CREATE TABLE `journal` (
  journalId INTEGER,
  journalName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What is the most cited paper by ohad shamir ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 in Parsing,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",semantic parsing datasets,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""subhasis chaudhuri"";",subhasis chaudhuri,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""michael i. jordan"" AND t3.year  =  2016;",How many papers did michael i. jordan publish in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What is ohad shamir 's highest cited paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Which papers have Peter Mertens and Dina Barbian as co-authors ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",how many papers accepted in nature communications 2015,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",What conferences does Daniella Coelho publish in ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""semantic parsing"" GROUP BY t3.year ORDER BY t3.year DESC;",papers in semantic parsing for each year,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >=  5;,papers cited by at least 5 papers,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",Show me chi papers .,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  ""deep learning"" ORDER BY t4.year asC;",what year was the first deep learning paper published ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Su-In Lee"" AND t3.year  <  2012;",Give me the papers written by Su-In Lee before 2012 .,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""oren etzioni"" ORDER BY t3.year DESC;",What are the latest papers by oren etzioni ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",how many papers use ImageNet ?,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""TAIL"" AND t4.venuename  =  ""NIPS"";",List the papers on TAIL that were published in NIPS,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;",who published papers in CVPR 2007,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",What papers have been written by Peter Mertens and Dina Barbian ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Ye Cao"" GROUP BY t3.year ORDER BY COUNT(DISTINCT t3.paperid) DESC;",In what year did Ye Cao publish the most papers,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",new deep learning papers,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",What papers talk about Question Answering ?,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.citingpaperid)  ,  t1.paperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  ""TACL"" GROUP BY t1.paperid ORDER BY COUNT(DISTINCT t3.citingpaperid) DESC;",What was the best paper at TACL 2014 ?,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",What keywords are in papers by Luke Zettlemoyer ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",how many papers does Christopher D. Manning have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers that used Question Answering,"CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
scholar,"SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""ACL"" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;",ACL papers with less than 5 citations,"CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",what is ohad shamir 's most cited paper ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  ""Jeopardy! Questions"" AND t1.keyphrasename  =  ""Parsing"" AND t2.year  =  2014 AND t6.venuename  =  ""ACL"";",Parsing papers from ACL 2014 that used Jeopardy! Questions,"CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

"
school_finance,SELECT COUNT(*) FROM budget WHERE budgeted  >  3000 AND year  <=  2001,Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000,"CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING COUNT(*)  >  1),Find the number of schools that have more than one donator whose donation amount is less than 8.5.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT COUNT(*) FROM school,Count the number of schools.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Glenn' INTERSECT SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Triton',"Show the names of donors who donated to both school ""Glenn"" and ""Triton.""","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT school_name FROM school ORDER BY school_name,Show all school names in alphabetical order.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,"SELECT school_name ,  location ,  mascot FROM school","List the name, location, mascot for all schools.","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,SELECT mascot FROM school WHERE enrollment  >  (SELECT AVG(enrollment) FROM school),What are the mascots for schools with enrollments above the average?,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9,Show the names of all the donors except those whose donation amount less than 9.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,"SELECT t2.school_name ,  t1.budgeted ,  t1.invested FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t1.year  >=  2002","Show each school name, its budgeted amount, and invested amount in year 2002 or after.","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,"SELECT AVG(enrollment) ,  MAX(enrollment) ,  MIN(enrollment) FROM school","Show the average, maximum, minimum enrollment of all schools.","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
school_finance,"SELECT county ,  COUNT(*) ,  SUM(enrollment) FROM school GROUP BY county",Show each county along with the number of schools and total enrollment in each county.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",List the amount and donor name for the largest amount of donation.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT DISTINCT donator_name FROM endowment,Show all donor names.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment),List the names of the schools without any endowment.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT t2.school_name FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id JOIN endowment as t3 ON t2.school_id  =  t3.school_id GROUP BY t2.school_name HAVING SUM(t1.budgeted)  >  100 OR SUM(t3.amount)  >  10,Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,SELECT SUM(t1.budgeted) FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Glenn',"What is the total budget amount for school ""Glenn"" in all years?","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,SELECT COUNT(*) FROM school,How many schools are there?,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,"SELECT donator_name ,  SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC",List each donator name and the amount of endowment in descending order of the amount of endowment.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT school_name FROM school ORDER BY enrollment LIMIT 1,List the name of the school with the smallest enrollment.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
school_finance,SELECT t2.school_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id GROUP BY t1.school_id HAVING SUM(t1.amount)  <=  10,List all the names of schools with an endowment amount smaller than or equal to 10.,"CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,SELECT COUNT(*) FROM budget WHERE budgeted  <  invested,How many budget record has a budget amount smaller than the invested amount?,"CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,SELECT COUNT(*) FROM budget WHERE budgeted  >  3000 AND year  <=  2001,How many budgets are above 3000 in year 2001 or before?,"CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
school_finance,"SELECT COUNT(DISTINCT t1.donator_name) FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  ""Glenn""","How many donors have endowment for school named ""Glenn""?","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

"
school_finance,"SELECT t1.school_name ,  t1.mascot ,  t1.ihsaa_football_class FROM school as t1 JOIN budget as t2 ON t1.school_id  =  t2.school_id WHERE budgeted  >  6000 OR year  <  2003 ORDER BY t2.total_budget_percent_invested ,  t2.total_budget_percent_budgeted","List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.","CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE `budget` (
  School_id INT PRIMARY KEY REFERENCES School(School_id),
  Year INT PRIMARY KEY,
  Budgeted INT,
  total_budget_percent_budgeted REAL,
  Invested INT,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1,Who is the nominee who has been nominated for the most musicals?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  ""The Phantom of the Opera""",What are the names of actors who have been in the musical titled The Phantom of the Opera?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC,Show names of actors in descending order of the year their musical is awarded.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  ""The Phantom of the Opera""","Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".","CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee",How many musicals has each nominee been nominated for?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" INTERSECT SELECT nominee FROM musical WHERE award  =  ""Drama Desk award""",Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2,Who are the nominees who have been nominated more than two times?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT duration FROM actor ORDER BY age DESC LIMIT 1,Return the duration of the actor with the greatest age.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM actor ORDER BY name ASC,"What are the names of actors, ordered alphabetically?","CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3,What are the names of musicals who have at 3 or more actors?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT character ,  duration FROM actor",Return the characters and durations for each actor.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2,List the nominees that have been nominated more than two musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT DISTINCT nominee FROM musical WHERE award != ""Tony award""","What are the distinct nominees of the musicals with the award that is not ""Tony Award""?","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id",Show names of actors and names of musicals they are in.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT name FROM actor ORDER BY name ASC,List the name of actors in ascending alphabetical order.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" OR award  =  ""Cleavant Derricks""",Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT name FROM actor WHERE age != 20,List the name of actors whose age is not 20.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor),List the name of musicals that do not have actors.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT duration FROM actor ORDER BY age DESC LIMIT 1,What is the duration of the oldest actor?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT name FROM actor WHERE age != 20,What are the names of actors who are not 20 years old?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1,Please show the nominee who has been nominated the greatest number of times.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT character FROM actor ORDER BY age DESC,"Return the characters for actors, ordered by age descending.","CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1,List the most common result of the musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id",Show names of musicals and the number of actors who have appeared in the musicals.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor),What are the names of musicals who have no actors?,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT name FROM musical WHERE nominee  =  ""Bob Fosse""","What are the names of musicals with nominee ""Bob Fosse""?","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id",What are the names of actors and the musicals that they are in?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC,What are the names of actors ordered descending by the year in which their musical was awarded?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1,Return the most frequent result across all musicals.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id",How many actors have appeared in each musical?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" INTERSECT SELECT nominee FROM musical WHERE award  =  ""Drama Desk award""","Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award"".","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee",Show different nominees and the number of musicals they have been nominated.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT character FROM actor ORDER BY age DESC,What are the characters of actors in descending order of age?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3,Show names of musicals which have at least three actors.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT character ,  duration FROM actor",What are the characters and duration of actors?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,"SELECT name FROM musical WHERE nominee  =  ""Bob Fosse""",Return the names of musicals who have the nominee Bob Fosse.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2,Return the investors who have invested in two or more entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC,What are the weights of entrepreneurs in descending order of money requested?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT company FROM entrepreneur ORDER BY money_requested DESC,List the companies of entrepreneurs in descending order of money requested.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor",How many entrepreneurs correspond to each investor?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1,Show the company of the tallest entrepreneur.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT name FROM people ORDER BY weight ASC,What are the names of people in ascending order of weight?,"CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1,What is the investor that has invested in the most number of entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1,Which company was started by the entrepreneur with the greatest height?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT AVG(money_requested) FROM entrepreneur,Return the average money requested across all entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur),List the names of people that are not entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1,What is the name of the entrepreneur with the greatest weight?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2,What are the investors that have invested in at least two entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  ""Simon Woodroffe"" OR t1.investor  =  ""Peter Jones""","What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT weight FROM people ORDER BY height ASC LIMIT 1,What is the weight of the shortest person?,"CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur),What are the names of people who are not entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id,What are the names of entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT company ,  investor FROM entrepreneur",What are the companies and investors that correspond to each entrepreneur?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT weight FROM people ORDER BY height ASC LIMIT 1,Return the weight of the shortest person.,"CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1,Return the name of the heaviest entrepreneur.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT name FROM people ORDER BY weight ASC,"Return the names of people, ordered by weight ascending.","CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000,What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT AVG(money_requested) FROM entrepreneur,What is the average money requested by all entrepreneurs?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000,Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1,Return the investor who have invested in the greatest number of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id,Return the names of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT company FROM entrepreneur ORDER BY money_requested DESC,"What are the companies of entrepreneurs, ordered descending by amount of money requested?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT company ,  investor FROM entrepreneur",List the companies and the investors of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85,Give the total money requested by entrepreneurs who are taller than 1.85.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC,"Return the weights of entrepreneurs, ordered descending by amount of money requested.","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != ""Rachel Elnaugh""","What are the names of entrepreneurs whose investor is not ""Rachel Elnaugh""?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  ""Simon Woodroffe"" OR t1.investor  =  ""Peter Jones""",Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != ""Rachel Elnaugh""",Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT COUNT(*) FROM entrepreneur,Count the number of entrepreneurs.,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,"SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested","What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?","CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,"SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested",List the names of entrepreneurs and their companies in descending order of money requested?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT COUNT(*) FROM entrepreneur,How many entrepreneurs are there?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = ""Rock"" OR t3.name = ""MPEG audio file"";",List the name of tracks belongs to genre Rock or media type is MPEG audio file.,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT email ,  phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"";",What is Astrid Gruber's email and phone number?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id = t2.track_id JOIN playlists as t3 ON t3.id = t2.playlist_id WHERE t3.name = ""Movies"";",What are the names of all tracks that are on playlists titled Movies?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id = t2.track_id JOIN playlists as t3 ON t3.id = t2.playlist_id WHERE t3.name = ""Movies"";",List the name of all tracks in the playlists of Movies.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY total LIMIT 10;",What are the first and last names of the customers with the 10 cheapest invoices?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  ""CA"";",What is the number of invoices and total money billed in them from CA?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = ""Rock"" AND t3.name = ""MPEG audio file"";",List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT COUNT(*) FROM employees as t1 JOIN customers as t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = ""Steve"" AND t1.last_name = ""Johnson"";",How many customers does Steve Johnson support?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT COUNT(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",How many employees who are IT staff are from each city?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t2.name = ""Balls to the Wall"";",What is the name of the album that has the track Ball to the Wall?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,SELECT DISTINCT name FROM genres;,What are the different names of the genres?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"";",What country does Roberto Almeida live?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = ""Lucas"" AND t1.last_name = ""Mancini"";",How many orders does Lucas Mancini has?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT title FROM albums;,List every album's title.,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  ""USA"" GROUP BY billing_state;",How many invoices were billed from each state?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t1.name FROM tracks as t1 JOIN invoice_lines as t2 ON t1.id = t2.track_id JOIN invoices as t3 ON t3.id = t2.invoice_id JOIN customers as t4 ON t4.id = t3.customer_id WHERE t4.first_name = ""Daan"" AND t4.last_name = ""Peeters"";",List all tracks bought by customer Daan Peeters.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `invoice_lines` (
  id INTEGER PRIMARY KEY,
  invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id),
  unit_price NUMERIC(10,2),
  quantity INTEGER
);

"
store_1,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  ""CA"";",List the number of invoices and the invoice total from California.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t2.name FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.title = ""Balls to the Wall"";",List name of all tracks in Balls to the Wall.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT COUNT(*) FROM invoices WHERE billing_city  =  ""Chicago"" AND billing_state  =  ""IL"";","List the number of invoices from Chicago, IL.","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",What is employee Nancy Edwards's phone number?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = ""Lucas"" AND t1.last_name = ""Mancini"";",What is the total amount of money spent by Lucas Mancini?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t2.name FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.title = ""Balls to the Wall"";",What is the name of all tracks in the album named Balls to the Wall?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT COUNT(*) FROM customers WHERE state = ""CA"";",How many customers are from California?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT name FROM playlists;,What are the names of all the playlists?,"CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",List top 10 employee work longest in the company. List employee's first and last name.,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t2.first_name , t2.last_name FROM employees as t1 JOIN employees as t2 ON t1.id = t2.reports_to WHERE t1.first_name = ""Nancy"" AND t1.last_name = ""Edwards"";",What is the first and last name of the employee who reports to Nancy Edwards?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = ""Rock"" AND t3.name = ""MPEG audio file"";",What are the names of all Rock tracks that are stored on MPEG audio files?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",A list of the top 10 countries by average invoice size. List country name and average invoice size.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = ""Rock"" OR t1.name = ""Jazz""",List the name of tracks belongs to genre Rock or genre Jazz.,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT COUNT(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",Find the number of employees whose title is IT Staff from each city?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins"";",Eduardo Martins is a customer at which company?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT DISTINCT name FROM genres;,List all different genre types.,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT COUNT(*) FROM employees as t1 JOIN customers as t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = ""Steve"" AND t1.last_name = ""Johnson"";",What is the count of customers that Steve Johnson supports?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",What is the the phone number of Nancy Edwards?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,SELECT name FROM media_types;,What are the names of all the media types?,"CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT COUNT(*) ,  t1.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id GROUP BY t1.name;",How many tracks are in each genre?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = ""Lucas"" AND t1.last_name = ""Mancini"";",How much money did Lucas Mancini spend?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT title FROM albums ORDER BY title;,What are the titles of all the albums alphabetically ascending?,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT COUNT(*) FROM employees WHERE country = ""Canada"";",How many employees are living in Canada?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t1.title FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = ""Aerosmith"";",What are the titles of all the Aerosmith albums?,"CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"";",In which country does Roberto Almeida?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT COUNT(*) FROM employees WHERE country = ""Canada"";",How many employees live in Canada?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"";",How long does track Fast As a Shark has?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",What are the states with the most invoices?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",What are the names of the countries and average invoice size of the top countries by size?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT SUM(total) FROM invoices WHERE billing_city  =  ""Chicago"" AND billing_state  =  ""IL"";","What are the total amount of money in the invoices billed from Chicago, Illinois?","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t2.first_name , t2.last_name FROM employees as t1 JOIN employees as t2 ON t1.id = t2.reports_to WHERE t1.first_name = ""Nancy"" AND t1.last_name = ""Edwards"";",find the full name of employees who report to Nancy Edwards?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name ,  SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY SUM(t2.total) DESC LIMIT 10;","What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' EXCEPT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music',What are the names of all tracks that are on the Movies playlist but not in the music playlist?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT composer FROM tracks WHERE name = ""Fast As a Shark"";","What is the composer who created the track ""Fast As a Shark""?","CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",What are the names of the top 8 countries by total invoice size and what are those sizes?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",Who is the youngest employee in the company? List employee's first and last name.,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT COUNT(*) ,  t1.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id GROUP BY t1.name;",Find number of tracks in each genre?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT composer FROM tracks WHERE name = ""Fast As a Shark"";",Who is the composer of track Fast As a Shark?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT COUNT(*) FROM invoices WHERE billing_city  =  ""Chicago"" AND billing_state  =  ""IL"";","How many invoices were billed from Chicago, IL?","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT(t1.id)  >  10;,List title of albums have the number of tracks greater than 10.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = ""Rock"";",What is the name of tracks whose genre is Rock?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT t1.first_name , t1.last_name FROM employees as t1 JOIN customers as t2 ON t1.id  =  t2.support_rep_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",Find the full name of employee who supported the most number of customers.,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY t2.invoice_date DESC LIMIT 5;",What are the first and last names of the 5 customers who purchased something most recently?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t1.name ,  COUNT(*) FROM genres as t1 JOIN tracks as t2 ON t2.genre_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 5;",List the top 5 genres by number of tracks. List genres name and total tracks.,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = ""Rock"" OR t1.name = ""Jazz""",What are the names of the tracks that are Rock or Jazz songs?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT t1.title FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = ""Aerosmith"";",List Aerosmith's albums.,"CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name ,  COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 10;",Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;,List every album whose title starts with A in alphabetical order.,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name ,  SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY SUM(t2.total) DESC LIMIT 10;",List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",List the state in the US with the most invoices.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = ""Lucas"" AND t1.last_name = ""Mancini"";",How many orders does Luca Mancini have in his invoices?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",What is Nancy Edwards's address?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT COUNT(*) FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = ""Billy Cobham"";",How many albums does Billy Cobham has?,"CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY total LIMIT 10;",List the customers first and last name of 10 least expensive invoices.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' INTERSECT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music',Find the name of tracks which are in both Movies and music playlists.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";","What is the title, phone and hire date of Nancy Edwards?","CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5;",A list of the top 5 countries by number of invoices. List country name and number of invoices.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,SELECT name FROM playlists;,List the name of all playlist.,"CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT t1.name FROM tracks as t1 JOIN invoice_lines as t2 ON t1.id = t2.track_id JOIN invoices as t3 ON t3.id = t2.invoice_id JOIN customers as t4 ON t4.id = t3.customer_id WHERE t4.first_name = ""Daan"" AND t4.last_name = ""Peeters"";",What are the tracks that Dean Peeters bought?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `invoice_lines` (
  id INTEGER PRIMARY KEY,
  invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id),
  unit_price NUMERIC(10,2),
  quantity INTEGER
);

"
store_1,"SELECT t2.first_name , t2.last_name ,  COUNT(t1.reports_to) FROM employees as t1 JOIN employees as t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY COUNT(t1.reports_to) DESC LIMIT 1;","Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.","CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,SELECT t2.name FROM playlist_tracks as t1 JOIN playlists as t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING COUNT(t1.track_id)  >  100;,What are the names of all playlists that have more than 100 tracks?,"CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

"
store_1,"SELECT SUM(total) FROM invoices WHERE billing_city  =  ""Chicago"" AND billing_state  =  ""IL"";","List total amount of  invoice from Chicago, IL.","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"";","What is the unit price of the tune ""Fast As a Shark""?","CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",What is the address of employee Nancy Edwards?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,SELECT title FROM albums;,What are the titles of all the albums?,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"";",How much is the track Fast As a Shark?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,"SELECT email ,  phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"";",What is the email and phone number of Astrid Gruber the customer?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = ""Rock"";",What is the name of all tracks in the Rock genre?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' EXCEPT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music',Find the name of tracks which are in Movies playlist but not in music playlist.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT COUNT(*) FROM customers WHERE city = ""Prague"";",How many customers live in Prague city?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY t2.invoice_date DESC LIMIT 5;",Find out 5 customers who most recently purchased something. List customers' first and last name.,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT COUNT(*) FROM customers WHERE city = ""Prague"";",How many customers live in the city of Prague?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = ""Rock"" OR t3.name = ""MPEG audio file"";",What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?,"CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT COUNT(*) FROM customers WHERE state = ""CA"";",How many customers in state of CA?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t2.first_name , t2.last_name ,  COUNT(t1.reports_to) FROM employees as t1 JOIN employees as t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY COUNT(t1.reports_to) DESC LIMIT 1;",What are the first and last names of all the employees and how many people report to them?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,SELECT t2.title FROM artists as t1 JOIN albums as t2 ON t1.id  =  t2.artist_id WHERE t1.name LIKE '%Led%',List the name of albums that are released by aritist whose name has 'Led',"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,SELECT t2.title FROM artists as t1 JOIN albums as t2 ON t1.id  =  t2.artist_id WHERE t1.name LIKE '%Led%',What is the title of the album that was released by the artist whose name has the phrase 'Led'?,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",What si the youngest employee's first and last name?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5;",What are the top 5 countries by number of invoices and how many do they have?,"CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,SELECT name FROM media_types;,List all media types.,"CREATE TABLE `media_types` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins"";",What is the company where Eduardo Martins is a customer?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;,What are the titles of all albums that start with A in alphabetical order?,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT(t1.id)  >  10;,What are the names of the albums that have more than 10 tracks?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,SELECT title FROM albums ORDER BY title;,List every album ordered by album title in ascending order.,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
cre_Theme_park,"SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code",What is the average price range of hotels for each each star rating code?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id","What are the name, id and the corresponding number of visits for each  tourist attraction?","CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1,Show the transportation method most people choose to get to tourist attractions.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping',Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,"CREATE TABLE `Tourist_Attraction_Features` (
  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)
);

CREATE TABLE `Features` (
  Feature_ID INTEGER,
  Feature_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT location_name FROM locations WHERE location_name LIKE ""%film%""","Find all the locations whose names contain the word ""film"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3",What are the details and star ratings of the three hotels with the lowest price ranges?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn",What are the average prices of hotels grouped by their pet policy.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1",Show the description and code of the attraction type most tourist attractions belong to.,"CREATE TABLE `Ref_Attraction_Types` (
  Attraction_Type_Code CHAR(15) PRIMARY KEY,
  Attraction_Type_Description VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn",Show the average price of hotels for different pet policy.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id",What are the details and opening hours of the museums?,"CREATE TABLE `Museums` (
  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Museum_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(DISTINCT name) FROM photos,Count the number of distinct names associated with the photos.,"CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT address FROM locations WHERE location_name  =  ""UK Gallery""","Find the address of the location named ""UK Gallery"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  ""game1""","Which tourist attraction is associated with the photo ""game1""? Return its name.","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id",Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"CREATE TABLE `Royal_Family` (
  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Royal_Family_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Alison"" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Rosalind""",Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT location_name FROM locations WHERE location_name LIKE ""%film%""","Which location names contain the word ""film""?","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk""",Find the details of the shops that can be reached by walk.,"CREATE TABLE `Shops` (
  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Shop_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2",Which tourist attractions are visited at least twice? Give me their names and ids.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,SELECT COUNT(*) FROM hotels,Find the total number of available hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk""",What are the details of the shops that can be accessed by walk?,"CREATE TABLE `Shops` (
  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Shop_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC",Find the id and star rating of each hotel and sort them in increasing order of price.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT price_range FROM hotels,Tell me the price ranges for all the hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  other_details FROM staff",Show the names and details of all the staff members.,"CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  ""Vincent""",Find the visit date and details of the tourist whose detail is 'Vincent',"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""US museum""","Tell me the name of the staff in charge of the attraction called ""US museum"".","CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM hotels,How many available hotels are there in total?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""254 Ottilie Junction"" OR t2.how_to_get_there  =  ""bus""",What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk"" OR  t2.how_to_get_there  =  ""bus""",Find the details of all the markets that are accessible by walk or bus.,"CREATE TABLE `Street_Markets` (
  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Market_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  ""Vincent""",Show the tourist attractions visited by the tourist whose detail is 'Vincent'.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2",Show the names and ids of tourist attractions that are visited at least two times.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""254 Ottilie Junction"" OR t2.how_to_get_there  =  ""bus""",Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""film festival""","What are the names and descriptions of the photos taken at the tourist attraction ""film festival""?","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1",What are the names and ids of the tourist attractions that are visited at most once?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3",Show the details and star ratings of the 3 least expensive hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT visit_date FROM visits,Find all the distinct visit dates.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  ""5"" AND pets_allowed_yn  =  1",Show the average price range of hotels that have 5 star ratings and allow pets.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3,Show the details of the top 3 most expensive hotels.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT location_name FROM locations,Show all distinct location names.,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3,What are the details of the three most expensive hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name FROM tourist_attractions WHERE how_to_get_there  =  ""bus""",What are the names of the tourist attractions that can be accessed by bus?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(DISTINCT name) FROM photos,How many distinct names are associated with all the photos?,"CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""film festival""","Find the names and descriptions of the photos taken at the tourist attraction called ""film festival"".","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there",Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name FROM tourist_attractions WHERE how_to_get_there  =  ""bus""",Which tourist attractions can we get to by bus? Tell me the names of the attractions.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000,Give me the star rating descriptions of the hotels that cost more than 10000.,"CREATE TABLE `Ref_Hotel_Star_Ratings` (
  star_rating_code CHAR(15) PRIMARY KEY,
  star_rating_description VARCHAR(80)
);

CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  ""Vincent""",What are the visit date and details of the visitor whose detail is 'Vincent'?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  ""bus"" OR how_to_get_there  =  ""walk""",Find the names and opening hours of the tourist attractions that we get to by bus or walk.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id",Give me the detail and opening hour for each museum.,"CREATE TABLE `Museums` (
  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Museum_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT other_details FROM locations WHERE location_name  =  ""UK Gallery""","Return the detail of the location named ""UK Gallery"".","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  other_details FROM staff",What is the name and detail of each staff member?,"CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id","Show different tourist attractions' names, ids, and the corresponding number of visits.","CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  ""bus"" OR how_to_get_there  =  ""walk""",What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT DISTINCT location_name FROM locations,What are the distinct location names?,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" OR t2.tourist_details  =  ""Vivian""","For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.","CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""660 Shea Crescent"" OR t2.how_to_get_there  =  ""walk""",What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping',What are the names of the tourist attractions that have parking or shopping as their feature details?,"CREATE TABLE `Tourist_Attraction_Features` (
  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)
);

CREATE TABLE `Features` (
  Feature_ID INTEGER,
  Feature_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code",Show the average price of hotels for each star rating code.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000,What are the star rating descriptions of the hotels with price above 10000?,"CREATE TABLE `Ref_Hotel_Star_Ratings` (
  star_rating_code CHAR(15) PRIMARY KEY,
  star_rating_description VARCHAR(80)
);

CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id",What are the details and ways to get to tourist attractions related to royal family?,"CREATE TABLE `Royal_Family` (
  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Royal_Family_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT price_range FROM hotels WHERE star_rating_code  =  ""5""",Show the price ranges of hotels with 5 star ratings.,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits ),How many tourists did not make any visit?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT price_range FROM hotels WHERE star_rating_code  =  ""5""",What are the price ranges of five star hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,"SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  ""5"" AND pets_allowed_yn  =  1",What is the average price range of five star hotels that allow pets?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1,Which transportation method is used the most often to get to tourist attractions?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  ""660 Shea Crescent"" OR t2.how_to_get_there  =  ""walk""",Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  ""Vincent""",Which tourist attractions does the visitor with detail 'Vincent' visit?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,SELECT DISTINCT visit_date FROM visits,What are the distinct visit dates?,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  ""walk"" OR  t2.how_to_get_there  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"CREATE TABLE `Street_Markets` (
  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Market_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT tourist_details FROM visitors,Show details of all visitors.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  ""game1""","What is the name of the tourist attraction that is associated with the photo ""game1""?","CREATE TABLE `Photos` (
  Photo_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Filename VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Marcelle""",What are the names of the tourist attractions Vincent and Marcelle visit?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1",Show the names and ids of tourist attractions that are visited at most once.,"CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits ),Count the number of tourists who did not visit any place.,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

"
cre_Theme_park,"SELECT other_details FROM locations WHERE location_name  =  ""UK Gallery""",What is the detail of the location UK Gallery?,"CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there","List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.","CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
flight_1,SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.distance  >  5000 GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1,What is the salaray and name of the employee with the most certificates to fly planes more than 5000?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT name FROM aircraft WHERE distance  >  (SELECT AVG(distance) FROM aircraft),Show names for all aircrafts with distances more than the average.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT destination ,  COUNT(*) FROM flight GROUP BY destination",What are the destinations and number of flights to each one?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT flno FROM flight WHERE origin  =  ""Los Angeles""",What are the numbers of all flights coming from Los Angeles?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT origin ,  COUNT(*) FROM flight GROUP BY origin","For each origin, how many flights came from there?","CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT aid FROM aircraft WHERE distance  >  1000,Show ids for all aircrafts with more than 1000 distance.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT name FROM employee ORDER BY salary ASC LIMIT 3,What is the name of the 3 employees who get paid the least?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  salary FROM employee ORDER BY salary",What is the name and salary of all employees in order of salary?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT t2.name ,  COUNT(*) FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid",Show aircraft names and number of flights for each aircraft.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT eid ,  salary FROM employee WHERE name  =  'Mark Young'",What is the id and salary of the employee named Mark Young?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800""",Show names for all employees who have certificate of Boeing 737-800.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT t1.name ,  t1.salary FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1",what is the salary and name of the employee who has the most number of aircraft certificates?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT COUNT(*) FROM flight,What is the number of flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000,How many employees have salary between 100000 and 200000?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  distance FROM aircraft WHERE aid  =  12",What is the name and distance for aircraft with id 12?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT eid FROM employee WHERE salary  >  100000,What is the id of every employee who has at least a salary of  100000?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT name FROM employee WHERE salary  >  (SELECT AVG(salary) FROM employee),Show names for all employees with salary more than the average.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT AVG(salary) ,  MAX(salary) FROM employee",What is average and maximum salary of all employees.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid GROUP BY t1.aid ORDER BY COUNT(*) DESC LIMIT 1,Show the name of aircraft which fewest people have its certificate.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(DISTINCT eid) FROM certificate,What is the count of distinct employees with certificates?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

"
flight_1,SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid HAVING COUNT(*)  >= 2,Show names for all aircraft with at least two flights.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT eid ,  name FROM employee ORDER BY salary DESC LIMIT 1",Show the id and name of the employee with maximum salary.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid GROUP BY t1.aid ORDER BY COUNT(*) DESC LIMIT 1,What are the names of the aircraft that the least people are certified to fly?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT eid FROM employee WHERE salary  >  100000,Show ids for all employees with at least 100000 salary.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name FROM employee EXCEPT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800""",What are the names of all employees who are not certified to fly Boeing 737-800s?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid HAVING COUNT(*)  >= 2,What are the names for all aircrafts with at least 2 flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT aid ,  name FROM aircraft ORDER BY distance DESC LIMIT 1",What is the id and name of the aircraft that can cover the maximum distance?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT MIN(distance) ,  AVG(distance) ,  MAX(distance) FROM aircraft","What is the minimum, average, and maximum distance of all aircrafts.","CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT name ,  distance FROM aircraft",What are the names and distances for all airplanes?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT AVG(distance) ,  AVG(price) FROM flight WHERE origin  =  ""Los Angeles""",What is the average distance and average price for flights from Los Angeles.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT flno FROM flight WHERE distance  >  2000,What are the numbers of all flights that can cover a distance of more than 2000?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT flno FROM flight ORDER BY distance ASC LIMIT 3,What are the numbers of the shortest flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT origin FROM flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1,What place has the most flights coming from there?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT destination ,  COUNT(*) FROM flight GROUP BY destination",Show all destinations and the number of flights to each destination.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT origin FROM flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1,Which origin has most number of flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT name FROM employee ORDER BY salary ASC LIMIT 3,Show the name of employees with three lowest salaries.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT flno ,  distance FROM flight ORDER BY price DESC LIMIT 1",What is the flight number and its distance for the one with the maximum price?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT name FROM employee WHERE salary  >  (SELECT AVG(salary) FROM employee),What are the names of all employees who have a salary higher than average?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t1.flno  =  99,What is the name of the aircraft that was on flight number 99?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT flno ,  origin ,  destination FROM flight ORDER BY origin","What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?","CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t3.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t1.name  =  ""John Williams""",Show names for all aircrafts of which John Williams has certificates.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name FROM employee EXCEPT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800""",Show names for all employees who do not have certificate of Boeing 737-800.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT eid FROM employee EXCEPT SELECT eid FROM certificate,Show ids for all employees who don't have a certificate.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT flno FROM flight WHERE distance  >  2000,Show flight number for all flights with more than 2000 distance.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000,How many aircrafts have distance between 1000 and 5000?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000,What is the count of aircrafts that have a distance between 1000 and 5000?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000,What is the number of employees that have a salary between 100000 and 200000?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT AVG(salary) ,  MAX(salary) FROM employee",What is the average and largest salary of all employees?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT flno ,  distance FROM flight ORDER BY price DESC LIMIT 1",Show the flight number and distance of the flight with maximum price.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT departure_date ,  arrival_date FROM flight WHERE origin  =  ""Los Angeles"" AND destination  =  ""Honolulu""",Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT AVG(price) FROM flight WHERE origin  =  ""Los Angeles"" AND destination  =  ""Honolulu""",What is the average price for flights from Los Angeles to Honolulu.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800"" INTERSECT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Airbus A340-300""",What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.distance  >  5000 GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1,What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT t1.flno FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t2.name  =  ""Airbus A340-300""",What are the flight numbers for the aircraft Airbus A340-300?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800""",What are the names of all employees who have a certificate to fly Boeing 737-800?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  salary FROM employee WHERE eid  =  242518965",What is the name and salary of the employee with the id 242518965?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT COUNT(*) FROM employee,How many employees do we have?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT eid FROM employee EXCEPT SELECT eid FROM certificate,What are the ids of all employees that don't have certificates?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  distance FROM aircraft WHERE aid  =  12",What is the name and distance for the aircraft that has an id of 12?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT origin FROM flight WHERE destination  =  ""Honolulu""",Show origins of all flights with destination Honolulu.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT MIN(distance) ,  AVG(distance) ,  MAX(distance) FROM aircraft","Return the minimum, average and maximum distances traveled across all aircrafts.","CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(DISTINCT eid) FROM certificate,How many employees have certificate.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

"
flight_1,SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid WHERE t2.distance  >  5000 GROUP BY t1.aid ORDER BY COUNT(*)  >=  5,Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT flno ,  origin ,  destination FROM flight ORDER BY origin","Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.","CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT departure_date ,  arrival_date FROM flight WHERE origin  =  ""Los Angeles"" AND destination  =  ""Honolulu""",What are the departure and arrival dates of all flights from LA to Honolulu?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t1.name ,  t1.salary FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1",What is the salaray and name of the employee that is certified to fly the most planes?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  distance FROM aircraft",Show name and distance for all aircrafts.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT name FROM aircraft ORDER BY distance LIMIT 3,Show the name of aircrafts with top three lowest distances.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM aircraft,How many aircrafts do we have?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT origin ,  COUNT(*) FROM flight GROUP BY origin",Show all origins and the number of flights from each origin.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t1.flno FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t2.name  =  ""Airbus A340-300""",Show all flight numbers with aircraft Airbus A340-300.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT name FROM aircraft WHERE distance  >  (SELECT AVG(distance) FROM aircraft),What are the names of all aircrafts that can cover more distances than average?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM flight,How many flights do we have?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT AVG(distance) ,  AVG(price) FROM flight WHERE origin  =  ""Los Angeles""",What is the average distance and price for all flights from LA?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid WHERE t2.distance  >  5000 GROUP BY t1.aid ORDER BY COUNT(*)  >=  5,What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT AVG(price) FROM flight WHERE origin  =  ""Los Angeles"" AND destination  =  ""Honolulu""",What is the average price for flights from LA to Honolulu?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT name ,  salary FROM employee WHERE eid  =  242518965",What is the name and salary for employee with id 242518965?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT name FROM aircraft ORDER BY distance LIMIT 3,What are the aircrafts with top 3 shortest lengthes? List their names.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM aircraft,How many aircrafts exist in the database?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT origin ,  destination FROM flight WHERE price  >  300",What is the origin and destination for all flights whose price is higher than 300?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT flno FROM flight WHERE origin  =  ""Los Angeles""",Show all flight number from Los Angeles.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t2.name ,  COUNT(*) FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid",What is the name of each aircraft and how many flights does each one complete?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT flno FROM flight ORDER BY distance ASC LIMIT 3,Show the flight number of flights with three lowest distances.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT t3.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t1.name  =  ""John Williams""",What are the names of all aircrafts that John Williams have certificates to be able to fly?,"CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT name ,  salary FROM employee ORDER BY salary",Show name and salary for all employees sorted by salary.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT aid FROM aircraft WHERE distance  >  1000,What are the ids of all aircrafts that can cover a distance of more than 1000?,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT origin ,  destination FROM flight WHERE price  >  300",Show origin and destination for flights with price higher than 300.,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what are the biggest rivers in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  ""tennessee"" );",which rivers do not run through tennessee,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which states does the ohio run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of wyoming,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT SUM(area) FROM state;,what is the combined area of all 50 states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state borders kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE capital  =  ""salem"";",what states capital is salem,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,what river flows through the most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what is the biggest city in usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",where is springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states are in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",what are the capital cities of the states which border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT MAX(highest_elevation) FROM highlow;,what is the elevation of the highest point in the usa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many people are in the state of california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT AVG(population) FROM state;,what is the average population of the us by state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""florida"" ) );",what states border states that border states that border florida,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ORDER BY lowest_elevation LIMIT 1;",which is the lowest point of the states that the mississippi runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what is the biggest city in the smallest state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );,what is the capital of the state with the longest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the state with the smallest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state border kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,which state has the highest elevation,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,which state has the most population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,what is the lowest point in usa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the city in wyoming with the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_elevation FROM highlow WHERE lowest_point  =  ""death valley"";",what is the elevation of death valley,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT city_name FROM city WHERE population  >  150000;,what are the major cities of the united states,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,which state has the largest density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,in which state does the highest point in usa exist,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what capital has the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM state WHERE capital  =  ""salem"";",salem is the capital of which state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,what river traverses the most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );,what states have no bordering state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what is the most populous state in the us,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what state has the highest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(traverse) FROM river WHERE river_name  =  ""missouri"";",how many states does the missouri river flow through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which states does the ohio river pass through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(state_name) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city ) ) ) );,how many states have a higher point than the highest point of the state with the largest capital city in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have a city named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow ) );,what are the cities of the state with the highest point,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT t2.highest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state ) );,what is the highest point in the state with the smallest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state;,give me all the states of usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of states through which the mississippi river runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ""kentucky"";",number of states bordering kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the largest city in wyoming,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );,what is the state with the lowest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT MAX(highest_elevation) FROM highlow;,what is the height of the highest point in the usa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT lowest_elevation FROM highlow WHERE state_name  =  ""pennsylvania"";",what is the lowest elevation in pennsylvania,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT density FROM state;,what are the population densities of each us state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ""kentucky"";",how many states border kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",what is the length of the rio grande river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""colorado"" ) ORDER BY highest_elevation DESC LIMIT 1;",what is the highest point in states bordering colorado,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,what is the tallest mountain in the united states,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what major cities are located in kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states does the ohio run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",give me the cities which are in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the largest city of wyoming,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,which state is the smallest,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many citizens in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""rio grande"" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""rio grande"" );",what is the largest of the state that the rio grande runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of states through which the mississippi river run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what is the adjacent state of kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,which state has the most people,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT MAX(highest_elevation) FROM highlow;,how high is the highest point in america,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT t2.lowest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the lowest point of the state with the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",what are the capitals of the states that border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT capital FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what is the capital of the state with the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many inhabitants does boulder have,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the largest state in usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is the most populated capital in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT MAX(DISTINCT highest_elevation) FROM highlow WHERE state_name  =  ""texas"";",what is the height of the highest mountain in texas,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what is the biggest city in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",what is the size of new mexico,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what city has the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what is the river that cross over illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  ""texas"";",how many major cities are in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what is the smallest state that the mississippi river runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the state with the highest elevation in the united states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM city GROUP BY state_name ORDER BY SUM(population) LIMIT 1;,what state has the smallest urban population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" );",what is the largest city in states that border california,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what state is the largest in population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,what states does the shortest river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE state_name  =  ""delaware"";",how high is the highest point of delaware,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,which state has the largest city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state;,what are the states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what is the most populous city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT DISTINCT capital FROM state;,name the 50 capitals in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many people stay in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name  =  ""texas"";",what is the highest mountain in texas,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",where is the most populated area of wyoming,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ""colorado"" );",which states have points higher than the highest point in colorado,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers are there in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the population of the capital of the largest state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  ""texas"";",how many major cities are there in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what state has highest elevation,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT COUNT(t2.river_name) FROM river as t2 JOIN state as t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,how many rivers are in the state with the largest population,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT traverse FROM river;,what states have rivers running through them,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",how long is the rio grande river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",name the rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is the largest capital,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what state has the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT t2.capital FROM state as t2 JOIN city as t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  ""durham"";",what is the capital of states that have cities named durham,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have cities named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what is the smallest city of the smallest state in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(city_name) FROM city;,how many cities are there in usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what wyoming city has the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""alabama"" );",which rivers run through states bordering alabama,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what state has the city with the most population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""austin"" AND population  >  150000;",which states have a major city named austin,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",where is the ohio river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",what is the population of california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states are next to the ohio,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",what is the smallest state that borders texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""oklahoma"" ) ORDER BY population DESC LIMIT 1;",what state that borders oklahoma has the highest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT traverse FROM river WHERE length  >  750;,what states contain at least one major rivers,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) );,what rivers run through the state with the lowest point in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  ""texas"" );",what is the size of the capital of texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,which state has the highest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is the largest capital city in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",states bordering kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what city has the most people,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river;,what are the major rivers in the us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(city_name) FROM city WHERE population  >  150000;,how many major cities are there,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the cities in states through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT t2.highest_point FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN(area) FROM state );,what is the highest point in the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states have rivers named ohio,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",how long is rio grande,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT MAX(highest_elevation) FROM highlow;,what is the highest elevation in the united states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT COUNT(DISTINCT border) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",how many states border the mississippi river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers are in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what state has the largest capital,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what cities in wyoming have the highest populations,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what state has the city with the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name  =  ""texas"";",what is the highest point in texas,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what is the state with the largest density in usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT(city_name) DESC LIMIT 1 ) ORDER BY length DESC LIMIT 1;,what is the longest river in the state with the most major cities,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of states through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,which is the shortest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,which state capital has the smallest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  ""des moines"" );",what is the highest point in the state with capital des moines,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what state contains the highest point in the us,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of states through which the mississippi run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the capital of the state with the highest elevation,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT t1.state_name FROM state as t1 JOIN highlow as t2 ON t1.capital  =  t2.highest_point;,what states have a capital that is the highest point in the state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what are the states through which the longest river runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many people are there in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what state has the sparsest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,which state has the lowest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE length  >  750 AND traverse  =  ""virginia"" ) );",what are the major cities in the states through which the major river in virginia runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",what is the lowest point in iowa in meters,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT highest_point FROM highlow;,what are the highest points of all the states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what city in the united states has the highest population density,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE capital  =  ""salem"";",what state has the capital salem,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what state has the least population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what state has the city springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE length  >  750 AND traverse  =  ""illinois"";",name the major rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the highest point of the usa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the longest river in the largest state,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",which state is the city springfield located in,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",number of people in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",which capitals are in the states that border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what is the longest river in america,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT DISTINCT traverse FROM river WHERE length  =  ( SELECT MAX(DISTINCT length) FROM river );,what state has the longest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT capital FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what is the capital of the state with the most inhabitants,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(city_name) FROM city;,how many cities does the usa have,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",which states does not border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what state has the largest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT SUM(area) FROM state;,how many square kilometers in the us,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,which river traverses most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  >  150000;,what are the major cities in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what state has the lowest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what are the names of the major cities in kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );,name the states which have no surrounding states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what is the longest river in the us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );,what is the smallest city in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,where is the highest mountain of the united states,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,which states border the state with the smallest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ""colorado"" );",what states high point are higher than that of colorado,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" );",what is the largest state bordering california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the state with the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what state has the smallest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""nebraska"" );",how many major cities are in states bordering nebraska,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT t2.population FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",what are the populations of states which border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,which state has the highest peak in the country,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what is the most dense state in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT SUM(length) FROM river;,what is the total length of all rivers in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );,what is the city with the smallest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE state_name  =  ""delaware"";",what is the highest elevation in delaware,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",what is the lowest point in the state of iowa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) );,what is the largest state that borders the state with the highest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city;,give me the cities in usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT SUM(population) FROM state;,how many people live in the united states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states does the ohio river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state ) );,what is the highest point of the state with the smallest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how much population does california have,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,what river runs through the most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" );",what is the largest state that borders california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT lake_name FROM lake;,name all the lakes of us,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many citizens in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,what states border the most populous state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM mountain;,where are mountains,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which state has the ohio river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is the capital of the state texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,which is the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",what is the population of boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT DISTINCT t1.city_name FROM city as t1 JOIN river as t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX(t1.population) FROM river as t2 JOIN city as t1 ON t2.traverse  =  t1.state_name );,what is the biggest american city in a state with a river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );,what state has the smallest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",what are the capitals of states that border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people live in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the population density of wyoming,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states does the ohio river go through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the biggest city in wyoming,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",people in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",can you tell me the capital of texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );,which is the density of the state that the largest river in the united states runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the highest point in the country,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,which state has the greatest density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the highest point in the us,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,what is the shortest river in the us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(state_name) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  ""alabama"" );",count the states which have elevations lower than what alabama has,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,which states does the longest river cross,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",what cities in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM border_info WHERE border  =  ""texas"" AND state_name IN ( SELECT traverse FROM river WHERE length  >  750 );",what states border texas and have a major river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the biggest state in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );,which states border no other states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE highest_point  =  ""guadalupe peak"";",what is the maximum elevation of guadalupe peak,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",what is the lowest point of iowa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers does idaho have,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the length of the longest river that runs through texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );,what city has the least population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""mississippi"" );",what are the high points of states surrounding mississippi,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(capital) FROM state WHERE state_name  =  ""rhode island"";",how many capitals does rhode island have,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE population  >  150000 AND state_name  =  ""wisconsin"";",what are the populations of all the major cities in wisconsin,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the largest river in texas state,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,which state has the lowest elevation,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the largest state in the us,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what are the rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what river runs through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  ""atlanta"" ) );",which rivers run through states that border the state with the capital atlanta,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,what is the shortest river in the united states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states does usa have,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is the biggest capital city in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" );",what is the longest river that runs through a state that borders tennessee,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE river_name  =  ""colorado"";",how many rivers are called colorado,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many people live in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the capital of the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",what are the population of california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the shortest river in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(city_name) FROM city;,how many cities are there in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",through which states does the ohio flow,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT SUM(area) FROM state;,what is the total area of the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states in the united states have a city of springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );,which states border the longest river in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );,what is the smallest city in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what state has the most people,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states are there in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(t1.river_name) FROM highlow as t2 JOIN river as t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,how many rivers are in the state with the highest point.,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""idaho"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""idaho"" );",which state has the lowest point that borders idaho,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",what cities are located in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what is the length of the longest river in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT area FROM state WHERE capital  =  ""albany"";",what is the area of the state with the capital albany,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE state_name  =  ""texas"";",how many cities does texas have,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(border) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,how many states border the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is the largest state capital in population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what states surround kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" );",what is the longest river that flows through a state that borders tennessee,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""colorado"" ) ORDER BY highest_elevation DESC LIMIT 1;",what is the highest point in the states bordering colorado,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which states border kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the longest river in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what states border states which the mississippi runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",which rivers flow through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  ""texas"";",how many big cities are in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name  =  ""texas"";",could you tell me what is the highest point in the state of texas,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the highest point in the united states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of the wyoming,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",name all the rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ""boston"" );",how many states border on the state whose capital is boston,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what is the state with the largest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",which rivers are in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",give me the states that border kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT population FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the population of the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,which states does the longest river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what river is the longest one in the united states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",springfield is in what state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which states adjoin kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what are the rivers in the state of illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",show major cities in kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what state which the mississippi runs through has the largest population,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,state the state with the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what is largest capital,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the longest river that flows through texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT density FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the population density of the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT SUM(population) FROM state;,what is the combined population of all 50 states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM city GROUP BY state_name ORDER BY AVG(population) LIMIT 1;,which state has the smallest average urban population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE state_name  =  ""delaware"";",how tall is the highest point in delaware,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE length  >  750 AND traverse  =  ""ohio"";",how many major rivers cross ohio,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what state is the biggest,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what is the capital of the state with the largest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT length FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,how long is the shortest river in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE highest_point  =  ""guadalupe peak"";",how high is guadalupe peak,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT population FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,how many people live in the state with the largest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the population of the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,what is the shortest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which states do ohio river flow through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what is the most populous state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what is the most populous state through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,which state has the least population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  ""des moines"" );",what is the highest point in the state with the capital des moines,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT lake_name FROM lake WHERE area  >  750;,what are the major lakes in united states,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

"
geo,SELECT highest_elevation FROM highlow;,how high are the highest points of all the states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT country_name FROM state WHERE state_name  =  ""massachusetts"";",where is massachusetts,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what are the major cities in the largest state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many citizens live in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",which city in wyoming has the largest population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,what is the tallest mountain in america,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many people reside in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(state_name) FROM city WHERE city_name  =  ""springfield"";",how many states have a city named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,what is the highest mountain in the us,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what states border the state with the smallest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT capital FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the capital of the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT t1.state_name FROM highlow as t3 JOIN border_info as t1 ON t3.state_name  =  t1.border JOIN state as t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;,what is the largest state that borders the state with the lowest point in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE highest_point  =  ""guadalupe peak"";",how tall is guadalupe peak,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",which states have cities named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",how long is the rio grande,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""colorado"" );",what states border states that border colorado,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",tell me what cities are in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(DISTINCT traverse) FROM river WHERE length  =  ( SELECT MIN(DISTINCT length) FROM river );,how many states in the us does the shortest river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what are the states that the ohio run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what state is springfield in,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what is the major cities in kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" );",through which states does the longest river in texas run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT population FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what is the population of the state with the highest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) );,which rivers run through the state with the lowest elevation in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT traverse FROM river;,which states have a river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states are there,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the biggest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(border) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,how many states border the state with the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what are all the rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",what are the lakes in states bordering texas,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,whats the largest city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE length  >  750 AND traverse  =  ""illinois"";",what are the major rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );,what is the smallest state through which the longest river runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE country_name != ""usa"";",which rivers do not run through usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT t2.highest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the highest point of the state with the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM city WHERE population  >  150000 AND state_name  =  ""wisconsin"";",what are the populations of the major cities of wisconsin,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",how big is new mexico,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,which state has the greatest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the largest city in wyoming by population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",what is the area of the new mexico state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(state_name) FROM city WHERE city_name  =  ""springfield"";",how many states have cities or towns named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",what are the cities in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",what is the population of boulder city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,which river runs through the most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(river_name) FROM river;,how many rivers are there in us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM mountain WHERE mountain_name  =  ""whitney"";",which state is mount whitney in,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city ) );,which rivers run through the state with the largest city in the us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,give me the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT COUNT(DISTINCT state_name) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );,how many states do not have rivers,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,which us city has the highest population density,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  ""atlanta"" ) );",what rivers run through the states that border the state with the capital atlanta,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,how long is the longest river in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the capital of the state with the highest point,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is the capital of texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",how many residents live in california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what are the capital city in texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT lake_name FROM lake WHERE state_name  =  ""california"";",give me the lakes in california,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

"
geo,"SELECT state_name FROM mountain WHERE mountain_name  =  ""whitney"";",where is mount whitney,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""alabama"" );",what rivers are in states that border alabama,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state;,list the states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT area FROM state;,what is the area of the states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what state has the highest elevation,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",how large is new mexico,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,what are the states that border the state with the greatest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what are the major cities in kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM mountain WHERE mountain_name  =  ""whitney"";",where is mount whitney located,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is capital of texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(state_name) FROM city WHERE city_name  =  ""springfield"";",how many states have a city called springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what are the major cities in the smallest state in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM state WHERE capital  =  ""salem"";",what state is salem the capital of,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT density FROM state WHERE capital  =  ""austin"";",what is the population density in the state with capital austin,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT t2.highest_elevation FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX(area) FROM state );,how high is the highest point in the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""oklahoma"" ) ORDER BY population DESC LIMIT 1;",which of the states bordering oklahoma has the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,what is the name of the state with the lowest point,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the population of the largest city in the state with the largest area,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  ""albany"" );",how many rivers do not traverse the state with the capital albany,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM city GROUP BY state_name ORDER BY SUM(population) DESC LIMIT 1;,what state has the largest urban population,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" );",what is the largest city in a state that borders california,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""mississippi"" );",what are the highest points of states surrounding mississippi,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",what is the population of the largest state that borders texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );,what is the highest mountain in us,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""montana"" ) AND state_name  =  ""montana"";",which state is the largest city in montana in,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what are the rivers of illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",what is the highest point in each state whose lowest point is sea level,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population / area FROM state WHERE state_name  =  ""pennsylvania"";",what is the average population per square km in pennsylvania,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT lake_name FROM lake WHERE area  >  750;,show me all the major lakes in the us,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

"
geo,SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) ;,what is capital of the state with the lowest point,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,which state has the sparsest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of the states through which the mississippi run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""wyoming"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""wyoming"" );",how many people live in the smallest state bordering wyoming,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",what is the smallest state bordering texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,which state has the highest point,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,which river goes through the most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT t1.river_name FROM highlow as t2 JOIN river as t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;,what is the longest river in the state with the highest point,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which states border the ohio river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",what is the lowest point in iowa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM mountain WHERE mountain_name  =  ""whitney"";",in what state is mount whitney,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE river_name  =  ""colorado"";",how many colorado rivers are there,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_elevation FROM highlow WHERE state_name  =  ""delaware"";",what is the highest point in delaware in meters,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states are in the united states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT t1.border FROM border_info as t2 JOIN border_info as t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,what states border states that border the state with the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",how long is the longest river in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers run through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the smallest state in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what is the longest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  ""texas"" );",how many people live in the capital of texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""colorado"" ) );",what state contains the highest point of those the colorado river traverses,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT density FROM state WHERE population  =  ( SELECT MIN(population) FROM state );,what is the population density of the state with the smallest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT area FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what is the area of the state with the smallest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what are the major cities in the state of kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(DISTINCT state_name) FROM border_info;,how many states border at least one other state,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(city_name) FROM city;,how many cities are there in the united states,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",what states border the ohio river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers are in idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers flow through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what river flows through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",in which state is springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT area FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the area of the smallest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) AND area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ) ) ORDER BY population DESC LIMIT 1;",what is the largest city in smallest state through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  >  750 AND traverse  =  ""illinois"";",what major rivers run through illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(state_name) FROM state;,how many states are there in united states,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM state WHERE state_name  =  ""california"";",what can you tell me about the population of california,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",how long is the rio grande river in miles,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what are the neighboring states for kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",where is the lowest spot in iowa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""oklahoma"" ) ORDER BY population DESC LIMIT 1;",what state bordering oklahoma has the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of the states through which the mississippi river run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the state that contains the highest point,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name  =  ""alaska"" ) AND state_name  =  ""alaska"";",what is the smallest city in alaska,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(state_name) FROM city WHERE city_name  =  ""springfield"";",how many states have cities named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""seattle"" AND state_name  =  ""washington"";",what is the population of seattle washington,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(traverse) FROM river WHERE river_name  =  ""missouri"";",how many states does the missouri river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT MAX(area) FROM state;,what is the size of the largest state in the usa,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(traverse) FROM river WHERE river_name  =  ""missouri"";",how many states does the missouri run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what is the biggest city in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ""colorado"" );",which states have points that are higher than the highest point in colorado,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT highest_elevation FROM highlow WHERE state_name  =  ""delaware"";",how high is the highest point in delaware,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );,where is the smallest city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",what is the area of new mexico in square kilometers,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,what is the state with the lowest point,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what state borders kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  ""new mexico"" ) AND state_name  =  ""colorado"";",how many states border colorado and border new mexico,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(city_name) FROM city;,how many cities are there in us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""california"" );",what state that borders california is the largest,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) );,what rivers flow through states that border the state with the largest population,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" ) ORDER BY lowest_elevation LIMIT 1;",what is the lowest point of all states through which the mississippi river runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of the states through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",what is the population in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,what state has the largest city,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,what is the lowest point of the us,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT area FROM state WHERE state_name  =  ""new mexico"";",what is the area of new mexico,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the biggest river in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );,what is the least populous state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT MAX(area) FROM state;,what is the area of the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the smallest state by area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  ""michigan"";",name the major lakes in michigan,"CREATE TABLE `lake` (
  lake_name TEXT,
  area double,
  country_name varchar(3),
  state_name TEXT
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",which states does the ohio river run through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,what is the longest river in the united states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE population  >  150000 AND state_name  =  ""wisconsin"";",what is the population of the major cities in wisconsin,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,give me the longest river that passes through the us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  >  150000;,what are the major cities of the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is the capital of the texas state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,where is the lowest point in the us,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""oklahoma"" ) ORDER BY population DESC LIMIT 1;",what is the most populated state bordering oklahoma,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX(t1.area) FROM state as t1 JOIN river as t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  ""mississippi"" ) );",what is the population of the capital of the largest state through which the mississippi runs,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,which is the longest river in usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""colorado"" AND traverse  =  ""texas"";",what is the length of the colorado river in texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what states border states that the mississippi runs through,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ""kansas"";",what are the major cities of kansas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",give me the number of rivers in idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name  =  ""texas"";",where is the highest point in texas,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""tennessee"" );",what is the longest river in the states that border tennessee,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",which states border states through which the mississippi traverses,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""rio grande"" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""rio grande"" );",what is the largest state traversed by the rio grande river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  ""texas"" ) AND traverse  =  ""texas"";",what is the longest river flowing through texas,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have towns named springfield,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT lowest_point FROM highlow WHERE state_name  =  ""iowa"";",where is the lowest point in iowa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""alaska"" ) AND state_name  =  ""alaska"";",how many people live in the biggest city in alaska state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what is the state with the lowest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""colorado"" );",how many rivers run through the states bordering colorado,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people lived in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what state has the highest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT traverse FROM river WHERE river_name  =  ""ohio"";",through which states does the ohio run,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );,what is the lowest point in the united states,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state ) );,what state borders the state with the smallest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,which state has the longest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,which state has the biggest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  ""alabama"" );",what rivers flow through states that alabama borders,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain WHERE state_name != ""alaska"" );",which is the highest peak not in alaska,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers are there in idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT COUNT(DISTINCT traverse) FROM river WHERE length  >  750;,how many states are next to major rivers,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what cities in wyoming have the highest number of citizens,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );,what state has the greatest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE length  >  750 AND traverse  =  ""illinois"";",what are major rivers in illinois,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ""kentucky"";",what is the number of neighboring states for kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how big is the city of boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
wrestler,"SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id",Give the names of wrestlers and their elimination moves.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT DISTINCT reign FROM wrestler WHERE location != ""Tokyo , Japan""","What are the distinct reigns of wrestlers whose location is not ""Tokyo,Japan"" ?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common reigns of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT elimination_move FROM elimination WHERE team  =  ""team Orton""","What are the elimination moves of wrestlers whose team is ""Team Orton""?","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50,Show times of elimination of wrestlers with days held more than 50.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(DISTINCT team) FROM elimination,What is the number of distinct teams that suffer elimination?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT elimination_move FROM elimination WHERE team  =  ""team Orton""",Return the elimination movies of wrestlers on Team Orton.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id",What are the names of wrestlers and the elimination moves?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3,Show teams that have suffered more than three eliminations.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination),What are the names of wrestlers who have never been eliminated?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT time FROM elimination WHERE eliminated_by  =  ""Punk"" OR eliminated_by  =  ""Orton""","Show the times of elimination by ""Punk"" or ""Orton"".","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(*) FROM wrestler,Count the number of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC",List the names of wrestlers and the teams in elimination in descending order of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1,List the time of elimination of the wrestlers with largest days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT time FROM elimination WHERE eliminated_by  =  ""Punk"" OR eliminated_by  =  ""Orton""",What are the times of elimination for any instances in which the elimination was done by Punk or Orton?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(DISTINCT team) FROM elimination,How many different teams have had eliminated wrestlers?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT COUNT(*) FROM wrestler,How many wrestlers are there?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT team FROM elimination WHERE eliminated_by  =  ""Orton"" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  ""Benjamin""","Show the teams that have both wrestlers eliminated by ""Orton"" and wrestlers eliminated by ""Benjamin"".","CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held DESC,"What are the names of the wrestlers, ordered descending by days held?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT reign ,  days_held FROM wrestler",What are the reigns and days held of all wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3,Which teams had more than 3 eliminations?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1,What is the time of elimination for the wrestler with the most days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1,Which reign is the most common among wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1,Return the name of the wrestler who had the lowest number of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT reign ,  days_held FROM wrestler",Show the reign and days held of wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE days_held  <  100,What are the names of wrestlers days held less than 100?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50,What are the times of elimination for wrestlers with over 50 days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT team ,  COUNT(*) FROM elimination GROUP BY team",Show different teams in eliminations and the number of eliminations from each team.,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held DESC,List the names of wrestlers in descending order of days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT DISTINCT reign FROM wrestler WHERE location != ""Tokyo , Japan""","Give the different reigns of wrestlers who are not located in Tokyo, Japan.","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT name ,  location FROM wrestler",Give the names and locations of all wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2,Which locations are shared by more than two wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination),List the names of wrestlers that have not been eliminated.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,"SELECT team ,  COUNT(*) FROM elimination GROUP BY team",How many eliminations did each team have?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
wrestler,SELECT name FROM wrestler WHERE days_held  <  100,Return the names of wrestlers with fewer than 100 days held.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC","What are the names of wrestlers and their teams in elimination, ordered descending by days held?","CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
yelp,"SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  ""April"" GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.text) DESC LIMIT 1;",Find the business with the most number of reviews in April,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Adrienne"";",How many reviews has Adrienne written ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";",Find all breweries in Los Angeles,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,SELECT AVG(rating) FROM review WHERE year  =  2014;,What is the average rating of reviews written in year 2014 ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Pennsylvania"" AND t2.category_name  =  ""restaurant"";",find all the restaurant in Pennsylvania,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  ""Texas"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"";",Give me all the Moroccan restaurant in Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT review_count FROM business WHERE name  =  ""Acacia Cafe"";","How many reviews does "" Acacia Cafe "" have ?","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;,Find all reviews for businesses rated 2.5,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT SUM(t1.likes) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Niloofar"";",What is the total likes on tips from Niloofar,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN tip as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""Pet Groomers"";",Find the users who have given tips on Pet Groomers,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN category as t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t3.category_name  =  ""Italian"" AND t4.category_name  =  ""restaurant"" AND t2.neighbourhood_name  =  ""Meadowood"";",Find all Italian restaurant in the Meadowood neighbourhood of Madison,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Kabob Palace"" AND t2.year  =  2014;","Find all reviews about "" Kabob Palace "" in year 2014","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT COUNT(DISTINCT text) FROM tip WHERE year  =  2015;,How many tips have been written in 2015,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.category_name) DESC LIMIT 1;,Find the business which has the most number of categories,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";","What is the number of escape games in "" Madison "" ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Taj Mahal"" AND t2.category_name  =  ""restaurant"";","find all cities which has a "" Taj Mahal "" restaurant","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Michelle"";",Return me the number of tips that are written by Michelle .,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT name) FROM user WHERE name  =  ""Michelle"";",Find the number of users called Michelle,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  ""Michelle"";",How many businesses has Michelle reviewed in 2010 ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""MGM Grand Buffet"" AND t2.category_name  =  ""category_category_name0"";","Find all cities in which there is a restaurant called "" MGM Grand Buffet ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT SUM(t3.count) FROM checkin as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  ""Brighton Heights"";","Find the total checkins in "" Brighton Heights "" neighbourhood","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";",Find all restaurant Seafood in Los Angeles,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  ""Niloofar"";",list all the businesses which Niloofar rated 5,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  ""April"" AND t2.name  =  ""Michelle"";",How many tips has Michelle written in April,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" AND t2.rating  <  2.5 AND t3.category_name  =  ""Italian"" AND t4.category_name  =  ""restaurant"";",List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT city FROM business WHERE rating  <  1.5;,Find the cities of businesses rated below 1.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Texas"";","Find all tips for "" Cafe Zinho "" in Texas .","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT AVG(t1.rating) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Michelle"";",what is the average rating given in Michelle reviews,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""restaurant"" AND t4.name  =  ""Patrick"";","Find all restaurant reviewed by Patrick in "" Dallas ""","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM neighbourhood as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.neighbourhood_name  =  ""Stone Meadows"";","How many businesses are there in the "" Stone Meadows "" neighbourhood in Madison ?","CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""Irish Pub"";",How many users have reviewed Irish Pub in Dallas ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",find the number of escape games in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",How many escape games exist in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  4.5 AND t2.category_name  =  ""restaurant"";",Find all Dallas restaurant with a rating above 4.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT city) FROM business WHERE name  =  ""Panda Express"";","Return me the number of cities that has "" Panda Express "" .","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""restaurant"";",List all users who reviewed businesses that are restaurant .,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT state FROM business WHERE name  =  ""Whataburger"";",Find all states in which there is a Whataburger,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.state  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  ""Italian"" AND t3.category_name  =  ""Delis"" AND t4.day  =  ""Sunday"" GROUP BY t1.state;",find the total checkins in Italian Delis in each state on Sunday,"CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  ""Michelle"";",Return me the number of tips that are written by Michelle in 2010 .,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT user_id FROM user WHERE name  =  ""Michelle"";",List all user ids with name Michelle,"CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.text) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","find the number of reviews written for "" Cafe Zinho "" restaurant in Texas","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Target"";","How many Target are there in "" Los Angeles "" ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""Bars"" AND t4.name  =  ""Patrick"";",Find all Bars reviewed by Patrick,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  ""restaurant"";",find the number of restaurant rated more than 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";","Find all breweries in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.text) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id JOIN review as t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  ""South Summerlin"";","Find the number of reviews on businesses located in "" South Summerlin "" neighbourhood","CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT text)  ,  month FROM tip GROUP BY month;",Find the number of tips written in each month,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  ""Niloofar"";",How many reviews has Niloofar written in 2015,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,SELECT name FROM business WHERE rating  >  4.5;,List all the businesses with more than 4.5 stars,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Mexican"" AND t3.category_name  =  ""restaurant"";",Find all Mexican restaurant in Dallas with at least 3.5 stars,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  ""restaurant"";",List all the restaurant rated more than 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT city FROM business WHERE name  =  ""Taj Mahal"";","Find all cities which has a "" Taj Mahal "" .","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""Dallas"";",Find all users who have written tips about businesses in Dallas,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  ""Patrick"";",Find all reviews by Patrick with a rating above 4,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Bars"";",How many Bars in Dallas have a rating above 3.5 ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT full_address FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Walmart"";","List the addresses of all Walmart in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT business_id FROM business WHERE city  =  ""Los Angeles"" AND name  =  ""Apple Store"";","Find all Apple Store in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Mexican"" AND t3.category_name  =  ""restaurant"";",Find all Mexican restaurant in Dallas with a rating above 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  ""Niloofar"";",list all the businesses which have a review by Niloofar,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t4.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN review as t4 ON t4.business_id  =  t1.business_id JOIN user as t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  ""Italian"" AND t3.category_name  =  ""category_category_name1"" AND t5.name  =  ""Michelle"";",List all the reviews by Michelle for Italian restaurant,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",How many escape games are there in Madison ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" AND t3.category_name  =  ""Italian"" AND t4.category_name  =  ""restaurant"";",List all the neighbourhoods with Italian restaurant in Madison,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  ""restaurant"";",Return me the number of businesses that are restaurant .,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  ""Italian"" AND t3.category_name  =  ""restaurant"";",List all 5 star Italian restaurant,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  ""Bars"";","Find all Bars in "" Los Angeles "" with at least 30 reviews and average rating above 3 stars","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT AVG(t3.count)  ,  t3.day FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN checkin as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  ""Barrio Cafe"" AND t2.category_name  =  ""restaurant"" GROUP BY t3.day;","Find the average number of checkins in restaurant "" Barrio Cafe "" per day","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT name FROM business WHERE rating  =  3.5;,List all businesses with rating 3.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";",what is the number of restaurant in Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Edinburgh"" AND t2.category_name  =  ""restaurant"" AND t3.category_name  =  ""Egyptian"";",How many Egyptian restaurant are there in Edinburgh ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Pittsburgh"" AND t1.rating  =  4.5 AND t2.category_name  =  ""restaurant"";",What is the number of restaurant in Pittsburgh rated 4.5,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  ""Vintner Grill"" AND t2.category_name  =  ""category_category_name0"" AND t3.year  =  2010;","How many people reviewed restaurant "" Vintner Grill "" in 2010 ?","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t1.state  =  ""Pennsylvania"" AND t2.year  =  2010;","List all tips for "" Cafe Zinho "" in Pennsylvania in 2010 .","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t3.category_name  =  ""restaurant"" AND t2.neighbourhood_name  =  ""Hazelwood"";",How many restaurant are there in the Hazelwood district of Dallas ?,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Madison"" AND t2.category_name  =  ""escape games"";",What is the number of escape games in Madison,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t4.day  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"" GROUP BY t4.day;","find the total checkins in Moroccan restaurant in "" Los Angeles "" per day","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT t2.text FROM user as t3 JOIN review as t1 ON t3.user_id  =  t1.user_id JOIN tip as t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;,Find all the tips from a user who has written a review in 2012,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  ""Bistro Di Napoli"" AND t2.year  =  2015;","How many people reviewed "" Bistro Di Napoli "" in 2015 ?","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  ""Dallas"" AND name  =  ""Starbucks"" AND state  =  ""Texas"";",How many Starbucks are there in Dallas Texas ?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Vintner Grill"" AND t2.likes  >  9;","Find all tips about "" Vintner Grill "" that received more than 9 likes","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""MGM Grand Buffet"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","Find all cities in Texas in which there is a restaurant called "" MGM Grand Buffet ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.neighbourhood_name) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" AND t2.rating  =  5;",How many neighbourhoods have a business with rating 5 in Madison ?,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT text FROM review WHERE rating  <  1;,List all the reviews which rated a business less than 1,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""San Diego"" AND t2.year  =  2010 AND t3.name  =  ""Christine"";","How many businesses in "" San Diego "" has Christine reviewed in 2010 ?","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""Valet Service"" AND t3.category_name  =  ""restaurant"";",Find all restaurant with Valet Service in Dallas Texas,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,SELECT t2.name FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG(t1.rating)  <  3;,Find users whose average review rating is below 3,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""restaurant"" AND t3.category_name  =  ""Moroccan"";","find the total checkins in Moroccan restaurant in "" Los Angeles ""","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  ""Barrio Cafe"" AND t2.year  =  2015;","Find all users who have written tips for "" Barrio Cafe "" in 2015","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT name FROM business WHERE rating  <  2 AND state  =  ""Texas"";",Find all businesses in Texas with a rating below 2,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  ""Mesa Grill"" AND t2.category_name  =  ""restaurant"";","Find all users who reviewed restaurant "" Mesa Grill ""","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  ""Michelle"";",How many tips has Michelle written in 2010,"CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"";","What is the total likes on tips about "" Cafe Zinho ""","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";","Find all restaurant that serve Seafood in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  ""restaurant"" AND t3.year  =  2010;",List all users who reviewed businesses that are restaurant in 2010 .,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  ""Niloofar"";",list all the reviews by Niloofar,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t1.name  =  ""Texas de Brazil"" AND t1.state  =  ""Texas"" AND t2.category_name  =  ""restaurant"";","How many people reviewed the restaurant "" Texas de Brazil "" in Dallas Texas ?","CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Dallas"" AND t1.rating  >  3.5 AND t2.category_name  =  ""Bars"";","How many Bars in "" Dallas "" have a rating above 3.5 ?","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  ""Dallas"" AND t2.category_name  =  ""restaurant"" AND t4.name  =  ""Patrick"";",Which restaurant in Dallas were reviewed by user Patrick ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  ""Pennsylvania"" AND t2.category_name  =  ""restaurant"";",List all businesses that are restaurant in Pennsylvania .,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Seafood"" AND t3.category_name  =  ""restaurant"";","List all the Seafood restaurant in "" Los Angeles ""","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

"
yelp,"SELECT COUNT(DISTINCT text) FROM review WHERE month  =  ""March"";",Find the total number of reviews written in March,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
culture_company,SELECT director FROM movie WHERE year  =  1999 OR year  =  2000,Which directors had a movie in either 1999 or 2000?,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT title ,  director FROM movie WHERE year  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",What is the title and director for the movie with highest worldwide gross in the year 2000 or before?,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT title ,  director FROM movie WHERE year  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,SELECT director FROM movie WHERE year  =  2000 INTERSECT SELECT director FROM movie WHERE year  =  1999,Which directors had a movie both in the year 1999 and 2000?,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,SELECT director FROM movie WHERE year  =  1999 OR year  =  2000,Show all director names who have a movie in the year 1999 or 2000.,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,SELECT COUNT(DISTINCT director) FROM movie,How many movie directors are there?,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT AVG(budget_million) ,  MAX(budget_million) ,  MIN(budget_million) FROM movie WHERE year  <  2000","Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.","CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT publisher ,  COUNT(*) FROM book_club GROUP BY publisher",Show all publishers and the number of books for each publisher.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT title ,  year ,  director FROM movie ORDER BY budget_million","What are the titles, years, and directors of all movies, ordered by budget in millions?","CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT publisher ,  COUNT(*) FROM book_club GROUP BY publisher",How many books are there for each publisher?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT t2.company_name FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id WHERE t1.year  =  1999,Show all company names with a movie directed in year 1999.,"CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT t1.title ,  t3.book_title FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id JOIN book_club as t3 ON t3.book_club_id  =  t2.book_club_id WHERE t2.incorporated_in  =  'China'",Show the movie titles and book titles for all companies in China.,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

"
culture_company,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE year  =  1989,Which publishers did not publish a book in 1989?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT director FROM movie WHERE year  =  2000 INTERSECT SELECT director FROM movie WHERE year  =  1999,Show all director names who have a movie in both year 1999 and 2000.,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT year ,  book_title ,  publisher FROM book_club ORDER BY year DESC","What are the years, titles, and publishers for all books, ordered by year descending?","CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT category ,  COUNT(*) FROM book_club GROUP BY category",How many books fall into each category?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT t1.title ,  t3.book_title FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id JOIN book_club as t3 ON t3.book_club_id  =  t2.book_club_id WHERE t2.incorporated_in  =  'China'",What are the titles of movies and books corresponding to companies incorporated in China?,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

"
culture_company,SELECT DISTINCT publisher FROM book_club,Show all distinct publishers for books.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT COUNT(*) FROM book_club,How many book clubs are there?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT title ,  year ,  director FROM movie ORDER BY budget_million","Show all movie titles, years, and directors, ordered by budget.","CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,SELECT t1.company_name FROM culture_company as t1 JOIN book_club as t2 ON t1.book_club_id  =  t2.book_club_id WHERE t2.publisher  =  'Alyson',What are all the company names that have a book published by Alyson?,"CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT category FROM book_club WHERE year  >  1989 GROUP BY category HAVING COUNT(*)  >=  2,What categories have two or more corresponding books that were made after 1989?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT COUNT(*) FROM book_club,Count the number of book clubs.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1,Return the publisher that has published the most books.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT t2.company_name FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id WHERE t1.year  =  1999,What are all company names that have a corresponding movie directed in the year 1999?,"CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1,What is the publisher with most number of books?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT publisher FROM book_club WHERE year  =  1989 INTERSECT SELECT publisher FROM book_club WHERE year  =  1990,Show publishers with a book published in 1989 and a book in 1990.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT t1.company_name FROM culture_company as t1 JOIN book_club as t2 ON t1.book_club_id  =  t2.book_club_id WHERE t2.publisher  =  'Alyson',List all company names with a book published by Alyson.,"CREATE TABLE `culture_company` (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT REFERENCES book_club(book_club_id),
  movie_id TEXT REFERENCES movie(movie_id)
);

CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT book_title ,  author_or_editor FROM book_club WHERE year  >  1989","show the titles, and authors or editors for all books made after the year 1989.","CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT book_title ,  author_or_editor FROM book_club WHERE year  >  1989",What are the titles and authors or editors that correspond to books made after 1989?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT DISTINCT publisher FROM book_club,What are all the different book publishers?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT publisher FROM book_club WHERE year  =  1989 INTERSECT SELECT publisher FROM book_club WHERE year  =  1990,What are the publishers who have published a book in both 1989 and 1990?,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,"SELECT AVG(budget_million) ,  MAX(budget_million) ,  MIN(budget_million) FROM movie WHERE year  <  2000","What is the average, maximum, and minimum budget for all movies before 2000.","CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
culture_company,"SELECT year ,  book_title ,  publisher FROM book_club ORDER BY year DESC","Show the years, book titles, and publishers for all books, in descending order by year.","CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE year  =  1989,Show all publishers which do not have a book in 1989.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
behavior_monitoring,"SELECT t1.detention_type_code ,  t2.detention_type_description FROM detention as t1 JOIN Ref_detention_Type as t2 ON t1.detention_type_code  =  t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT(*) asC LIMIT 1",What are the code and description of the least frequent detention type ?,"CREATE TABLE `Ref_Detention_Type` (
  detention_type_code VARCHAR(10) PRIMARY KEY,
  detention_type_description VARCHAR(80)
);

CREATE TABLE `Ref_Detention_Type` (
  detention_type_code VARCHAR(10) PRIMARY KEY,
  detention_type_description VARCHAR(80)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT first_name FROM teachers WHERE email_address LIKE '%man%',"Find the first names of teachers whose email address contains the word ""man"".","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.zip_postcode FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t2.first_name  =  ""Lyla""","What is the zip code of the address where the teacher with first name ""Lyla"" lives?","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.address_id ,  t1.city FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",Find the id and city of the student address with the highest average monthly rental.,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.first_name FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",What are the id and first name of the student whose addresses have the highest average monthly rental?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT DISTINCT detention_type_code FROM detention,Return all distinct detention type codes.,"CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT email_address FROM students WHERE first_name  =  ""Emma"" AND last_name  =  ""Rohan""","What is the email of the student with first name ""Emma"" and last name ""Rohan""?","CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.monthly_rental FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  ""Texas""",What are the monthly rentals of student addresses in Texas state?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT t1.line_1 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id INTERSECT SELECT t1.line_1 FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id,What are the line 1 of addresses shared by some students and some teachers?,"CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.date_of_notes FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.first_name  =  ""Fanny""","Find the dates of assessment notes for students with first name ""Fanny"".","CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.first_name FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and first name of the student that has the most number of assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,SELECT t2.cell_mobile_number FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id ORDER BY t1.monthly_rental asC LIMIT 1,What is the cell phone number of the student whose address has the lowest monthly rental?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(*) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident ),How many students are not involved in any behavior incident?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT gender FROM teachers WHERE last_name  =  ""Medhurst""","What is the gender of the teacher with last name ""Medhurst""?","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.email_address FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t1.zip_postcode  =  ""918""","What are the email addresses of teachers whose address has zip code ""918""?","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT first_name ,  last_name FROM teachers ORDER BY last_name",Find the first names and last names of teachers in alphabetical order of last name.,"CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT detention_summary FROM detention,Return all detention summaries.,"CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT * FROM assessment_notes ORDER BY date_of_notes ASC,List all information about the assessment notes sorted by date in ascending order.,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT MAX(monthly_rental) ,  MIN(monthly_rental) FROM student_addresses",Find the maximum and minimum monthly rental for all student addresses.,"CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.line_1 ,  AVG(t2.monthly_rental) FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id",What are the line 1 and average monthly rentals of all student addresses?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.student_id ,  t2.last_name FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and last name of the student that has the most behavior incidents?,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT * FROM student_addresses ORDER BY monthly_rental DESC,"Find all information about student addresses, and sort by monthly rental in descending order.","CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.incident_type_code ,  t2.incident_type_description FROM behavior_incident as t1 JOIN ref_incident_type as t2 ON t1.incident_type_code  =  t2.incident_type_code GROUP BY t1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1",What are the code and description of the most frequent behavior incident type?,"CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Ref_Incident_Type` (
  incident_type_code VARCHAR(10) PRIMARY KEY,
  incident_type_description VARCHAR(80)
);

"
behavior_monitoring,"SELECT t1.text_of_notes FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  ""Schuster""","Find the texts of assessment notes for teachers with last name ""Schuster"".","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT city FROM addresses ORDER BY city,List all cities of addresses in alphabetical order.,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.teacher_id ,  t2.last_name FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t1.detention_type_code  =  ""AFTER"" GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1","Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(*) FROM assessment_notes,How many assessment notes are there in total?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT date_incident_start ,  date_incident_end FROM behavior_incident WHERE incident_type_code  =  ""NOISE""","What are the start and end dates for incidents with incident type code ""NOISE""?","CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT cell_mobile_number ,  email_address FROM students",Return the cell phone number and email address for all students.,"CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT incident_type_description FROM ref_incident_type WHERE incident_type_code  =  ""VIOLENCE""","What is the incident type description for the incident type with code ""VIOLENCE""?","CREATE TABLE `Ref_Incident_Type` (
  incident_type_code VARCHAR(10) PRIMARY KEY,
  incident_type_description VARCHAR(80)
);

"
behavior_monitoring,"SELECT COUNT(*) FROM addresses WHERE zip_postcode  =  ""197""",How many addresses have zip code 197?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.datetime_detention_start ,  datetime_detention_end FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  ""Schultz""","Find the start and end dates of detentions of teachers with last name ""Schultz"".","CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(DISTINCT incident_type_code) FROM behavior_incident,How many distinct incident type codes are there?,"CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.first_name ,  t2.last_name FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  ""Wisconsin""",What are the first names and last names of students with address in Wisconsin state?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.date_incident_start ,  date_incident_end FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.last_name  =  ""Fahey""","Find the start and end dates of behavior incidents of students with last name ""Fahey"".","CREATE TABLE `Students` (
  student_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Behavior_Incident` (
  incident_id INTEGER,
  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),
  student_id INTEGER REFERENCES Students(student_id),
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary VARCHAR(255),
  recommendations VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t2.address_id ,  t1.zip_postcode FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id ORDER BY monthly_rental DESC LIMIT 1",What are the id and zip code of the address with the highest monthly rental?,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(120),
  line_2 VARCHAR(120),
  line_3 VARCHAR(120),
  city VARCHAR(80),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(50),
  country VARCHAR(50),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Student_Addresses` (
  student_id INTEGER REFERENCES Students(student_id),
  address_id INTEGER REFERENCES Addresses(address_id),
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental DECIMAL(19,4),
  other_details VARCHAR(255)
);

"
sports_competition,SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament',What are the countries that participated in both friendly and tournament type competitions?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT name FROM club ORDER BY start_year ASC,What are the names of all the clubs starting with the oldest?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,SELECT SUM(points) FROM player,What is the total number of points for all players?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT position ,  AVG(points) FROM player GROUP BY position","For each position, what is the average number of points for players in that position?","CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT position FROM player GROUP BY name HAVING AVG(points)  >=  20,What are the positions of players whose average number of points scored by that position is larger than 20?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT competition_type ,  COUNT(*) FROM competition GROUP BY competition_type",List the types of competition and the number of competitions of each type.,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,"SELECT competition_type ,  COUNT(*) FROM competition GROUP BY competition_type",What are the types of competition and number of competitions for that type?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,"SELECT competition_type ,  country FROM competition",What are the types of every competition and in which countries are they located?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT SUM(points) FROM player,Show total points of all players.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT MAX(silver) ,  MIN(silver) FROM club_rank",What are the maximum and minimum number of silver medals for clubs.,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,"SELECT AVG(t2.points) FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t1.name  =  ""AIB""","What is the average points of players from club with name ""AIB"".","CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT t1.name ,  t2.player_id FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id",What are the names and players of all the clubs?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1,What is the most common competition type?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10,What are the positions with both players having more than 20 points and less than 10 points.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player),What are the names of all clubs that do not have any players?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT COUNT(*) FROM club,How many clubs are there?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,"SELECT DISTINCT year FROM competition WHERE competition_type != ""Tournament""",What are the different years for all competitions that are not of type equal to tournament?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT COUNT(*) FROM club_rank WHERE total  <  10,How many clubs have total medals less than 10?,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly',What are the countries that have never participated in any friendly-type competitions?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT DISTINCT region FROM club ORDER BY region ASC,List the distinct region of clubs in ascending alphabetical order.,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,"SELECT AVG(t2.points) FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t1.name  =  ""AIB""","What is the average number of points for players from the ""AIB"" club?","CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT(*)  <=  5,List the types of competition that have at most five competitions of that type.,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT COUNT(DISTINCT position) FROM player,How many different position for players are listed?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT position ,  AVG(points) FROM player GROUP BY position",List the position of players and the average number of points of players of each position.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT DISTINCT year FROM competition WHERE competition_type != ""Tournament""","What are the distinct years in which the competitions type is not ""Tournament""?","CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT name FROM player WHERE points  >  (SELECT AVG(points) FROM player),What are the names of all players that got more than the average number of points?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT(*)  <=  5,What are the types of competition that have most 5 competitions for that type?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT COUNT(*) FROM club_rank WHERE total  <  10,What is the total number of clubs that have less than 10 medals in total?,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,"SELECT t1.name FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t2.position  =  ""Right Wing""","Show the names of clubs that have players with position ""Right Wing"".","CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT MAX(silver) ,  MIN(silver) FROM club_rank",What are the maximum and minimum number of silver medals for all the clubs?,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,SELECT AVG(gold) FROM club_rank,What is the average number of gold medals for clubs?,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament',which countries did participated in both Friendly and Tournament type competitions.,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT AVG(gold) FROM club_rank,What is the average number of gold medals for a club?,"CREATE TABLE `club_rank` (
  Rank REAL PRIMARY KEY,
  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL
);

"
sports_competition,"SELECT t1.name FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t2.position  =  ""Right Wing""","What are the names of the clubs that have players in the position of ""Right Wing""?","CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player),List the names of clubs that do not have any players.,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT COUNT(DISTINCT position) FROM player,how many different positions are there?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT DISTINCT region FROM club ORDER BY region ASC,What are the different regions of clubs in ascending alphabetical order?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10,What are the positions of both players that have more than 20 20 points and less than 10 points?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,"SELECT competition_type ,  country FROM competition",What are the types and countries of competitions?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly',Find the countries that have never participated in any competition with Friendly type.,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,"SELECT COUNT(*) ,  position FROM player WHERE points  <  30 GROUP BY position",find the number of players whose points are lower than 30 in each position.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of competition.,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT name FROM club ORDER BY name DESC,What are the names of all the clubs ordered in descending alphabetical order?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,which country did participated in the most number of Tournament competitions?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,SELECT COUNT(*) FROM club,What is the total number of clubs?,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,what is the name of the country that participated in the most tournament competitions?,"CREATE TABLE `competition` (
  Competition_ID INT PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

"
sports_competition,"SELECT COUNT(*) ,  position FROM player WHERE points  <  30 GROUP BY position",What is the number of players who have points less than 30 for each position?,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
race_track,"SELECT name ,  location ,  seating FROM track ORDER BY year_opened DESC LIMIT 1","What is the name, location and seating for the most recently opened track?","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the track that has had the greatest number of races?,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT DISTINCT location FROM track,What are distinct locations where tracks are located?,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT name ,  class ,  date FROM race","What are the names, classes, and dates for all races?","CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT class FROM race GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1,What is the race class with most number of races.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT class ,  COUNT(*) FROM race GROUP BY class","What are the different classes of races, and how many races correspond to each?","CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  class ,  date FROM race","Show name, class, and date for all races.","CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT name FROM track EXCEPT SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id WHERE t1.class  =  'GT',Give the names of tracks that do not have a race in the class 'GT'.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  location FROM track",What are the names and locations of all tracks?,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT MIN(seating) ,  MAX(seating) ,  AVG(seating) FROM track","What is the minimum, maximum, and average seating for all tracks.","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT class ,  COUNT(*) FROM race GROUP BY class",Show the race class and number of races in each class.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT class FROM race GROUP BY class HAVING COUNT(*)  >=  2,List the race class with at least two races.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000,Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT name ,  location ,  year_opened FROM track WHERE seating  >  (SELECT AVG(seating) FROM track)","What are the names, locations, and years of opening for tracks with seating higher than average?","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT class FROM race GROUP BY class HAVING COUNT(*)  >=  2,What are the classes of races that have two or more corresponding races?,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT t2.name ,  COUNT(*) FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id",Show the name of track and the number of races in each track.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating","What are the names and seatings for all tracks opened after 2000, ordered by seating?","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT location FROM track WHERE seating  >  90000 INTERSECT SELECT location FROM track WHERE seating  <  70000,"What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000,What are the years of opening for tracks with seating between 4000 and 5000?,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT t2.name ,  t2.location FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id HAVING COUNT(*)  =  1",What are the names and locations of tracks that have had exactly 1 race?,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race),Show all track names that have had no races.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT COUNT(*) FROM track,How many tracks do we have?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT class FROM race GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1,Give the class of races that is most common.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  location ,  year_opened FROM track WHERE seating  >  (SELECT AVG(seating) FROM track)","Show the name, location, open year for all tracks with a seating higher than the average.","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT DISTINCT class FROM race,Return the different classes of races.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT DISTINCT location FROM track,Give the different locations of tracks.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT COUNT(*) FROM race,Count the number of races.,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT location FROM track WHERE seating  >  90000 INTERSECT SELECT location FROM track WHERE seating  <  70000,Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT name FROM track EXCEPT SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id WHERE t1.class  =  'GT',What are the names for tracks without a race in class 'GT'.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT COUNT(*) FROM track,Count the number of tracks.,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,SELECT COUNT(*) FROM race,How many races are there?,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race),Return the names of tracks that have no had any races.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT DISTINCT class FROM race,What are the distinct classes that races can have?,"CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT t1.name ,  t1.date ,  t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id",Show the name and date for each race and its track name.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id ORDER BY COUNT(*) DESC LIMIT 1,Show the name of track with most number of races.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  location FROM track",Show the name and location for all tracks.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT t2.name ,  t2.location FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id HAVING COUNT(*)  =  1",Show the name and location of track with 1 race.,"CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

"
race_track,"SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating","Show names and seatings, ordered by seating for all tracks opened after 2000.","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China')",Return the titles and directors of films that were never in the market of China.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1,What is the title of the film that has the highest high market estimation.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995,Who are the different directors of films which had market estimation in 1995?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT COUNT(*) FROM film,Count the number of films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  ""Japan"" ORDER BY t1.year DESC","What are the years of film market estimation for the market of Japan, ordered by year descending?","CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT country FROM market ORDER BY number_cities DESC,What are the countries for each market ordered by decreasing number of cities?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id",What are the titles of films and corresponding types of market estimations?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000,List the studios which average gross is above 4500000.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  ""Walter Hill""",Which studios have never worked with the director Walter Hill?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT MAX(number_cities) ,  MIN(number_cities) FROM market",Return the maximum and minimum number of cities across all markets.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT type FROM film_market_estimation WHERE year  =  1995,Return the types of film market estimations in 1995.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT country FROM market ORDER BY country ASC,"What are the countries for each market, ordered alphabetically?","CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation),What are the titles of films that do not have a film market estimation?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT title ,  studio FROM film WHERE studio LIKE ""%Universal%""","What are the titles and studios of films that have been produced by a studio whose name contains ""Universal""?","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT COUNT(*) FROM market WHERE number_cities  <  300,How many markets have number of cities smaller than 300?,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT COUNT(*) FROM market WHERE number_cities  <  300,Count the number of markets that have a number of cities lower than 300.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China')",What are the titles and directors of the films were never presented in China?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio FROM film WHERE director  =  ""Nicholas Meyer"" INTERSECT SELECT studio FROM film WHERE director  =  ""Walter Hill""","Show the studios that have produced films with director ""Nicholas Meyer"" and ""Walter Hill"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT type FROM film_market_estimation WHERE year  =  1995,What are the types of film market estimations in year 1995?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT MAX(number_cities) ,  MIN(number_cities) FROM market",What are the maximum and minimum number of cities in all markets.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  ""Walter Hill""","Show the studios that have not produced films with director ""Walter Hill"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT country FROM market ORDER BY number_cities DESC,List all countries of markets in descending order of number of cities.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT country FROM market ORDER BY country ASC,List all countries of markets in ascending alphabetical order.,"CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio ,  COUNT(*) FROM film GROUP BY studio",How films are produced by each studio?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000,Give the average number of cities within markets that had a low market estimation larger than 10000?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1,List the name of film studio that have the most number of films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000,Which studios have an average gross of over 4500000?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT director FROM film,What are the different film Directors?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id",Please show the titles of films and the types of market estimations.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT low_estimate ,  high_estimate FROM film_market_estimation",What are the low and high estimates of film markets?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,"SELECT low_estimate ,  high_estimate FROM film_market_estimation",Return the low and high estimates for all film markets.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
film_rank,SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000,What is the average number of cities of markets with low film market estimate bigger than 10000?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  ""Japan"" ORDER BY t1.year DESC","Please list the years of film market estimations when the market is in country ""Japan"" in descending order.","CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT studio FROM film WHERE director  =  ""Nicholas Meyer"" INTERSECT SELECT studio FROM film WHERE director  =  ""Walter Hill""",What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT COUNT(*) FROM film,How many film are there?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation),List the title of films that do not have any market estimation.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1,Return the title of the film with the highest high estimate?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995,Show the distinct director of films with market estimation in the year of 1995.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT DISTINCT director FROM film,List the distinct director of all films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2,What are the names of studios that have made two or more films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT studio ,  COUNT(*) FROM film GROUP BY studio",List the studios of each film and the number of films produced by that studio.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2,List the names of studios that have at least two films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT AVG(gross_in_dollar) FROM film,What is the average ticket sales gross in dollars of films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT AVG(gross_in_dollar) FROM film,Return the average gross sales in dollars across all films.,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
product_catalog,SELECT COUNT(*) FROM catalog_contents,Find the total number of catalog contents.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  ""8""",Find the names of catalog entries with level number 8.,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",Find the names and publication dates of all catalogs that have catalog level number greater than 5.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,What is the level name of the cheapest catalog (in USD)?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,Find the entry name of the catalog with the highest price (in USD).,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8,What are the catalog entry names of the products with next entry ID above 8?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700",Find the name and capacity of products with price greater than 700 (in USD).,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8,Name all the products with next entry ID greater than 8.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3,What are the attribute data types with more than 3 attribute definitions?,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1,Find the dates on which more than one revisions were made.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,Which catalog content has the highest height? Give me the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,What is the product with the highest height? Give me the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT DISTINCT(catalog_entry_name) FROM catalog_contents,Find the names of all the catalog entries.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5,Which catalog contents have length below 3 or above 5? Find the catalog entry names.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents",Give me the average and minimum price (in Euro) of the products.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,Which catalog content has the smallest capacity? Return the catalog entry name.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","Find the names of all the products whose stock number starts with ""2"".","CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",What are the name and publication date of the catalogs with catalog level number above 5?,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","Which catalog contents have a product stock number that starts from ""2""? Show the catalog entry names.","CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,What is the entry name of the most expensive catalog (in USD)?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10",What are the name and level of catalog structure with level number between 5 and 10,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1,On which days more than one revisions were made on catalogs.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,"SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",Find the name and attribute ID of the attribute definitions with attribute value 0.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

"
product_catalog,"SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents",What are the average and minimum price (in Euro) of all products?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1),What are the entry names of catalog with the attribute possessed by most entries.,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%""","Which catalog publishers have substring ""Murray"" in their names?","CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,Find the name of the product that has the smallest capacity.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,Find the level name of the catalog with the lowest price (in USD).,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1),Find the entry names of the catalog with the attribute that have the most entries.,"CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents_Additional_Attributes` (
  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  attribute_id INTEGER,
  attribute_value VARCHAR(255)
);

CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700",Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,Which catalog publisher has published the most catalogs?,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5,Find the names of the products with length smaller than 3 or height greater than 5.,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10",Find the name and level of catalog structure with level between 5 and 10.,"CREATE TABLE `Catalog_Structure` (
  catalog_level_number INTEGER,
  catalog_id INTEGER REFERENCES Catalogs(catalog_id),
  catalog_level_name VARCHAR(50)
);

"
product_catalog,SELECT DISTINCT(catalog_entry_name) FROM catalog_contents,What are all the catalog entry names?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,"SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  ""Green""","Find the attribute data type for the attribute named ""Green"".","CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,Find the catalog publisher that has the most catalogs.,"CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
flight_4,SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),How many routes go from the United States to Canada?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,"SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10",Find the names of the top 10 airlines that operate the most number of routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airlines WHERE country  =  'Russia',What is the number of airlines based in Russia?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT AVG(elevation) ,  country FROM airports GROUP BY country","For each country, what is the average elevation of that country's airports?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC",How many airports are there per country? Order the countries by decreasing number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'","What is the name, city, country, and elevation for every airport in the city of New York?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE city  =  'Goroka',Find the name of the airport in the city of Goroka.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy',Find the number of routes with destination airports in Italy.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,SELECT country FROM airlines WHERE name LIKE 'Orbit%',Find the country of the airlines whose name starts with 'Orbit'.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airlines,What is the total number of airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina',Find the name of the airports located in Cuba or Argentina.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*),List the cities which have more than 2 airports sorted by the number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'","Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the busiest source airport that runs most number of routes in China.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC",List all countries and their number of airlines in the descending order of number of airlines.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airlines WHERE country  =  'Russia',How many airlines does Russia has?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,Which country is the airport that has the highest altitude located in?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',Find the number of different airports which are the destinations of the American Airlines.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC","Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airlines,How many airlines are there?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland',What is the highest elevation of an airport in the country of Iceland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airport that is the destination of the most number of routes that start in China?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),Find the id of routes whose source and destination airports are in the United States.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3,Return the cities with more than 3 airports in the United States.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airport with the most number of routes that start in China?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2,Find the cities which have exactly two airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3),What is the count of cities with more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland',In how many cities are there airports in the country of Greenland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC",How many airports are there per city in the United States? Order the cities by decreasing number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT AVG(elevation) ,  country FROM airports GROUP BY country",Find the average elevation of all airports for each country.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC",How many airports are there per city in the US ordered from most to least?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada',Find the number of routes whose destination airports are in Canada.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1",Find the name and city of the airport which is the source for the most number of flight routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,Which countries has the most number of airlines whose active status is 'Y'?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2,What are the cities with exactly two airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE name LIKE 'Orbit%',What are the countries of all airlines whose names start with Orbit?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1",What is the name and city of the airport that the most routes end at?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the airline with the most routes?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM airports WHERE name LIKE '%International%',Find the number of airports whose name contain the word 'International'.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10","For the airline ids with the top 10 most routes operated, what are their names?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name",Find the number of routes for each source airport and the airport name.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the busiest destination airport that runs most number of routes in China.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1",List the cities which have more than one airport and number of airports.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport',What is the number of routes that end at John F Kennedy International Airport?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,What are the countries with the most airlines whose active status is Y?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1","Find the name, city, and country of the airport that has the lowest altitude.","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1",Find the name and city of the airport which is the destination of the most number of routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC","What is the number of airports per country, ordered from most to least?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines',What is the number of routes operated by the airline American Airlines whose destinations are in Italy?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*),What are the cities that have more than 2 airports sorted by number of airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),What is the id of the routes whose source and destination airports are in the United States?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1","Find the name, city, and country of the airport that has the highest latitude.","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina',What are the names of all airports in Cuba or Argentina?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,What are the names of all airports whose elevation is between -50 and 50?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport',Find the number of routes that have destination John F Kennedy International Airport.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland',What is the maximum elevation of all airports in the country of Iceland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada',How many routes end in a Canadian airport?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name","For each country and airline name, how many routes are there?","CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States'),Find the number of routes from the United States to Canada.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy',What is the number of routes whose destinations are Italian airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',Find the number of routes operated by American Airlines.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,Which countries has the most number of airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,What is the country of the airport with the highest elevation?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC",How many airlines operate out of each country in descending order?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',What is the number of different different airports that are destinations for American Airlines?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3),How many cities are there that have more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airports WHERE name LIKE '%International%',How many airports' names have the word Interanation in them?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the country with the most number of home airlines?,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland',How many different cities do have some airport in the country of Greenland?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the name of airline which runs the most number of routes.,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines',Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,"CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE city  =  'Goroka',What are the names of the airports in the city of Goroka?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,Find the name of airports whose altitude is between -50 and 50.,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines',How many routes does American Airlines operate?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
music_1,"SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  ""Female"" AND t2.languages  =  ""bangla""",What countries are the female artists who sung in the language Bangla from?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT MIN(resolution) FROM song WHERE languages  =  ""english"")",What are the different names for all songs that have a higher resolution than English songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp4"" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  ""mp3"" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",Return the names of songs for which format is mp3 and resolution is below 1000.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT DISTINCT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.rating  >  9",List the name and country of origin for all singers who have produced songs with rating above 9.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  ""Female"" AND t2.languages  =  ""bangla""",What is the country of origin of the artist who is female and produced a song in Bangla?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,SELECT t1.artist_name FROM song as t1 JOIN files as t2 ON t1.f_id  =  t2.f_id ORDER BY t2.duration LIMIT 1,What is the name of the artist who produced the shortest song?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT DISTINCT t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.resolution  <  800",List the file size and format for all songs that have resolution lower than 800.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,SELECT f_id FROM song WHERE resolution  >  (SELECT MAX(resolution) FROM song WHERE rating  <  8),What is the id of every song that has a resolution higher than that of a song with a rating below 8?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT song_name FROM song WHERE rating  <  (SELECT MAX(rating) FROM song WHERE genre_is  =  ""blues"")",What are the names of the songs that have a lower rating than at least one blues song?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.resolution  >  900 GROUP BY t2.artist_name HAVING COUNT(*)  >=  1",What is the name and country of origin for each artist who has released a song with a resolution higher than 900?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" AND gender  =  ""Male""",What are the names of artists who are Male and are from UK?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT MIN(resolution) FROM song WHERE languages  =  ""english"")",Find the distinct names of all songs that have a higher resolution than some songs in English.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3","What are the names of the three artists who have produced the most songs, and how many works did they produce?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,What are the languages that are used most often in songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT f_id FROM files ORDER BY duration DESC LIMIT 1,What is the id of the longest song?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp3""",What are the id of all the files in mp3 format?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  ""modern"")",What are the ids of all songs that have higher resolution of the average resolution in the modern genre?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT AVG(rating) ,  languages FROM song GROUP BY languages",What is the average rating of songs for each language?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""english""",What are the names of all singers that are from the UK and released a song in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT AVG(t1.duration) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  ""mp3"" AND t2.resolution   <  800",What is the average song duration for the songs that are in mp3 format and whose resolution below 800?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""bangla"" GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3",What are the top 3 artists with the largest number of songs in the language Bangla?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  ""mp3"" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",What are the names of all songs that are in mp3 format and have a resolution lower than 1000?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp3""",What are the id of songs whose format is mp3.,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE ""4:%"" UNION SELECT song_name FROM song WHERE languages  =  ""english""",What are the names of all songs that are approximately 4 minutes long or are in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT MIN(t1.duration) ,  MIN(t2.rating) ,  t2.genre_is FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is",What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT DISTINCT artist_name FROM song WHERE languages  =  ""english"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT DISTINCT t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.resolution  <  800",What are the file sizes and formats for all songs with a resolution lower than 800?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.duration ,  t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.genre_is  =  ""pop"" ORDER BY t2.song_name","What is the duration, file size, and song format for every pop song, ordered by title alphabetically?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",What are the names of the artists that are from the UK and sang songs in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",Find the names of the artists who are from UK and have produced English songs.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT COUNT(*) FROM artist WHERE country  =  ""Bangladesh""",How many Bangladeshi artists are listed?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1,Find the file format that is used by the most files.,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT song_name FROM song WHERE genre_is  =  ""modern"" OR languages  =  ""english""",Find the names of songs whose genre is modern or language is English.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT MAX(t2.resolution) ,  MIN(t2.resolution) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE ""3:%""",What are the maximum and minimum resolution of songs whose duration is 3 minutes?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.resolution  >  900 GROUP BY t2.artist_name HAVING COUNT(*)  >=  1",Find the name and country of origin for all artists who have release at least one song of resolution above 900.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT MAX(t1.duration) ,  MAX(t2.resolution) ,  t2.languages FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.languages ORDER BY t2.languages","What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3",Find the names and number of works of the three artists who have produced the most songs.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT DISTINCT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.rating  >  9",What are the different names and countries of origins for all artists whose song ratings are above 9?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT g_name ,  rating FROM genre ORDER BY g_name","List the names of all genres in alphabetical oder, together with its ratings.","CREATE TABLE `genre` (
  g_name varchar2(20) PRIMARY KEY,
  rating varchar2(10),
  most_popular_in varchar2(50)
);

"
music_1,SELECT t1.artist_name FROM song as t1 JOIN files as t2 ON t1.f_id  =  t2.f_id ORDER BY t2.duration LIMIT 1,What are the names of the artists who sang the shortest song?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT COUNT(*) FROM artist WHERE country  =  ""Bangladesh""",How many artists are from Bangladesh?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp4"" UNION SELECT f_id FROM song WHERE resolution  >  720",What are the ids of all songs that are available on mp4 or have a higher resolution than 720?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT song_name FROM song WHERE genre_is  =  ""modern"" OR languages  =  ""english""",What are the names of the songs that are modern or sung in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) LIMIT 1,Find the country of origin for the artist who made the least number of songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,SELECT song_name FROM song WHERE rating  <   (SELECT MIN(rating) FROM song WHERE languages  =  'english'),What are the song names for every song whose rating is less than the minimum rating for English songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) LIMIT 1,What country is the artist who made the fewest songs from?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,"What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT COUNT(*) ,  formats FROM files GROUP BY formats",How many songs were released for each format?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,What is the language that was used most often in songs with resolution above 500?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT MAX(t1.duration) ,  MAX(t2.resolution) ,  t2.languages FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.languages ORDER BY t2.languages",What are the maximum duration and resolution of songs grouped and ordered by languages?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",What is the name of the song that was released in the most recent year?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""bangla"" GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3",Find the top 3 artists who have the largest number of songs works whose language is Bangla.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.rating DESC LIMIT 3",What are the names and countries of origin for the artists who produced the top three highly rated songs.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.duration ,  t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.genre_is  =  ""pop"" ORDER BY t2.song_name","List the duration, file size and format of songs whose genre is pop, ordered by title?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT COUNT(*) ,  gender FROM artist GROUP BY gender",How many artists are male and how many are female?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT MAX(t2.resolution) ,  MIN(t2.resolution) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE ""3:%""",What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  ""modern"")",What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,What is the language used most often in the songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT g_name ,  rating FROM genre ORDER BY g_name","What are the names of all genres in alphabetical order, combined with its ratings?","CREATE TABLE `genre` (
  g_name varchar2(20) PRIMARY KEY,
  rating varchar2(10),
  most_popular_in varchar2(50)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.song_name LIKE ""%love%""","What is the name and country of origin of the artist who released a song that has ""love"" in its title?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT song_name FROM song WHERE rating  <  (SELECT MAX(rating) FROM song WHERE genre_is  =  ""blues"")",What are the names of all songs that have a lower rating than some song of blues genre?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.rating DESC LIMIT 3",What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""english""",Return the names of singers who are from UK and released an English song.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp4"" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",Find the id of songs that are available in mp4 format and have resolution lower than 1000.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT COUNT(*) FROM files WHERE duration LIKE ""4:%""",How many songs have 4 minute duration?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  ""Female""","How many songs, on average, are sung by a female artist?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.gender ,  t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.resolution LIMIT 1",Return the gender and name of artist who produced the song with the lowest resolution.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.artist_name ,  t1.gender FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.releasedate LIKE ""%Mar%""",What are the names and genders of all artists who released songs in the month of March?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT DISTINCT artist_name FROM song WHERE languages  =  ""english"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",Find the names of the artists who have produced English songs but have never received rating higher than 8.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT MIN(t1.duration) ,  MIN(t2.rating) ,  t2.genre_is FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is","What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.song_name LIKE ""%love%""","What are the names of the artists who released a song that has the word love in its title, and where are the artists from?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""english"" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1",Find the names and number of works of all artists who have at least one English songs.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT song_name FROM song WHERE languages  =  ""english""",Find the names of all English songs.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT f_id FROM song WHERE resolution  >  (SELECT MAX(resolution) FROM song WHERE rating  <  8),What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",What is the name of the song that was released most recently?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT AVG(rating) ,  AVG(resolution) FROM song WHERE languages  =  ""bangla""",What are the average rating and resolution of songs that are in Bangla?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT t1.artist_name ,  t1.gender FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.releasedate LIKE ""%Mar%""",List the name and gender for all artists who released songs in March.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT COUNT(*) ,  gender FROM artist GROUP BY gender",What is the number of artists for each gender?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT DISTINCT artist_name FROM artist WHERE country  =  ""Bangladesh"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",What are the names of the different artists from Bangladesh who never received a rating higher than a 7?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT t1.gender ,  t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.resolution LIMIT 1",What is the gender and name of the artist who sang the song with the smallest resolution?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT song_name FROM song WHERE languages  =  ""english""",What are the names of all songs in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT AVG(rating) ,  languages FROM song GROUP BY languages",What is the average song rating for each language?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT AVG(t1.duration) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  ""mp3"" AND t2.resolution   <  800",What is the average duration of songs that have mp3 format and resolution below 800?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT f_id FROM files WHERE formats  =  ""mp4"" UNION SELECT f_id FROM song WHERE resolution  >  720",What are the ids of songs that are available in either mp4 format or have resolution above 720?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT DISTINCT artist_name FROM artist WHERE country  =  ""Bangladesh"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",Find the names of the artists who are from Bangladesh and have never received rating higher than 7.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   ""english"" ORDER BY rating","What is the id, genre, and name of the artist for every English song ordered by ascending rating?","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1,What is the most popular file format?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  ""english"" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1",What are the names and number of works for all artists who have sung at least one song in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   ""english"" ORDER BY rating","List the id, genre and artist name of English songs ordered by rating.","CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
game_injury,SELECT COUNT(DISTINCT source) FROM injury_accident,How many different kinds of information sources are there for injury accidents?,"CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT season ,  home_team ,  away_team FROM game","List the season, home team, away team of all the games.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

"
game_injury,SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Walter Samuel' INTERSECT SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Thiago Motta',List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",Find the id and name of the stadium where the largest number of injury accidents occurred.,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,SELECT t1.season FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id WHERE t2.player  =  'Walter Samuel',What is the season of the game which causes the player 'Walter Samuel' to get injured?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT t2.name ,  t2.average_attendance ,  t2.total_attendance FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id","Show the name, average attendance, total attendance for stadiums where no accidents happened.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,SELECT date FROM game ORDER BY home_team DESC,List the dates of games by the home team name in descending order.,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

"
game_injury,SELECT COUNT(*) FROM game WHERE season  >  2007,How many games are held after season 2007?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

"
game_injury,SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100,What is the average attendance of stadiums with capacity percentage higher than 100%?,"CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What are the id and name of the stadium where the most injury accidents happened?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.season ,  t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.injury  =  'Foot injury' OR t3.injury  =  'Knee problem'",In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.id ,  t1.score ,  t1.date FROM game as t1 JOIN injury_accident as t2 ON t2.game_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2","What are the ids, scores, and dates of the games which caused at least two injury accidents?","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.date ,  t2.player FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id ORDER BY t1.season DESC","For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,SELECT COUNT(DISTINCT t1.injury) FROM injury_accident as t1 JOIN game as t2 ON t1.game_id  =  t2.id WHERE t2.season  >  2010,How many distinct kinds of injuries happened after season 2010?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT player ,  number_of_matches ,  source FROM injury_accident WHERE injury != 'Knee problem'","What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
game_injury,"SELECT t1.id ,  COUNT(*) FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id GROUP BY t1.id",How many games has each stadium held?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,"SELECT name FROM stadium WHERE name LIKE ""%Bank%""","Which stadium name contains the substring ""Bank""?","CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
game_injury,SELECT COUNT(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ),How many games are free of injury accidents?,"CREATE TABLE `game` (
  stadium_id INT REFERENCES stadium(id),
  id INT PRIMARY KEY,
  Season INT,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT
);

CREATE TABLE `injury_accident` (
  game_id INT REFERENCES game(id),
  id INT PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT
);

"
hospital_1,SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,Which physicians have never taken any appointment? Find their names.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Find all procedures which cost more than 1000 or which physician John Wen was trained in.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X',Find the names of patients who are not using the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1,Find the name of the nurse who has the largest number of appointments.,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What procedures cost less than 5000 and have John Wen as a trained physician?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,Find the patient who has the most recent undergoing treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

"
hospital_1,SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;,Which department has the largest number of employees?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT COUNT(patient) FROM stay WHERE room  =  112,How many patients stay in room 112?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,SELECT name FROM physician WHERE position LIKE '%senior%',Find the name of physicians whose position title contains the word 'senior'.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What is the average cost of procedures that physician John Wen was trained in?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0,What are the unique block codes that have available rooms?,"CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1,Find the name of the patient who made the appointment with the most recent start date.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry',Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry',Find the name of physicians who are affiliated with Surgery or Psychiatry department.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000,Find the physicians who are trained in a procedure that costs more than 5000.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1,Which physician was trained in the procedure that costs the most.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1,Find the physician who prescribed the highest dose. What is his or her name?,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111,Find the name of medication used on the patient who stays in room 111?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X',What are the names of patients who are not taking the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1",Find the names of all physicians and their primary affiliated departments' names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,List the name of physicians who took some appointment.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0,Tell me the distinct block codes where some rooms are available.,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT DISTINCT name FROM nurse ORDER BY name,List the names of all distinct nurses ordered by alphabetical order?,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What are the procedures that cost more than 1000 or are specialized in by physician John Wen?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT COUNT(*) FROM appointment,Count how many appointments have been made in total.,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse,What are the distinct names of nurses on call?,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn,List the names of patients who have made appointments.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  ""Thesisin""",What is the names of the physicians who prescribe medication Thesisin?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Find the names of procedures which physician John Wen was trained in.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry',Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1,List the names of departments where some physicians are primarily affiliated with.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid",Return the name of each physician and the number of patients he or she treats.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111,What is the name of the medication used for the patient staying in room 111?,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,What are the names of all the physicians who took appointments.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",What are each physician's employee id and department id primarily affiliated.,"CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111,What are the names of patients who are staying in room 111 and have an undergoing treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT COUNT(*) FROM appointment,How many appointments are there?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the nurse has the most appointments?,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT name FROM nurse ORDER BY name,What is the alphabetically ordered list of all the distinct names of nurses?,"CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse,Find the names of nurses who are on call.,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1,Find the name of physicians who are in charge of more than one patient.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",List the physicians' employee ids together with their primary affiliation departments' ids.,"CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,"SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand",Find the number of medications prescribed for each brand.,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT COUNT(DISTINCT roomtype) FROM room,How many different types of rooms are there?,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,"SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",What are the names of procedures physician John Wen was trained in?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand",How many medications are prescribed for each brand?,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  ""X""",Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;,Tell me the employee id of the head of the department with the least employees.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1,What are the names of the physician who prescribed the highest dose?,"CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn,What are names of patients who made an appointment?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,Find the patient who most recently stayed in room 111.,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor",Find the number of rooms located on each block floor.,"CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111,Find the names of all patients who have an undergoing treatment and are staying in room 111.,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor",How many rooms does each block floor have?,"CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT COUNT(DISTINCT roomtype) FROM room,Find the number of distinct room types available.,"CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid,List the name of physicians who never took any appointment.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid,Find the names of nurses who are nursing an undergoing treatment.,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT name ,  cost FROM procedures ORDER BY cost DESC",Sort the list of names and costs of all procedures in the descending order of cost.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""","Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?","CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1,Find the physician who was trained in the most expensive procedure?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1,What are the names of departments that have primarily affiliated physicians.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,"SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  ""Thesisin""",List the names of all the physicians who prescribe Thesisin as medication.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT name FROM procedures ORDER BY cost LIMIT 3,What are the three most costly procedures?,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;",Find the name and position of the head of the department with the least employees.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1",What are the name and primarily affiliated department name of each physician?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1,What is the id of the appointment that started most recently?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  ""X""",Find the name and position of physicians who prescribe some medication whose brand is X?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,What nurses are on call with block floor 1 and block code 1? Tell me their names.,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,"SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = ""John Dorian""",How many patients' prescriptions are made by physician John Dorian?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,Find the ids of the nurses who are on call in block floor 1 and block code 1.,"CREATE TABLE `On_Call` (
  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),
  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),
  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),
  OnCallStart DATETIME PRIMARY KEY,
  OnCallEnd DATETIME PRIMARY KEY
);

"
hospital_1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","Tell me the highest, lowest, and average cost of procedures.","CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' ),Find the number of patients who are not using the medication of Procrastin-X.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","What are the highest cost, lowest cost and average cost of procedures?","CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT name ,  cost FROM procedures ORDER BY cost DESC",List the name and cost of all procedures sorted by the cost from the highest to the lowest.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT name FROM physician WHERE position LIKE '%senior%',What are the names of the physicians who have 'senior' in their titles.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT COUNT(patient) FROM stay WHERE room  =  112,Count the number of patients who stayed in room 112.,"CREATE TABLE `Stay` (
  StayID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  Room INTEGER REFERENCES Room(RoomNumber),
  StayStart DATETIME,
  StayEnd DATETIME
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode",Find the number of rooms for different block code?,"CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,"SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  ""John Wen""",Compute the mean price of procedures physician John Wen was trained in.,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,"SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode",How many rooms are located for each block code?,"CREATE TABLE `Block` (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode INTEGER PRIMARY KEY
);

CREATE TABLE `Room` (
  RoomNumber INTEGER,
  RoomType VARCHAR(30),
  BlockFloor INTEGER REFERENCES Block(BlockFloor),
  BlockCode INTEGER REFERENCES Block(BlockCode),
  Unavailable BOOLEAN
);

"
hospital_1,SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid,Which nurses are in charge of patients undergoing treatments?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

CREATE TABLE `Nurse` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  Registered BOOLEAN,
  SSN INTEGER
);

"
hospital_1,SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;,What is the employee id of the head whose department has the least number of employees?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;,Find the department with the most employees.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1,Which physicians are in charge of more than one patient? Give me their names.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry',Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Affiliated_With` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),
  PrimaryAffiliation BOOLEAN
);

"
hospital_1,"SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = ""John Dorian""",Find the number of patients' prescriptions physician John Dorian made.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

"
hospital_1,SELECT name FROM procedures ORDER BY cost LIMIT 3,Find the three most expensive procedures.,"CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
hospital_1,SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000,Which physicians are trained in procedures that are more expensive than 5000?,"CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

CREATE TABLE `Trained_In` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  CertificationDate DATETIME,
  CertificationExpires DATETIME
);

CREATE TABLE `Procedures` (
  Code INTEGER,
  Name VARCHAR(30),
  Cost REAL
);

"
wine_1,SELECT t1.color FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape GROUP BY t2.grape ORDER BY AVG(price) DESC LIMIT 1,Give the color of the grape whose wine products have the highest average price?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,SELECT name FROM wine WHERE score  >  90,List the names of all distinct wines that have scores higher than 90.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT winery FROM wine GROUP BY winery HAVING COUNT(*)  >=  4,Find the wineries that have at least four wines.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT AVG(price) ,  AVG(cases) FROM wine WHERE year  =  2009 AND grape  =  ""Zinfandel""",What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT AVG(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  ""Sonoma""",What is the average price of wines produced in appelations in Sonoma County?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT DISTINCT t1.grape FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White"" AND t2.score  >  90",Find the white grape used to produce wines with scores above 90.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT MAX(price) ,  MAX(score) ,  year FROM wine GROUP BY year",What are the maximum price and score of wines in each year?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT t2.name ,   t2.score FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White""",What are the names and scores of wines that are made of white color grapes?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT appelation FROM wine WHERE year  >  2008 EXCEPT SELECT appelation FROM appellations WHERE area  =  ""Central Coast""",What are the appelations for wines produced after 2008 but not in the Central Coast area?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT COUNT(*) FROM wine WHERE winery  =  ""Robert Biale""",How many wines are produced at Robert Biale winery?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING COUNT(*)  <=  3,Find the country of all appelations who have at most three wines.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT AVG(price) ,  AVG(score) ,  appelation FROM wine GROUP BY appelation",What are the average price and score of wines for each appelation?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT MAX(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  ""Central Coast"" AND t2.year  <  2005","What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,SELECT winery FROM wine GROUP BY winery HAVING COUNT(*)  >=  4,Which wineries produce at least four wines?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT name FROM wine WHERE year  <  (SELECT MIN(year) FROM wine WHERE winery  =  ""Brander"")",What are the names of wines whose production year are before the year of all wines by Brander winery?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT winery FROM wine ORDER BY score LIMIT 1,What is the winery at which the wine with the highest score was made?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT DISTINCT name FROM wine WHERE price  >  (SELECT MIN(price) FROM wine WHERE winery  =  ""John Anthony"")",What are the distinct names of wines with prices higher than any wine from John Anthony winery.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT MAX(price) ,  MAX(score) FROM wine WHERE appelation  =  ""St. Helena""",What are the maximum price and score of wines produced by St. Helena appelation?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT AVG(price) ,  year FROM wine GROUP BY year",What are the average prices of wines for different years?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT winery FROM wine ORDER BY score LIMIT 1,Which winery is the wine that has the highest score from?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine WHERE year  <  2000 OR year  >  2010,Give the distinct names of wines made before 2000 or after 2010.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""Red"" AND t2.price  >  50",What are the names of wines made from red grapes and with prices above 50?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT appelation FROM wine WHERE year  >  2008 EXCEPT SELECT appelation FROM appellations WHERE area  =  ""Central Coast""",Find the appelations that produce wines after the year of 2008 but not in Central Coast area.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT COUNT(*) FROM appellations WHERE county  =  ""Napa""",Count the number of appelations in Napa County.,"CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT grape ,  appelation ,  name FROM wine WHERE score  >  93 ORDER BY name","What are the grapes, appelations, and wines with scores above 93, sorted by Name?","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine ORDER BY name,"What are the names of wines, sorted in alphabetical order?","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT COUNT(*) FROM wine WHERE winery  =  ""Robert Biale""",Count the number of wines produced at Robert Biale winery.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT price FROM wine WHERE year  <  2010,Return the prices of wines produced before 2010.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT t1.area FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING t2.year  <  2010 ORDER BY COUNT(*) DESC LIMIT 1,What is the area of the appelation that produces the highest number of wines before the year of 2010?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,SELECT name FROM wine WHERE price  >  (SELECT MAX(price) FROM wine WHERE year  =  2006),Give the names of wines with prices above any wine produced in 2006.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT grape ,  appelation FROM wine",What are the grapes and appelations of each wine?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT MAX(price) ,  MAX(score) FROM wine WHERE appelation  =  ""St. Helena""",Give the maximum price and score for wines produced in the appelation St. Helena.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT area ,  county FROM appellations",List the area and county of all appelations.,"CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT name FROM wine WHERE year  =  ""2008""",Find the names of all wines produced in 2008.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT t1.color FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape GROUP BY t2.grape ORDER BY AVG(price) DESC LIMIT 1,What is the color of the grape whose wine products has the highest average price?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT name FROM wine WHERE year  =  ""2008""",What are the names of all wines produced in 2008?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT winery FROM wine WHERE price BETWEEN 50 AND 100,Find the distinct winery of wines having price between 50 and 100.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT name FROM wine WHERE price  >  (SELECT MAX(price) FROM wine WHERE year  =  2006),What are the names of wines that are more expensive then all wines made in the year 2006?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT t1.area FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING t2.year  <  2010 ORDER BY COUNT(*) DESC LIMIT 1,What is the area for the appelation which produced the most wines prior to 2010?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT AVG(price) ,  year FROM wine GROUP BY year",What is the average prices of wines for each each?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT t2.name ,   t2.score FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White""",Give the names and scores of wines made from white grapes.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t2.score  >  90 GROUP BY t1.county ORDER BY COUNT(*) DESC LIMIT 1,Find the county where produces the most number of wines with score higher than 90.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT AVG(price) ,  AVG(cases) FROM wine WHERE year  =  2009 AND grape  =  ""Zinfandel""",Give the average price and case of wines made from Zinfandel grapes in the year 2009.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT name FROM wine ORDER BY score LIMIT 1,What is the name of the highest rated wine?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine ORDER BY price,"What are the names of wines, sorted by price ascending?","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT AVG(price) FROM wine WHERE appelation NOT IN (SELECT t1.appelation FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  'Sonoma'),Find the average price of wines that are not produced from Sonoma county.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  ""Monterey"" AND t2.price  <  50",Give the neames of wines with prices below 50 and with appelations in Monterey county.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT DISTINCT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""Red""",What are the names of wines made from red grapes?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT t2.winery FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White"" GROUP BY t2.winery ORDER BY COUNT(*) DESC LIMIT 3",Which 3 wineries produce the most wines made from white grapes?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT COUNT(*) ,  grape FROM wine GROUP BY grape",What are the numbers of wines for different grapes?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine ORDER BY name,List the names of all distinct wines in alphabetical order.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT grape ,  appelation ,  name FROM wine WHERE score  >  93 ORDER BY name","List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT area ,  county FROM appellations",What are the areas and counties for all appelations?,"CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT grape ,  appelation FROM wine",List the grapes and appelations of all wines.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT DISTINCT t1.grape FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White"" AND t2.score  >  90",Find the the grape whose white color grapes are used to produce wines with scores higher than 90.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,SELECT price FROM wine WHERE year  <  2010,What are the prices of wines produced before the year of 2010?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT name ,  score FROM wine",What are the names and scores of all wines?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT AVG(price) ,  AVG(score) ,  appelation FROM wine GROUP BY appelation",What are the average price and score of wines grouped by appelation?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT grape ,  winery ,  year FROM wine WHERE price  >   100 ORDER BY year","What are the grapes, wineries and years for wines with price higher than 100, sorted by year?","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT AVG(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  ""Sonoma""",Give me the average prices of wines that are produced by appelations in Sonoma County.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT name ,  score FROM wine",List the names and scores of all wines.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT MAX(price) ,  MAX(score) ,  year FROM wine GROUP BY year",What are the maximum price and score of wines for each year?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT COUNT(*) FROM appellations WHERE county  =  ""Napa""",How many appelations are in Napa Country?,"CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT COUNT(*) ,  grape FROM wine GROUP BY grape",How many wines are there for each grape?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT DISTINCT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  ""North Coast""",What are the distinct names of wines that have appellations in the North Coast area?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING COUNT(*)  <=  3,What are the countries for appelations with at most 3 wines?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,SELECT name FROM wine ORDER BY score LIMIT 1,Give the name of the wine with the highest score.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t2.score  >  90 GROUP BY t1.county ORDER BY COUNT(*) DESC LIMIT 1,What is the county that produces the most wines scoring higher than 90?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT grape ,  winery ,  year FROM wine WHERE price  >   100 ORDER BY year","List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.","CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""Red"" AND t2.price  >  50",What are the wines that have prices higher than 50 and made of Red color grapes?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

"
wine_1,"SELECT name FROM wine WHERE year  <  (SELECT MIN(year) FROM wine WHERE winery  =  ""Brander"")",What are the names of wines produced before any wine from the Brander winery?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT winery FROM wine WHERE price BETWEEN 50 AND 100,What are the distinct wineries which produce wines costing between 50 and 100?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine ORDER BY price,List the names of all distinct wines ordered by price.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT DISTINCT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  ""North Coast""",Find the names of all distinct wines that have appellations in North Coast area.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
company_office,SELECT COUNT(*) FROM companies,Count the number of companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT name FROM buildings WHERE status  =  ""on-hold"" ORDER BY stories ASC","Please show the names of the buildings whose status is ""on-hold"", in ascending order of stories.","CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1,Show the names of the buildings that have more than one company offices.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT industry FROM companies WHERE headquarters  =  ""USA"" INTERSECT SELECT industry FROM companies WHERE headquarters  =  ""China""","Which industries have both companies with headquarter in ""USA"" and companies with headquarter in ""China""?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != ""Banking""","Find the maximum and minimum sales of the companies that are not in the ""Banking"" industry.","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT AVG(profits_billion) FROM companies,Compute the average profits companies make.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1,Which building has the largest number of company offices? Give me the building name.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC,Please show the industries of companies in descending order of the number of companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings ORDER BY height DESC,List the names of buildings in descending order of building height.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC,Sort all the industries in descending order of the count of companies in each industry,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2,Which headquarter locations are used by more than 2 companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies ORDER BY market_value_billion DESC,Sort the company names in descending order of the company's market value.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT COUNT(*) FROM companies WHERE industry  =  ""Banking"" OR industry  =  ""Conglomerate""","How many companies are in either ""Banking"" industry or ""Conglomerate"" industry?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT stories FROM buildings ORDER BY height DESC LIMIT 1,Find the stories of the building with the largest height.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT stories FROM buildings ORDER BY height DESC LIMIT 1,What is the stories of highest building?,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT name ,  assets_billion FROM companies ORDER BY name ASC","What are the name and assets of each company, sorted in ascending order of company name?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(DISTINCT industry) FROM companies,How many different industries are the companies in?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT COUNT(*) FROM companies WHERE industry  =  ""Banking"" OR industry  =  ""Conglomerate""","Find the number of companies whose industry is ""Banking"" or ""Conglomerate"",","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies WHERE headquarters != 'USA',"What are the names of companies whose headquarters are not ""USA""?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations),Which buildings do not have any company office? Give me the building names.,"CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT industry ,  COUNT(*) FROM companies GROUP BY industry",Whah are the name of each industry and the number of companies in that industry?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies ORDER BY market_value_billion DESC,List the names of companies in descending order of market value.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2,Show the headquarters shared by more than two companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != ""Banking""","What are the maximum and minimum sales of the companies whose industries are not ""Banking"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1,Show the name of the building that has the most company offices.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT name ,  assets_billion FROM companies ORDER BY name ASC",List the name and assets of each company in ascending order of company name.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id","For each company, return the company name and the name of the building its office is located in.","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT AVG(profits_billion) FROM companies,What are the average profits of companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT name FROM buildings WHERE status  =  ""on-hold"" ORDER BY stories ASC","Find the names of the buildings in ""on-hold"" status, and sort them in ascending order of building stories.","CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,"SELECT industry ,  COUNT(*) FROM companies GROUP BY industry",Please show each industry and the corresponding number of companies in that industry.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM companies WHERE headquarters != 'USA',"Find the names of the companies whose headquarters are not located in ""USA"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,"SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id",List the name of a building along with the name of a company whose office is in the building.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1,Which industry has the most companies?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(DISTINCT industry) FROM companies,Count the number of distinct company industries.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT COUNT(*) FROM companies,How many companies are there?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1,Which buildings have more than one company offices? Give me the building names.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
party_people,SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of party with most number of members?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office","Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?","CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,Show the minister who took office after 1961 or before 1959.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party WHERE party_name != 'Progress Party',Which ministers are not a part of the Progress Party?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",How many events are there for each party?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.event_name  =  ""Annaual Meeting""",Count the number of Annual Meeting events that took place in the region of the United Kingdom.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,Return the minister who left office at the latest time.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1,Which member names are shared among members in the party with the id 3 and the party with the id 1?,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != ""Progress Party""",Which member names corresponding to members who are not in the Progress Party?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT COUNT(*) FROM party_events,How many party events do we have?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",Show party names and the number of events for each party.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",Show all party names and the number of members in each party.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT COUNT(*) FROM party_events,Count the number of party events.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1,Return the name of the party with the most members.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of member in charge of greatest number of events?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id",List member names and their party names.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT minister ,  party_name FROM party ORDER BY took_office DESC","Who are the ministers and what parties do they belong to, listed descending by the times they took office?","CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,Which minister left office the latest?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT DISTINCT region_name FROM region ORDER BY label,"What are the different region names, ordered by labels?","CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member),What are the names of parties that have no members?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2,Return the names of parties that have two or more events.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id",What are the names of parties and their respective regions?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,"SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id",Show all party names and their region names.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,"SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office","Show the ministers and the time they took and left office, listed by the time they left office.","CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT DISTINCT region_name FROM region ORDER BY label,Show all distinct region names ordered by their labels.,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1,Return the name of the member who is in charge of the most events.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,Who are the ministers who took office after 1961 or before 1959?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id,Show all member names who are not in charge of any event.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,"SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != ""Progress Party""",Show member names that are not in the Progress Party.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2,What are the names of parties with at least 2 events?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id",How many members are in each party?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member),Show names of parties that does not have any members.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT minister FROM party WHERE party_name != 'Progress Party',Show all ministers who do not belong to Progress Party.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id",What are the names of members and their corresponding parties?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT COUNT(*) FROM region,How many regions do we have?,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1,Show the member names which are in both the party with id 3 and the party with id 1.,"CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
party_people,SELECT COUNT(DISTINCT party_name) FROM party,How many parties do we have?,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,"SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.event_name  =  ""Annaual Meeting""",How many Annual Meeting events happened in the United Kingdom region?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT COUNT(DISTINCT party_name) FROM party,Count the number of different parties.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
party_people,SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id,What are the names of members who are not in charge of any events?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

CREATE TABLE `member` (
  Member_ID INT PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT REFERENCES party(Party_ID),
  In_office TEXT
);

"
browser_web,SELECT COUNT(DISTINCT client) FROM web_client_accelerator,How many different kinds of clients are supported by the web clients accelerators?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT MAX(market_share) ,  MIN(market_share) ,  AVG(market_share) FROM browser","What is the maximum, minimum and average market share of the listed browsers?","CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT name ,  operating_system FROM web_client_accelerator WHERE connection != 'Broadband'",What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT t1.id ,  t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the browser that is compatible with the most web accelerators?,"CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT name FROM browser ORDER BY market_share DESC,List the name of browsers in descending order by market share.,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT COUNT(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );,How many accelerators are not compatible with the browsers listed ?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT operating_system ,  COUNT(*) FROM web_client_accelerator GROUP BY operating_system",Find the number of web accelerators used for each Operating system.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT name FROM web_client_accelerator WHERE name LIKE ""%Opera%""","Which accelerator name contains substring ""Opera""?","CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
browser_web,"SELECT t2.name ,  t3.name FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id ORDER BY t1.compatible_since_year DESC",give me names of all compatible browsers and accelerators in the descending order of compatible year,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT t1.compatible_since_year FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id WHERE t3.name  =  'CACHEbox' AND t2.name  =  'Internet Explorer',When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT t1.name ,  t1.operating_system FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.name  =  'Opera'",Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'Fasterfox',List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT COUNT(*) FROM browser WHERE market_share  >=  5,How many main stream browsers whose market share is at least 5 exist?,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",What is the id and market share of the browser Safari?,"CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT id ,  name ,  market_share FROM browser","List the ids, names and market shares of all browsers.","CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,SELECT DISTINCT t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.market_share  >  15;,What distinct accelerator names are compatible with the browswers that have market share higher than 15?,"CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
browser_web,"SELECT t1.id ,  t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2",What are the ids and names of the web accelerators that are compatible with two or more browsers?,"CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

"
tracking_share_transactions,"SELECT t1.sales_details ,  t2.date_of_transaction FROM sales as t1 JOIN transactions as t2 ON t1.sales_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  <  3000",What are the sale details and dates of transactions with amount smaller than 3000?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Sales` (
  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  sales_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT lot_details ,  investor_id FROM lots",Return the lot details and investor ids.,"CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t2.investor_id FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id HAVING COUNT(*)  >=  2,Show the ids of the investors who have at least two transactions.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",Show the id and details for the investors who have the top 3 number of transactions.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  COUNT(*) FROM transactions WHERE transaction_type_code  =  ""SALE"" GROUP BY investor_id","Show the number of transactions with transaction type code ""SALE"" for different investors if it is larger than 0.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.lot_id,What are the details of the lots which are not used in any transactions?,"CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,SELECT MAX(share_count) FROM transactions WHERE amount_of_transaction  <  10000,Show the maximum share count of transactions where the amount is smaller than 10000,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.investor_details FROM  investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.share_count  >  100,Show details of all investors if they make any transaction with share count greater than 100.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT COUNT(DISTINCT transaction_type_code) FROM transactions,How many distinct transaction types are used in the transactions?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id",Show the average share count of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT transaction_type_code ,  AVG(amount_of_transaction) FROM transactions GROUP BY transaction_type_code",Show the average transaction amount for different transaction types.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT AVG(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  ""SALE""","Show the average amount of transactions with type code ""SALE"".","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT MIN(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  ""PUR"" AND share_count  >  50","Show the minimum amount of transactions whose type code is ""PUR"" and whose share count is bigger than 50.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  COUNT(*) FROM transactions GROUP BY investor_id",Show the number of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT SUM(share_count) FROM transactions,What is the total share of transactions?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t1.transaction_type_description ,  t2.date_of_transaction FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code WHERE t2.share_count  <  10",Show the transaction type descriptions and dates if the share count is smaller than 10.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

"
tracking_share_transactions,"SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id",Show the average amount of transactions for different lots.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,SELECT DISTINCT lot_details FROM lots,Show all distinct lot details.,"CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1,Show the transaction type code that occurs the fewest times.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.transaction_type_description FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the description of the transaction type that occurs most frequently.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

"
tracking_share_transactions,SELECT date_of_transaction FROM transactions WHERE share_count  >  100 OR amount_of_transaction  >  1000,Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.lot_details FROM investors as t1 JOIN lots as t2 ON  t1.investor_id  =  t2.investor_id WHERE t1.investor_details  =  ""l""","Return the lot details of lots that belong to investors with details ""l""?","CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id ORDER BY AVG(share_count)","Show the average share count of transactions each each investor, ordered by average share count.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the transaction type code that occurs the most frequently.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT COUNT(*) FROM investors,Find the number of investors in total.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.transaction_type_code  =  ""SALE"" GROUP BY t2.investor_id HAVING COUNT(*)  >=  2","Show the ids and details of the investors who have at least two transactions with type code ""SALE"".","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT MAX(amount_of_transaction) FROM transactions,Show the maximum amount of transaction.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT date_of_transaction FROM transactions WHERE share_count  >=  100 OR amount_of_transaction  >=  100,What are the dates of transactions with at least 100 share count or amount bigger than 100?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",Show the id and details of the investor that has the largest number of transactions.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT investor_details FROM investors,Show all investor details.,"CREATE TABLE `Investors` (
  investor_id INTEGER,
  Investor_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  <  50,What are the lot details of lots associated with transactions with share count smaller than 50?,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,"SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id ORDER BY AVG(amount_of_transaction)","Show the average amount of transactions for different lots, ordered by average amount of transactions.","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

"
tracking_share_transactions,"SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code	  =  ""PUR""","Show the description of transaction type with code ""PUR"".","CREATE TABLE `Ref_Transaction_Types` (
  transaction_type_code VARCHAR(10) PRIMARY KEY,
  transaction_type_description VARCHAR(80)
);

"
tracking_share_transactions,"SELECT transaction_type_code ,  MAX(share_count) ,  MIN(share_count) FROM transactions GROUP BY transaction_type_code",Show the maximum and minimum share count of different transaction types.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT transaction_id FROM transactions WHERE transaction_type_code  =  'PUR',Show all transaction ids with transaction code 'PUR'.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT date_of_transaction ,  share_count FROM transactions",Show all date and share count of transactions.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases,What are the details of all sales and purchases?,"CREATE TABLE `Purchases` (
  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  purchase_details VARCHAR(255)
);

CREATE TABLE `Sales` (
  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  sales_details VARCHAR(255)
);

"
university_basketball,SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),Count the number of universities that do not participate in the baketball match.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  MIN(enrollment) FROM university",Return the total and minimum enrollments across all schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT team_name FROM basketball_match ORDER BY all_home DESC,"What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?","CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT school ,  location FROM university WHERE affiliation  =  'Public'",List all public schools and their locations.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT school_id) FROM basketball_match,Count the number of schools that have had basketball matches.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",Return the name of the team and the acc during the regular season for the school that was founded the earliest.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded",List all schools and their nicknames in the order of founded year.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT school_id) FROM basketball_match,How many schools are in the basketball match?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,Return the founded year for the school with the largest enrollment.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",What is the team name and acc regular season score of the school that was founded for the longest time?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",What are the all games score and location of the school called Clemson?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT AVG(enrollment) FROM university WHERE founded  <  1850,Return the average enrollment of universities founded before 1850.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,Return the primary conference of the school with the lowest acc percentage score.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,What is the primary conference of the school that has the lowest acc percent score in the competition?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public',Find the schools that were either founded after 1850 or public.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university),What are the names of teams from universities that have a below average enrollment?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT * FROM basketball_match,List all information regarding the basketball match.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university),Find the team names of the universities whose enrollments are smaller than the average enrollment size.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",Find the location and all games score of the school that has Clemson as its team name.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded","What are the different schools and their nicknames, ordered by their founding years?","CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",Show the enrollment and primary_conference of the oldest college.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,Return the highest acc percent across all basketball matches.,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,What is the highest acc percent score in the competition?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT school ,  location FROM university WHERE affiliation  =  'Public'",What are the public schools and what are their locations?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT MAX(enrollment) FROM university,Return the maximum enrollment across all schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) FROM university WHERE location LIKE ""%NY%""",How many universities have a location that contains NY?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  MIN(enrollment) FROM university",What is the total and minimum enrollment of all schools?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT affiliation) FROM university,Count the number of different affiliation types.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,When was the school with the largest enrollment founded?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation",What are the total enrollments of universities of each affiliation type?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT * FROM basketball_match,What is all the information about the basketball match?,"CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT MAX(enrollment) FROM university,What is the maximum enrollment across all schools?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation","What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?","CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",What are the enrollment and primary conference for the university which was founded the earliest?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",Find the number of universities that have over a 20000 enrollment size for each affiliation type.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(DISTINCT affiliation) FROM university,Find how many different affiliation types there are.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,What is the founded year of the non public school that was founded most recently?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT team_name FROM basketball_match ORDER BY all_home DESC,"List names of all teams in the basketball competition, ordered by all home scores in descending order.","CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,"SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation",Find the total student enrollment for different affiliation type schools.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation","What are the different affiliations, and how many schools with each have an enrollment size of above 20000?","CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,"SELECT COUNT(*) FROM university WHERE location LIKE ""%NY%""",Find how many school locations have the word 'NY'.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best restaurant in the bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me some restaurants good for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a restaurant in mountain view that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",give me a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  ""santa cruz county"" AND t1.name  =  ""jamerican cuisine"";",how many jamerican cuisine are there in santa cruz county ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",give me some restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",give me some good restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",where can we find a restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",what is a good restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",give me a restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabics on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",give me some restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",where can we find some restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""buttercup kitchen"";",how many buttercup kitchen are there in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many places for chinese are there in the bay area ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best restaurant in bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best american restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some restaurants good for arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",what are some good places in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""french"";",where can i eat french food in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where are some restaurants good for french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""jamerican cuisine"";",where is a jamerican cuisine in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good restaurant in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best place in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best restaurant in bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",where can i find a restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",what are some good restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me a good restaurant in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good place in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",where can we find some restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where can i eat arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places for arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  ""yolo county"" AND t1.food_type  =  ""italian"";",how many italian restaurants are in the yolo county ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good place in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabic restaurants in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many french restaurants are there in palo alto ?,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where can we find some restaurants in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a restaurant on buchanan in san francisco that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""jamerican cuisine"";",where can i find a jamerican cuisine in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good french restaurant in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best french in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabics in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",show me a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best place in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best french in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a restaurant in mountain view that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabic restaurants in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best restaurant in bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",what are some good restaurants in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where can i eat some good arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good restaurant in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",give me a good restaurant in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"";",give me a restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good restaurants on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",give me the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",give me some good restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Give me the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good places for arabic in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a arabic restaurant on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good place on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",what are some good restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where can i eat some good arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many chinese places are there in the bay area ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.name  =  ""denny"";",how many denny are there in the bay area ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.name  =  ""denny"";",where is denny in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",what are some good restaurants on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some restaurants good for arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best american in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many chinese restaurants are there in the bay area ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",give me a good restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",what is a good restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",where is the best restaurant in the bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good restaurant in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where are some restaurants good for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",what is the best french restaurant in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"" AND t1.rating  >  2.5;",what is a good restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good place on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some restaurants good for arabic food on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where is a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""french"";",where can i eat french food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""chinese"";",how many places for chinese food are there in the bay area ?,"CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",Where is the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where can i eat some good french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic restaurant in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some good arabics in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many places for french food are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me a good place in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me some restaurants good for arabic food in mountain view ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good restaurant on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me a good french restaurant in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where are some good arabics on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""bethel island"" AND t2.street_name  =  ""bethel island rd"" AND t1.rating  >  2.5;",give me a good restaurant on bethel island rd in bethel island ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best restaurant in san francisco for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a good restaurant on buchanan in san francisco for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good places in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",give me a good arabic on buchanan in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
twitter_1,"SELECT t1.name ,  t1.email FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  1",Find the name and email for the users who have more than one follower.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(*) FROM tweets,Find the number of tweets in record.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%',Find the names of users whose emails contain 鈥榮uperstar鈥?or 鈥榚du鈥?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t1.name ,  t1.partitionid FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  <  2",Find the name and partition id for users who tweeted less than twice.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT t1.name FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  (SELECT COUNT(*) FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 WHERE t1.name  =  'Tyler Swift'),"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(DISTINCT uid) FROM tweets,Find the number of users who posted some tweets.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT AVG(followers) FROM user_profiles WHERE uid NOT IN (SELECT uid FROM tweets),Find the average number of followers for the users who do not have any tweet.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT COUNT(*) FROM user_profiles,How many users are there?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT MAX(followers) ,  SUM(followers) FROM user_profiles",Find the maximum and total number of followers of all users.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1","Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT COUNT(*) FROM follows,How many followers does each user have?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,"SELECT name ,  followers FROM user_profiles ORDER BY followers DESC","List the name and number of followers for each user, and sort the results by the number of followers in descending order.","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT t1.name FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1,Find the names of users who have more than one tweet.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",Find the name and email of the user whose name contains the word 鈥楽wift鈥?,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT email FROM user_profiles WHERE name  =  'Mary',"Find the emails of the user named ""Mary"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
twitter_1,SELECT AVG(followers) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets),Find the average number of followers for the users who had some tweets.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT text FROM tweets WHERE text LIKE '%intern%',Return the text of tweets about the topic 'intern'.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,SELECT text FROM tweets ORDER BY createdate,List the text of all tweets in the order of date.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

"
twitter_1,"SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid",Find the name of each user and number of tweets tweeted by each of them.,"CREATE TABLE `tweets` (
  id bigint(20) PRIMARY KEY,
  uid int(11) REFERENCES user_profiles(uid),
  text char(140),
  createdate datetime
);

CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1,Find the name of the user who has the largest number of followers.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",Find the name and email of the user followed by the least number of people.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,"SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Mary"" OR t1.name  =  ""Susan""",Find the id of users who are followed by Mary or Susan.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT COUNT(*) FROM follows GROUP BY f1,Find the number of followers for each user.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,"SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Mary"" INTERSECT SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  ""Susan""",Find the id of users who are followed by Mary and Susan.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
twitter_1,SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man',"What is the partition id of the user named ""Iron Man"".","CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
bike_1,"SELECT date FROM weather WHERE zip_code  =  94107 AND events != ""Fog"" AND events != ""Rain""","In zip code 94107, on which day neither Fog nor Rain was not observed?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",List the name and the number of stations for all the cities that have at least 15 stations.,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1,Which trip started from the station with the largest dock count? Give me the trip id.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,What is the zip code in which the average mean sea level pressure is the lowest?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",When and in what zip code did max temperature reach 80?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,What are the 3 most common cloud covers in the zip code of 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  ""San Jose""",What is the average latitude and longitude of stations located in San Jose city?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",Find the ids and names of stations from which at least 200 trips started.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM trip ORDER BY duration LIMIT 1,What is the id of the shortest trip?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT name FROM station WHERE lat  <  37.5,What are the names of stations that have latitude lower than 37.5?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1","What is the latitude, longitude, city of the station from which the shortest trip started?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT COUNT(DISTINCT bike_id) FROM trip,How many different bike ids are there?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",What are the ids of the trips that lasted the longest and how long did they last?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10,"For each zip code, select all those that have an average mean visiblity below 10.","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  ""San Jose""",What are names of stations that have average bike availability above 10 and are not located in San Jose city?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,"For each city, list their names in decreasing order by their highest station latitude.","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10),What is the mean longitude for all stations that have never had more than 10 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,What is the id of the bike that traveled the most in 94002?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id","For each start station id, what is its name, longitude and average duration of trips started there?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",What are the start station's name and id for the one that had the most start trips in August?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,What are the dates in which the mean sea level pressure was between 30.3 and 31?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1","What is the latitude, longitude, and city of the station from which the trip with smallest duration started?","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id",What is the average latitude and longitude of the starting points of all trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100,What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7,What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7,What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(DISTINCT city) FROM station,What is the number of distinct cities the stations are located at?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT COUNT(DISTINCT city) FROM station,How many different cities have these stations?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100",What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,What is the zip code that has the lowest average mean sea level pressure?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT id FROM station WHERE city  =  ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10",What are the ids of stations that are located in San Francisco and have average bike availability above 10.,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",What is the station station and end station for the trips with the three smallest ids?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id",What is the installation date for each ending station on all the trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107)","Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103),Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,What are the dates that have an average sea level pressure between 30.3 and 31?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city != ""San Francisco""",How many trips did not end in San Francisco?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT city ,  MAX(lat) FROM station GROUP BY city","For each city, what is the highest latitude for its stations?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code","For each zip code, how many times has the maximum wind speed reached 25 mph?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60,"For each zip code, find the ids of all trips that have a higher average mean temperature above 60?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT date FROM weather WHERE max_temperature_f  >  85,Give me the dates when the max temperature was higher than 85.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10,Find the zip code in which the average mean visibility is lower than 10.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",What are the ids and durations of the trips with the top 3 durations?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12",What are the different ids and names of the stations that have had more than 12 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT COUNT(DISTINCT bike_id) FROM trip,"From the trip record, find the number of unique bikes.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT date FROM weather WHERE zip_code  =  94107 AND events != ""Fog"" AND events != ""Rain""",On which day has it neither been foggy nor rained in the zip code of 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","For each zip code, what is the average mean temperature for all dates that start with '8'?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636",What is the total and maximum duration for all trips with the bike id 636?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7,What are the different names for each station that has ever had 7 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",Give me the start station and end station for the trips with the three oldest id.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,Which bike traveled the most often in zip code 94002?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT name FROM station WHERE lat  <  37.5,What are the names of all stations with a latitude smaller than 37.5?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100,List all the distinct stations from which a trip of duration below 100 started.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  ""Palo Alto"")",What is the average bike availability in stations that are not located in Palo Alto?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id","For each station, find its latitude and the minimum duration of trips that ended at the station.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  ""San Jose""",What are the names of all stations that have more than 10 bikes available and are not located in San Jose?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that have the 5 highest cloud cover rates and what are the rates?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103),What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What are the name, latitude, and city of the station with the lowest latitude?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,What are all the different zip codes that have a maximum dew point that was always below 70?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8,How many days had both mean humidity above 50 and mean visibility above 8?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10),What is the average longitude of stations that never had bike availability more than 10?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,Find all the zip codes in which the max dew point have never reached 70.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  MAX(lat) FROM station GROUP BY city","For each city, return the highest latitude among its stations.","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7,Return the unique name for stations that have ever had 7 bikes available.,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM station WHERE city  =  ""Mountain View""",How many stations does Mountain View city has?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT id FROM station WHERE city  =  ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10",What are the ids of the stations in San Francisco that normally have more than 10 bikes available?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1,What is the id of the trip that started from the station with the highest dock count?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",On which day and in which zip code was the min dew point lower than any day in zip code 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100,What are all the different start station names for a trip that lasted less than 100?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  ""Mountain View"" AND t3.city  =  ""Palo Alto""",How many trips started from Mountain View city and ended at Palo Alto city?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city !=  ""San Francisco""",Count the number of trips that did not end in San Francisco city.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636",What is the total and maximum duration of trips with bike id 636?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8,What is the number of days that had an average humity above 50 and an average visibility above 8?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",What is the name of every city that has at least 15 stations and how many stations does it have?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code","For each zip code, return how many times max wind speed reached 25?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60,Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","For each zip code, return the average mean temperature of August there.","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE ""12/%""",What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100",What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","What are the days that had the smallest temperature range, and what was that range?","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  ""Palo Alto"")",What is the average bike availablility for stations not in Palo Alto?,"CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id","For each station, return its longitude and the average duration of trips that started from the station.","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100,Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  ""Mountain View"" AND t3.city  =  ""Palo Alto""",How many trips stated from  a station in Mountain View and ended at one in Palo Alto?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT id FROM trip ORDER BY duration LIMIT 1,What is the id of the trip that has the shortest duration?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id",What is the average latitude and longitude of all starting stations for the trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  ""San Jose""",What is the average latitude and longitude in San Jose?,"CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,SELECT date FROM weather WHERE max_temperature_f  >  85,What are the dates with a maximum temperature higher than 85?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
csu_1,SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1,What campus has the most degrees  conferrred over its entire existence?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",What campuses are in Los Angeles county?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,How many faculty members are at the university that gave the least number of degrees in 2001?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""",How many people graduated from San Francisco State University in 2004?,"CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  ""Orange"")",What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1,Which campus has the most degrees conferred in all times?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM campuses,What is the total number of campuses?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus",how many degrees were conferred between 1998 and 2002?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1,What campus has the most faculties in 2003?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",What campuses are located in the county of Los Angeles?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles"" AND year  >  1950",What campuses are located in Los Angeles county and opened after 1950?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT SUM(faculty) FROM faculty WHERE year  =  2002,How many faculty is there in total in the year of 2002?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  ""Long Beach State University""",What is the number of faculty at Long Beach State University in 2002?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",List the campuses in Los Angeles county.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),Find the count of universities whose campus fee is greater than the average campus fee.,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1,Which campus has the most faculties in year 2003?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1,Which year has the most degrees conferred?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  <  1800,What campuses opened before 1800?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Jose State University""",How many undergraduates are there at San Jose State,"CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  2000",How many degrees were conferred at San Jose State University in 2000?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1,In what year was the most degrees conferred?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),How many universities have a campus fee greater than the average?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,How many faculty members did the university that conferred the most degrees in 2002 have?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Francisco State University"" AND t1.year  =  2000","In the year 2000, what is the campus fee for San Francisco State University?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  ""Orange"" AND t2.year  >=  2000 GROUP BY t1.campus","For each Orange county campus, report the number of degrees granted after 2000.","CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  ""Long Beach State University""","What is the number of faculty lines in campus ""Long Beach State University"" in 2002?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200,"What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?","CREATE TABLE `enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Year INTEGER PRIMARY KEY,
  TotalEnrollment_AY INTEGER,
  FTE_AY INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus",report the total number of degrees granted between 1998 and 2002.,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Chico""",What are the names of all campuses located at Chico?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,How many faculty lines are there in the university that conferred the least number of degrees in year 2001?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  =  1958,What are the campuses that opened in 1958?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""",How many faculty lines are there at San Francisco State University in 2004?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM campuses,How many CSU campuses are there?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939,What campuses opened between 1935 and 1939?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  2000","How many degrees were conferred in ""San Jose State University"" in 2000?","CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",Report the name of all campuses in Los Angeles county.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996,Find the average fee on a CSU campus in 1996,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  1996","What is the campus fee of ""San Jose State University"" in year 1996?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Francisco State University"" AND t1.year  =  2000","What is the campus fee of ""San Francisco State University"" in year 2000?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  1996","What is the campus fee of ""San Francisco State University"" in year 1996?","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  =  1958,Find all the campuses opened in 1958.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,How many faculty lines are there in the university that conferred the most number of degrees in year 2002?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles"" AND year  >  1950",Which university is in Los Angeles county and opened after 1950?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996,What is the average fee for a CSU campus in the year of 1996?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004,What are the campuses that had between 600 and 1000 faculty members in 2004?,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Jose State University""","How many undergraduates are there in ""San Jose State University"" in year 2004?","CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT COUNT(*) FROM campuses WHERE county  =  ""Los Angeles""",How many campuses are there in Los Angeles county?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005,What is the average fee for a CSU campus in the year of 2005?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Chico""",What campuses are located in Chico?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Jose State University"" AND t1.year  =  2000","Find the campus fee of ""San Jose State University"" in year 2000.","CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  2001",What degrees were conferred in San Francisco State University in the year 2001?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200,What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,"CREATE TABLE `enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Year INTEGER PRIMARY KEY,
  TotalEnrollment_AY INTEGER,
  FTE_AY INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Northridge"" AND county  =  ""Los Angeles"" UNION SELECT campus FROM campuses WHERE location  =  ""San Francisco"" AND county  =  ""San Francisco""","Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  ""Orange"")",Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),How many universities have a campus fee higher than average?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  ""San Jose State University"" AND t1.year  =  2000",What is the campus fee in the year 2000 for San Jose State University?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  2001","What are the degrees conferred in ""San Francisco State University"" in 2001.","CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  ""Orange"" AND t2.year  >=  2000 GROUP BY t1.campus",What is the total number of degrees granted after 2000 for each Orange county campus?,"CREATE TABLE `degrees` (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Degrees INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT campus FROM campuses WHERE location  =  ""Northridge"" AND county  =  ""Los Angeles"" UNION SELECT campus FROM campuses WHERE location  =  ""San Francisco"" AND county  =  ""San Francisco""","What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?","CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees),Find the count of universities whose campus fee is greater than the average campus fee.,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  ""San Francisco State University""","What is the number of graduates in ""San Francisco State University"" in year 2004?","CREATE TABLE `discipline_enrollments` (
  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),
  Discipline INTEGER PRIMARY KEY,
  Year INTEGER,
  Undergraduate INTEGER,
  Graduate INTEGER
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004,List the campus that have between 600 and 1000 faculty lines in year 2004.,"CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
news_report,SELECT nationality FROM journalist GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1,Show the most common nationality for journalists.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT t3.name ,  t2.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id ORDER BY t2.event_attendance asC",Show the names of journalists and the names of the events they reported in ascending order,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT t3.name ,  t2.date FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id",Show the names of journalists and the dates of the events they reported.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT COUNT(*) FROM journalist,How many journalists are there?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT nationality ,  COUNT(*) FROM journalist GROUP BY nationality",Show the different nationalities and the number of journalists of each nationality.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT name FROM journalist WHERE nationality  =  ""England"" OR nationality  =  ""Wales""","Show the names of journalists from ""England"" or ""Wales"".","CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report),List the names of journalists who have not reported any event.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT AVG(event_attendance) ,  MAX(event_attendance) FROM event",what are the average and maximum attendances of all events?,"CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,"SELECT t3.name ,  COUNT(*) FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name",Show the names of journalists and the number of events they reported.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT venue ,  name FROM event ORDER BY event_attendance DESC LIMIT 2",List the event venues and names that have the top 2 most number of people attended.,"CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,SELECT t3.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name HAVING COUNT(*)  >  1,Show the names of journalists that have reported more than one event.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT AVG(t1.age) ,  AVG(years_working) ,  t2.work_type FROM journalist as t1 JOIN news_report as t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",Find the average age and experience working length of journalists working on different role type.,"CREATE TABLE `news_report` (
  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),
  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),
  Work_Type TEXT
);

CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT nationality FROM journalist WHERE years_working  >  10 INTERSECT SELECT nationality FROM journalist WHERE years_working  <  3,Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT AVG(years_working) FROM journalist,What is the average number of years spent working as a journalist?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,SELECT nationality FROM journalist ORDER BY years_working DESC LIMIT 1,What is the nationality of the journalist with the largest number of years working?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
news_report,"SELECT date ,  name ,  venue FROM event ORDER BY event_attendance DESC","Show the dates, places, and names of events in descending order of the attendance.","CREATE TABLE `event` (
  Event_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance INT
);

"
news_report,SELECT name FROM journalist ORDER BY years_working ASC,List the names of journalists in ascending order of years working.,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
inn_1,SELECT SUM(beds) FROM rooms WHERE bedtype  =  'King';,How many king beds are there?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice  >  ( SELECT AVG(baseprice) FROM rooms );,Find the name of rooms whose price is higher than the average price.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 1;",Which room has the highest base price?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT adults FROM reservations WHERE checkin  =  ""2010-10-23"" AND firstname  =  ""CONRAD"" AND lastname  =  ""SELBIG"";","Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150,Find the name of rooms whose base price is between 120 and 150.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms ORDER BY baseprice;,Sort all the rooms according to the price. Just report the room names.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(*) FROM rooms;,How many rooms are there?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT COUNT(*) FROM reservations WHERE firstname = ""ROY"" AND lastname  =  ""SWEAZY"";",How many times does ROY SWEAZY has reserved a room.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room HAVING COUNT(*)  >  60,Find the names of rooms that have been reserved for more than 60 times.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE firstname LIKE '%ROY%',"What are the name of rooms booked by customers whose first name has ""ROY"" in part?","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT SUM(beds) FROM rooms WHERE bedtype  =  'King';,Find the total number of king beds available.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  bedtype FROM rooms WHERE decor = ""traditional"";",List the type of bed and name of all traditional rooms.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT kids FROM reservations WHERE checkin  =  ""2010-09-21"" AND firstname  =  ""DAMIEN"" AND lastname  =  ""TRACHSEL"";","How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY COUNT(*) DESC LIMIT 1;,Which room has the largest number of reservations?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT kids FROM reservations WHERE firstname = ""ROY"" AND lastname  =  ""SWEAZY"";",How many kids stay in the rooms reserved by ROY SWEAZY?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT t2.decor FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t2.decor ORDER BY COUNT(t2.decor) asC LIMIT 1;,What kind of decor has the least number of reservations?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT COUNT(*) FROM rooms WHERE bedtype  =  ""King"";",Find the number of rooms with a king bed.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT adults FROM reservations WHERE checkin  =  ""2010-10-23"" AND firstname  =  ""CONRAD"" AND lastname  =  ""SELBIG"";","How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT COUNT(DISTINCT bedtype) FROM rooms;,How many different types of beds are there?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT t2.roomname ,  t1.rate ,  t1.checkin ,  t1.checkout FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY t1.rate DESC LIMIT 1;","Which room has the highest rate? List the room's full name, rate, check in and check out date.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT t2.decor FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t2.decor ORDER BY COUNT(t2.decor) asC LIMIT 1;,What is the least popular kind of decor?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT t2.roomname ,  COUNT(*) ,  t1.room FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room","For each room, find its name and the number of times reservations were made for it.","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT t1.firstname ,  t1.lastname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t1.rate - t2.baseprice  >  0",Find the first and last names of people who payed more than the rooms' base prices.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT bedtype ,  COUNT(*) FROM rooms GROUP BY bedtype;",Find the number of rooms for each bed type.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room HAVING COUNT(*)  >  60,What are the names of rooms whose reservation frequency exceeds 60 times?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT SUM(maxoccupancy) FROM rooms WHERE decor  =  'modern';,What is the total number of people who could stay in the modern rooms in this inn?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT COUNT(*) FROM rooms WHERE bedtype  =  ""King"";",How many rooms have a king bed?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  roomid FROM rooms WHERE baseprice  >  160 AND maxoccupancy  >  2;",Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname FROM rooms WHERE bedtype  =  ""King"" OR bedtype  =  ""Queen"";",What are the names of rooms that have either king or queen bed?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor FROM rooms WHERE roomname  =  ""Recluse and defiance"";","Return the decor of the room named ""Recluse and defiance"".","CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor , COUNT(*) FROM rooms WHERE baseprice  >  120 GROUP BY decor;",Find the number of rooms with price higher than 120 for different decor.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;","For each bed type, find the average base price of different bed type.","CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(*) FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t2.maxoccupancy  =  t1.adults + t1.kids;,List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(*) FROM rooms;,What is the total number of rooms available in this inn?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  bedtype FROM rooms WHERE decor = ""traditional"";",What are the bed type and name of all the rooms with traditional decor?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150,Which rooms cost between 120 and 150? Give me the room names.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT kids FROM reservations WHERE checkin  =  ""2010-09-21"" AND firstname  =  ""DAMIEN"" AND lastname  =  ""TRACHSEL"";","Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,"SELECT t2.roomname ,  COUNT(*) ,  t1.room FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room",Return the name and number of reservations made for each of the rooms.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),How many rooms have not had any reservation yet?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor , COUNT(*) FROM rooms WHERE baseprice  >  120 GROUP BY decor;","How many rooms cost more than 120, for each different decor?","CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  decor FROM rooms WHERE bedtype  =  'King' ORDER BY baseprice;",List the names and decor of rooms that have a king bed. Sort the list by their price.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;,Find the name of the room with the maximum occupancy.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;",Find the name and id of the top 3 expensive rooms.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;",What are the name and id of the three highest priced rooms?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT t2.roomname ,  t1.rate ,  t1.checkin ,  t1.checkout FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY t1.rate DESC LIMIT 1;","Return the name, rate, check in and check out date for the room with the highest rate.","CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY COUNT(*) DESC LIMIT 1;,Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT t1.firstname ,  t1.lastname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t1.rate - t2.baseprice  >  0",What are the first and last names of people who payed more than the rooms' base prices?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor FROM rooms WHERE roomname  =  ""Recluse and defiance"";",What is the decor of room Recluse and defiance?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT COUNT(*) FROM reservations WHERE firstname = ""ROY"" AND lastname  =  ""SWEAZY"";",Find the number of times ROY SWEAZY has reserved a room.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,"SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 1;",Find the id and name of the most expensive base price room.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;","For each bed type, find the average room price.","CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;",What is the average base price of different bed type? List bed type and average base price.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  decor FROM rooms WHERE bedtype  =  'King' ORDER BY baseprice;",What are the names and decor of rooms with a king bed? Sort them by their price,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT kids FROM reservations WHERE firstname = ""ROY"" AND lastname  =  ""SWEAZY"";",Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,"SELECT bedtype ,  COUNT(*) FROM rooms GROUP BY bedtype;",What are the number of rooms for each bed type?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  roomid FROM rooms WHERE baseprice  >  160 AND maxoccupancy  >  2;",What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT SUM(maxoccupancy) FROM rooms WHERE decor  =  'modern';,How many people in total can stay in the modern rooms of this inn?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor , AVG(baseprice) ,  MIN(baseprice) FROM rooms GROUP BY decor;",What is the average minimum and price of the rooms for each different decor.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;","What is the average base price of rooms, for each bed type?","CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice  >  ( SELECT AVG(baseprice) FROM rooms );,What are the name of rooms that cost more than the average.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  baseprice FROM rooms ORDER BY baseprice ASC LIMIT 1;",Which room has cheapest base price? List the room's name and the base price.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms ORDER BY baseprice;,List the name of all rooms sorted by their prices.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice  <  160 AND beds =  2 AND decor  =  'modern';,What are the names of modern rooms that have a base price lower than $160 and two beds.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor ,  COUNT(*) FROM rooms WHERE bedtype = ""King"" GROUP BY decor;",How many rooms have king beds? Report the number for each decor type.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(DISTINCT bedtype) FROM rooms;,Find the number of distinct bed types available in this inn.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname ,  baseprice FROM rooms ORDER BY baseprice ASC LIMIT 1;",What are the room name and base price of the room with the lowest base price?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms WHERE baseprice  <  160 AND beds =  2 AND decor  =  'modern';,Find the names of all modern rooms with a base price below $160 and two beds.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1",Which author has written the most papers? Find his or her last name.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Katsuhiro"" AND t1.lname  =  ""Ueno""","Which institution does ""Katsuhiro Ueno"" belong to?","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Oxford""","Who belong to the institution ""University of Oxford""? Show the first names and last names.","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""Japan"" AND t2.authorder  =  1 AND t1.lname  =  ""Ohori""","Find the titles of papers whose first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""?","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Binders Unbound""","What are the last names of the author of the paper titled ""Binders Unbound""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM papers,How many papers are published in total?,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Jeremy"" AND t1.lname  =  ""Gibbons""","Find the titles of all the papers written by ""Jeremy Gibbons""","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT lname FROM authors WHERE fname  =  ""Amal""","Find the last name of the author with first name ""Amal"".","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM inst,Count the number of institutions.,"CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,SELECT COUNT(*) FROM papers,Count the number of total papers.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Aaron"" AND t1.lname  =  ""Turon""","Find all the papers published by ""Aaron Turon"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%Database%""","Which papers have the substring ""Database"" in their titles? Show the titles of the papers.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Which authors belong to the institution ""Google""? Show the first names and last names.","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1",What is the last name of the author that has published the most papers?,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT fname FROM authors ORDER BY fname,Find the first names of all the authors ordered in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Find the name of the organization that has published the largest number of papers.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Which papers were written by authors from the institution ""Google""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Monadic%""","Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Tokohu University""","How many papers are published by the institution ""Tokohu University""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%ML%""","Find the titles of the papers that contain the word ""ML"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,SELECT fname FROM authors ORDER BY fname,Sort the first names of all the authors in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","What is the name of the institution that ""Matthias Blume"" belongs to?","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Find all the papers published by the institution ""Google"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Functional%""","Find the first names of all the authors who have written a paper with title containing the word ""Functional"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT lname FROM authors WHERE fname  =  ""Amal""","Which authors have first name ""Amal""? List their last names.","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Monadic%""","Which authors have written a paper with title containing the word ""Monadic""? Return their last names.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM authors,How many authors are there?,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""","Find papers whose second author has last name ""Turon"" and is affiliated with an institution in the country ""USA"".","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT fname FROM authors WHERE lname  =  ""Ueno""","What is the first name of the author with last name ""Ueno""?","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Binders Unbound""","Who is the author of the paper titled ""Binders Unbound""? Give me the last name.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1,Retrieve the country that has published the most papers.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Stephanie"" AND t1.lname  =  ""Weirich""","Which papers have ""Stephanie Weirich"" as an author?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE ""%Functional%""","Who has written a paper that has the word ""Functional"" in its title? Return the first names of the authors.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","Which institution is the author ""Matthias Blume"" belong to? Give me the name of the institution.","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Nameless ,  Painless""","Find the first and last name of the author(s) who wrote the paper ""Nameless, Painless"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Olin"" AND t1.lname  =  ""Shivers""","Which papers did the author ""Olin Shivers"" write? Give me the paper titles.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM authors,Count the number of authors.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Indiana University""","List the titles of the papers whose authors are from the institution ""Indiana University"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Indiana University""","What are the papers published under the institution ""Indiana University""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,Which institution has the most papers? Find the name of the institution.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,SELECT lname FROM authors ORDER BY lname,Give me a list of all the last names of authors sorted in alphabetical order,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Oxford""","Find the first names and last names of the authors whose institution affiliation is ""University of Oxford"".","CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT lname FROM authors ORDER BY lname,Retrieve all the last names of authors in alphabetical order.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Aaron"" AND t1.lname  =  ""Turon""","Find the titles of all the papers written by ""Aaron Turon"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname ,  lname FROM authors ORDER BY lname",Retrieve all the first and last names of authors in the alphabetical order of last names.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship),Retrieve the title of the paper that has the largest number of authors.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Nameless ,  Painless""","What are the first and last name of the author who published the paper titled ""Nameless, Painless""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT fname FROM authors WHERE lname  =  ""Ueno""","Which authors have last name ""Ueno""? List their first names.","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Jeremy"" AND t1.lname  =  ""Gibbons""","What are the titles of papers published by ""Jeremy Gibbons""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Stephanie"" AND t1.lname  =  ""Weirich""","Find the titles of the papers the author ""Stephanie Weirich"" wrote.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,SELECT COUNT(*) FROM inst,How many institutions are there?,"CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Tokohu University""","Find the number of papers published by authors from the institution ""Tokohu University"".","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1,Find the country that the most papers are affiliated with.,"CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Atsushi"" AND t1.lname  =  ""Ohori""","How many papers have ""Atsushi Ohori"" published?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""","Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""","How many papers are written by authors from the institution ""University of Pennsylvania""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Olin"" AND t1.lname  =  ""Shivers""","Find the papers which have ""Olin Shivers"" as an author.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""Japan"" AND t2.authorder  =  1 AND t1.lname  =  ""Ohori""","Which papers' first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""? Give me the titles of the papers.","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT fname ,  lname FROM authors ORDER BY lname",Sort the list of all the first and last names of authors in alphabetical order of the last names.,"CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%Database%""","Which paper's title contains the word ""Database""?","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
manufacturer,"SELECT MAX(num_of_shops) ,  AVG(num_of_factories) FROM manufacturer WHERE open_year  <  1990",what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,SELECT SUM(num_of_component) FROM furniture,How many furniture components are there in total?,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,SELECT AVG(num_of_factories) FROM manufacturer WHERE num_of_shops  >  20,Find the average number of factories for the manufacturers that have more than 20 shops.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,"SELECT COUNT(*) ,  t1.name FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",Find the number of funiture types produced by each manufacturer as well as the company names.,"CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT t1.name ,  t2.price_in_dollar FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id",Give me the names and prices of furnitures which some companies are manufacturing.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,"SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",List all manufacturer names and ids ordered by their opening year.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT market_rate ,  name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte)",Find the market shares and names of furnitures which no any company is producing in our records.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,SELECT t1.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id WHERE t2.price_in_dollar  <  (SELECT MAX(price_in_dollar) FROM furniture_manufacte),Find the names of furnitures whose prices are lower than the highest price.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

"
manufacturer,"SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",Which manufacturer has the most number of shops? List its name and year of opening.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",Return the name and id of the furniture with the highest market rate.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,"SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",Find the id and number of shops for the company that produces the most expensive furniture.,"CREATE TABLE `furniture_manufacte` (
  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),
  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),
  Price_in_Dollar REAL
);

CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR num_of_factories  <  10",Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.,"CREATE TABLE `manufacturer` (
  Manufacturer_ID INT PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories INT,
  Num_of_Shops INT
);

"
manufacturer,"SELECT num_of_component ,  name FROM furniture WHERE num_of_component  >  10",Find the component amounts and names of all furnitures that have more than 10 components.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
manufacturer,SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2,find the total market rate of the furnitures that have the top 2 market shares.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
network_2,"SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person)",Who has friends that are older than the average age? Print their friends and their ages as well,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1,Find the person who has exactly one friend.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age,What is the name of all the people who are older than at least one engineer? Order them by age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice')","Find the name, age, and job title of persons who are friends with Alice for the longest years.","CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach'),What is the age of the friend of Zach with longest year relationship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice'",What are the names and ages of every person who is a friend of both Dan and Alice?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT AVG(age) FROM person,What is the average age for all person?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female',Find the female friends of Alice.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person ORDER BY age DESC,What are the names of everybody sorted by age in descending order?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' ORDER BY age,Find the name and age of all males in order of their age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan',How many friends does Dan have?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach',What is the age of the doctor named Zach?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender",Find the number of people who is under 40 for each gender.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT MIN(age) ,  job FROM person GROUP BY job",How old is the youngest person for each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer'),How many people are older than every engineer?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1",Which person whose friends have the oldest average age?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice'",What are the different names and ages of every friend of either Dan or alice?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who has no friend living in the city of Austin.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob',Find the name of persons who are friends with Bob.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),Find the name of the person who has friends with age above 40 and under age 30?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job",What is average age of male for different job title?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT city) FROM person,How many different cities do people originate from?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT city) FROM person,How many different cities are they from?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT name ,  job FROM person ORDER BY name","list the name, job title of all people ordered by their names.","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),What are the names of the people who are older 40 but no friends under age 30?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city',What are the names of all friends who are from New York?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female',Find the names of females who are friends with Zach,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice',Find Alice's friends of friends.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female',What are all the friends of Alice who are female?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student',Find the name of the person who has no student friends.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  gender FROM person GROUP BY gender","How old is each gender, on average?","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice'),Find the name of persons who are friends with Alice for the shortest years.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job",What is the average age for a male in each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT AVG(age) FROM person,What is the average age for all people in the table?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT job) FROM person,How many type of jobs do they have?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob',Who are Bob's friends?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),What are the names of every person who has a friend over 40 and under 30?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach'),Which friend of Zach has the longest-lasting friendship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(DISTINCT job) FROM person,How many different jobs are listed?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT MIN(age) ,  job FROM person GROUP BY job",What is minimum age for different job title?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female',What are the names of all females who are friends with Zach?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30),Find the name of the person who has friends with age above 40 but not under age 30?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE gender  =  'female',How many females does this network has?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  job FROM person GROUP BY job",How old is the average person for each job?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' ),Who is the youngest male?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice'",Find the name and age of the person who is a friend of Dan or Alice.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1","What is the name of the person who has the oldest average age for their friends, and what is that average age?","CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender",How many people are under 40 for each gender?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who have no friends living in Austin?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor',Who are the friends of Alice that are doctors?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age,Find the name of people whose age is greater than any engineer sorted by their age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person ORDER BY age DESC,Find the names of all person sorted in the descending order using age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach'),What are the ages of all of Zach's friends who are in the longest relationship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person EXCEPT SELECT name FROM personfriend,What are the names of all people who do not have friends?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan',How many friends does Dan have?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  <  30,Who is the person whose age is below 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person),Who has friends that are younger than the average age?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' ORDER BY age,What is the name and age of every male? Order the results by age.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person),Who is the oldest person?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE gender  =  'female',How many females are in the network?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' ),What is the name of the oldest student?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person EXCEPT SELECT name FROM personfriend,Who is the person that has no friend?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT name ,  job FROM person ORDER BY name",What are the names and job titles of every person ordered alphabetically by name?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor',Find the male friend of Alice whose job is a doctor?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  gender FROM person GROUP BY gender",What is the average age for each gender?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  <  30,What is the name of the person whose age is below 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT AVG(age) ,  job FROM person GROUP BY job",What is average age for different job title?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person)","Whare the names, friends, and ages of all people who are older than the average age of a person?","CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city',Who has a friend that is from new york city?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice',What are the names of all of Alice's friends of friends?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person),What is the name of the person who is the oldest?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,"SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice'",Find the name and age of the person who is a friend of both Dan and Alice.,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice'),What are the names of all people who are friends with Alice for the shortest amount of time?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer',HOw many engineers are older than 30?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer',How many people whose age is greater 30 and job is engineer?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob',Who are the friends of Bob?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach'),Who is the friend of Zach with longest year relationship?,"CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2","For every medicine id, what are the names of the medicines that can interact with more than one enzyme?","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT name FROM enzyme WHERE name LIKE ""%ALA%""","Which enzyme names have the substring ""ALA""?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,What is the count of enzymes without any interactions?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor'",What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor'","What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2",What are the ids and names of the medicine that can interact with two or more enzymes?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX'",What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor'","What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name",How many medicines are offered by each trade name?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole',What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No',How many medicines were not approved by the FDA?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme,How many kinds of enzymes are there?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name",find the number of medicines offered by each trade.,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol'","What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1","What are the most common types of interactions between enzymes and medicine, and how many types are there?","CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX'",Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  location FROM enzyme",What are the names and locations of all enzymes listed?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(DISTINCT fda_approved) FROM medicine,How many distinct FDA approval statuses are there for the medicines?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the enzyme that can interact with the most medicines as an activator?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme WHERE product != 'Heme',What are the names of enzymes who does not produce 'Heme'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor',What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol'","What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?","CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes'",What are the names and trade names of the medicines which has 'Yes' value in the FDA record?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor',What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1",What is the most common interaction type between enzymes and medicine? And how many are there?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor'",List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT MAX(omim) FROM enzyme,What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  location FROM enzyme",List the names and the locations that the enzymes can make an effect.,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No',How many medicines have the FDA approval status 'No' ?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme ORDER BY name DESC,What are the names of enzymes in descending order?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );,How many enzymes do not have any interactions?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3",What is the id and trade name of the medicines can interact with at least 3 enzymes?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme WHERE product != 'Heme',What are the names of enzymes whose product is not 'Heme'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC","What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(*) FROM enzyme,What is the total count of enzymes?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT MAX(omim) FROM enzyme,What is the maximum OMIM value in the database?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,"SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes'",What are the names and trade names of the medcines that are FDA approved?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT name FROM enzyme WHERE name LIKE ""%ALA%""",What are the names of enzymes that include the string 'ALA'?,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
medicine_enzyme_interaction,SELECT COUNT(DISTINCT fda_approved) FROM medicine,How many different FDA approval statuses exist for medicines?,"CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","What is the average room count of the apartments whose booking status code is ""Provisional""?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_number ,  room_count FROM apartments",Return the apartment number and the number of rooms for each apartment.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE ""%court%""","What are the building full names that contain the word ""court""?","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC",Show each gender code and the corresponding count of guests sorted by the count in descending order.,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT DISTINCT building_description FROM apartment_buildings,Show all distinct building descriptions.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4,What are the facility codes of the apartments with more than four bedrooms?,"CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities),Find the number of apartments that have no facility.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,"SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager	 =  ""Brenden""","What are the address and phone number of the buildings managed by ""Brenden""?","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT apt_number ,  room_count FROM apartments",What are the apartment number and the room count of each apartment?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT AVG(bedroom_count) FROM apartments,Find the average number of bedrooms of all the apartments.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  ""Kyle""","What apartment type codes and apartment numbers do the buildings managed by ""Kyle"" have?","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC","Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1,Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `View_Unit_Status` (
  apt_id INTEGER REFERENCES Apartments(apt_id),
  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),
  status_date DATETIME PRIMARY KEY,
  available_yn BIT
);

"
apartment_rentals,SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Which apartment type code is the most common among apartments with more than one bathroom?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY room_count ASC,Return all the apartment numbers sorted by the room count in ascending order.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3,Show the top 3 apartment type codes sorted by the average number of rooms in descending order.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT AVG(bedroom_count) FROM apartments,What is the average number of bedrooms of all apartments?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT 	booking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code",Show the booking status code and the corresponding number of bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4,Show the facility codes of apartments with more than 4 bedrooms.,"CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  ""Studio""","What is the average number of rooms of apartments with type code ""Studio""?","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  ""Studio""","Find the average room count of the apartments that have the ""Studio"" type code.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_short_name FROM apartment_buildings WHERE building_manager	 =  ""Emma""","Which buildings does ""Emma"" manage? Give me the short names of the buildings.","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  ""Confirmed""","Show the first names and last names of all the guests that have apartment bookings with status code ""Confirmed"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  ""Female""","What are the start date and end date of the apartment bookings made by female guests (gender code ""Female"")?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  ""Columbus Square""","How many rooms in total are there in the apartments in the building with short name ""Columbus Square""?","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2",What are the booking start and end dates of the apartments with more than 2 bedrooms?,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_number FROM apartments WHERE apt_type_code  =  ""Flat""","Return the apartment numbers of the apartments with type code ""Flat"".","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1,Return the apartment number with the largest number of bedrooms.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  ""Gym""","Find the total number of rooms in the apartments that have facility code ""Gym"".","CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT date_of_birth FROM guests WHERE gender_code  =  ""Male""","What are dates of birth of all the guests whose gender is ""Male""?","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3,What are the top three apartment types in terms of the average room count? Give me the,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE ""%court%""","Find all the building full names containing the word ""court"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT date_of_birth FROM guests WHERE gender_code  =  ""Male""","Return the date of birth for all the guests with gender code ""Male"".","CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments",What is the minimum and maximum number of bathrooms of all the apartments?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the most common apartment type code.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC",Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed""","Show the distinct apartment numbers of the apartments that have bookings with status code ""Confirmed"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  ""Duplex""","What are the booking start and end dates of the apartments with type code ""Duplex""?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code",Return each apartment type code along with the maximum and minimum number of rooms among each type.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed"" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Which apartments have bookings with both status codes ""Provisional"" and ""Confirmed""? Give me the apartment numbers.","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed""","Which apartments have bookings with status code ""Confirmed""? Return their apartment numbers.","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT COUNT(*) FROM apartment_bookings,How many apartment bookings are there in total?,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT apt_number FROM apartments WHERE apt_type_code  =  ""Flat""","Which apartments have type code ""Flat""? Give me their apartment numbers.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT DISTINCT building_description FROM apartment_buildings,Give me a list of all the distinct building descriptions.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2,Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  ""Suite 634""","What is the booking status code of the apartment with apartment number ""Suite 634""?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  ""Female""","Show the start dates and end dates of all the apartment bookings made by guests with gender code ""Female"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  ""Kyle""","Show the apartment type codes and apartment numbers in the buildings managed by ""Kyle"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1,Show the apartment numbers of apartments with unit status availability of both 0 and 1.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `View_Unit_Status` (
  apt_id INTEGER REFERENCES Apartments(apt_id),
  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),
  status_date DATETIME PRIMARY KEY,
  available_yn BIT
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2",Find the booking start date and end date for the apartments that have more than two bedrooms.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT booking_start_date ,  booking_end_date FROM apartment_bookings",Show the start dates and end dates of all the apartment bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT booking_start_date ,  booking_end_date FROM apartment_bookings",What are the start date and end date of each apartment booking?,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT guest_first_name ,  guest_last_name FROM guests",Return the first names and last names of all guests,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT COUNT(*) FROM apartment_bookings,Count the total number of apartment bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,"SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  ""Duplex""","Return the booking start date and end date for the apartments that have type code ""Duplex"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Show the most common apartment type code among apartments with more than 1 bathroom.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT guest_first_name ,  guest_last_name FROM guests",What are the first names and last names of all the guests?,"CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1,What is the apartment number of the apartment with the most beds?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Show the average room count of the apartments that have booking status code ""Provisional"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Confirmed"" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  ""Provisional""","Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  ""Columbus Square""","Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id","What are the apartment number, start date, and end date of each apartment booking?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code","Show each apartment type code, and the maximum and minimum number of rooms for each type.","CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  ""Suite 634""","Tell me the booking status code for the apartment with number ""Suite 634"".","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities),How many apartments do not have any facility?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

"
apartment_rentals,"SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager	 =  ""Brenden""","Show the addresses and phones of all the buildings managed by ""Brenden"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,Which apartment type code appears the most often?,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  ""Gym""","Show the total number of rooms of all apartments with facility code ""Gym"".","CREATE TABLE `Apartment_Facilities` (
  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),
  facility_code CHAR(15) PRIMARY KEY
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments",Give me the minimum and maximum bathroom count among all the apartments.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
loan_1,SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100 GROUP BY t2.bname ORDER BY SUM(t1.amount) DESC LIMIT 1,Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100,What are the names of banks that have loaned money to customers with credit scores below 100?,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT COUNT(DISTINCT acc_type) FROM customer,Count the number of different account types.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT COUNT(DISTINCT acc_type) FROM customer,How many distinct types of accounts are there?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,Find the branch name of the bank that has the most number of customers.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1","What is the name, account type, and account balance corresponding to the customer with the highest credit score?","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100 GROUP BY t2.bname ORDER BY SUM(t1.amount) DESC LIMIT 1,"What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?","CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT t1.bname ,  t1.city FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t2.loan_type  =  'Business'",What are the names and cities of bank branches that offer loans for business?,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT AVG(no_of_customers) FROM bank WHERE state  =  'Utah',What is the average number of customers across banks in the state of Utah?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer WHERE credit_score  <  (SELECT AVG(credit_score) FROM customer),What are the names of customers with credit score less than the average credit score across customers?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT AVG(no_of_customers) FROM bank WHERE state  =  'Utah',Find the average number of customers in all banks of Utah state.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,What is the name of the bank branch with the greatest number of customers?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1,Find the name of customer who has the lowest credit score.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,"SELECT t1.bname ,  t1.city FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t2.loan_type  =  'Business'",Find the city and name of bank branches that provide business loans.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT AVG(no_of_customers) FROM bank,Find the average number of customers cross all banks.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT SUM(no_of_customers) FROM bank,What is the total number of customers across banks?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT t1.cust_name ,  t1.acc_type FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING SUM(t2.amount)  >  5000",What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE t2.loan_type  =  'Mortgages',What are the names of customers who have not taken a Mortage loan?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT AVG(no_of_customers) FROM bank,What is the average number of bank customers?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT DISTINCT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id,What are the names of the different banks that have provided loans?,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer ORDER BY acc_bal,List the name of all customers sorted by their account balance in ascending order.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving',What are the names of customers who do not have saving accounts?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer ORDER BY acc_bal,"What are the names of all customers, ordered by account balance?","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT SUM(no_of_customers) FROM bank WHERE city  =  'New York City',What is the total number of customers who use banks in New York City?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT COUNT(DISTINCT city) FROM bank,In how many different cities are banks located?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount),List the name of all different customers who have some loan sorted by their total loan amount.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",Find the name and account balance of the customer whose name includes the letter 鈥榓鈥?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT SUM(no_of_customers) FROM bank,How many customers are there?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1,Which state has the greatest total number of bank customers?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount) DESC LIMIT 1,Find the name of customer who has the highest amount of loans.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT COUNT(DISTINCT state) FROM bank,Find the number of different states which banks are located at.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0","What are the states, account types, and credit scores for customers who have 0 loans?","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE t2.loan_type  =  'Mortgages',Find the name of customers who do not have a loan with a type of Mortgages.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT city ,  state FROM bank WHERE bname  =  'morningside'",What city and state is the bank with the name morningside in?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT SUM(no_of_customers) FROM bank WHERE city  =  'New York City',Find the number of customers in the banks at New York City.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT SUM(amount) ,  t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname","What are the names of the different bank branches, and what are their total loan amounts?","CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE amount  >  3000,Find the the name of the customers who have a loan with amount more than 3000.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE amount  >  3000,What are the names of customers who have a loan of more than 3000 in amount?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan),Find the average credit score of the customers who do not have any loan.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING COUNT(*)  >  1,Find the name of customers who have more than one loan.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Auto',Find the name of customers who have loans of both Mortgages and Auto.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname ORDER BY SUM(t2.amount) DESC LIMIT 1,What is the name of the bank branch that has lent the greatest amount?,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT SUM(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",What is the total account balance for customers with a credit score of above 100 for the different states?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,"SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",What are the names and account balances of customers with the letter a in their names?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,"SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1","Find the name, account type, and account balance of the customer who has the highest credit score.","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT COUNT(DISTINCT city) FROM bank,Find the number of different cities which banks are located at.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT SUM(t2.amount) FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t1.state  =  'New York',Find the total amount of loans provided by bank branches in the state of New York.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT city ,  state FROM bank WHERE bname  =  'morningside'",Find the city and state of the bank branch named morningside.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT DISTINCT t1.cust_name ,  t1.credit_score FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id",What are the different names and credit scores of customers who have taken a loan?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan),What is the average credit score for customers who have taken a loan?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0","Find the state, account type, and credit score of the customer whose number of loan is 0.","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT COUNT(DISTINCT state) FROM bank,In how many different states are banks located?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer WHERE credit_score  <  (SELECT AVG(credit_score) FROM customer),Find the name of customers whose credit score is below the average credit scores of all customers.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Auto',What are the names of customers who have taken both Mortgage and Auto loans?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING COUNT(*)  >  1,What are the names of customers who have taken out more than one loan?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount),"What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT DISTINCT t1.cust_name ,  t1.credit_score FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id",Find the name and credit score of the customers who have some loans.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT SUM(t2.amount) FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t1.state  =  'New York',What is the total amount of money loaned by banks in New York state?,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT bname FROM bank WHERE state  =  'New York',Find the branch names of banks in the New York state.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT SUM(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas',What are the total account balances for each customer from Utah or Texas?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',Find the name of customers who have both saving and checking account types.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan),Find the average credit score of the customers who have some loan.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1,Find the state which has the most number of customers.,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT DISTINCT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id,Find the name of bank branches that provided some loans.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname ORDER BY SUM(t2.amount) DESC LIMIT 1,Find the name of bank branch that provided the greatest total amount of loans.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT SUM(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas',Find the total account balance of each customer from Utah or Texas.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,"SELECT SUM(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state","For each state, find the total account balance of customers whose credit score is above 100.","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT COUNT(*) FROM bank,Count the number of bank branches.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1,What is the name of the customer with the worst credit score?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan),What is the average credit score for customers who have never taken a loan?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT AVG(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",What is the average account balance of customers with credit score below 50 for the different account types?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount) DESC LIMIT 1,What is the name of the customer who has greatest total loan amount?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
device,"SELECT t3.shop_name ,  t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id JOIN shop as t3 ON t1.shop_id  =  t3.shop_id",Show names of shops and the carriers of devices they have in stock.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1,List the name of the shop with the latest open year.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT carrier FROM device WHERE device_id NOT IN (SELECT device_id FROM stock),List the carriers of devices that have no devices in stock.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,"SELECT t3.shop_name ,  t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id JOIN shop as t3 ON t1.shop_id  =  t3.shop_id","What are the names of device shops, and what are the carriers that they carry devices in stock for?","CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY SUM(t1.quantity) DESC LIMIT 1,What is the name of the shop that has the greatest quantity of devices in stock?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC,Please show the software platforms of devices in descending order of the count.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT location FROM shop WHERE open_year  >  2012 INTERSECT SELECT location FROM shop WHERE open_year  <  2008,Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT COUNT(DISTINCT software_platform) FROM device,Count the number of different software platforms.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT COUNT(*) FROM device,How many devices are there?,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC LIMIT 1,What is the software platform that is most common amongst all devices?,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT carrier FROM device WHERE device_id NOT IN (SELECT device_id FROM stock),What are the carriers of devices that are not in stock anywhere?,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*)  >  1,What are the names of shops that have more than a single kind of device in stock?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT COUNT(*) FROM device,Count the number of devices.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT AVG(quantity) FROM stock,Give the average quantity of stocks.,"CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY SUM(t1.quantity) DESC LIMIT 1,Show the name of the shop that have the largest quantity of devices in stock.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,"SELECT open_date ,  open_year FROM shop WHERE shop_name  =  ""Apple""",What are the open dates and years for the shop named Apple?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1,Show the name of the shop that has the most kind of devices in stock.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT COUNT(DISTINCT software_platform) FROM device,How many different software platforms are there for devices?,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1,What is the shop name corresponding to the shop that opened in the most recent year?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,"SELECT shop_name ,  location FROM shop ORDER BY shop_name ASC","Return the names and locations of shops, ordered by name in alphabetical order.","CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT location FROM shop WHERE open_year  >  2012 INTERSECT SELECT location FROM shop WHERE open_year  <  2008,Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC LIMIT 1,List the software platform shared by the greatest number of devices.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the shop that has the most different kinds of devices in stock?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*)  >  1,Show names of shops that have more than one kind of device in stock.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC,"What are the different software platforms for devices, ordered by frequency descending?","CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,"SELECT software_platform ,  COUNT(*) FROM device GROUP BY software_platform","What are the different software platforms for devices, and how many devices have each?","CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT shop_name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM stock),What are the names of shops that do not have any devices in stock?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT shop_name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM stock),List the names of shops that have no devices in stock.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,"SELECT software_platform ,  COUNT(*) FROM device GROUP BY software_platform",Please show different software platforms and the corresponding number of devices using each.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT shop_name FROM shop ORDER BY open_year ASC,"Return the names of shops, ordered by year of opening ascending.","CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT AVG(quantity) FROM stock,What is the average quantity of stocks?,"CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT carrier FROM device WHERE software_platform != 'Android',Return the device carriers that do not have Android as their software platform.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT shop_name FROM shop ORDER BY open_year ASC,What are the names of shops in ascending order of open year?,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id GROUP BY t1.device_id HAVING COUNT(*)  >  1,Show the carriers of devices in stock at more than one shop.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

"
device,SELECT carrier FROM device ORDER BY carrier ASC,"What are the different carriers for devices, listed in alphabetical order?","CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,SELECT carrier FROM device WHERE software_platform != 'Android',"What are the carriers of devices whose software platforms are not ""Android""?","CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
ship_1,SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1,Which flag is most widely used among all ships?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT name FROM captain ORDER BY age DESC,Sort all captain names by their ages from old to young.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT COUNT(DISTINCT rank) FROM captain,Count the number of different ranks of captain.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT type FROM ship WHERE flag  =  'Panama' INTERSECT SELECT type FROM ship WHERE flag  =  'Malta',Find the ship type that are used by both ships with Panama and Malta flags.,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*)  >  1,What are the names of ships that have more than one captain?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT type FROM ship WHERE flag  =  'Panama' INTERSECT SELECT type FROM ship WHERE flag  =  'Malta',What types of ships have both ships that have Panama Flags and Malta flags?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1,Find the name of the ship that is steered by the youngest captain.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1,Which rank is the most common among captains?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT name FROM captain ORDER BY age DESC,"What are the names of captains, sorted by age descending?","CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT COUNT(*) ,  flag FROM ship GROUP BY flag","What are the different ship flags, and how many ships have each?","CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT class FROM captain GROUP BY class HAVING COUNT(*)  >  2,Which classes have more than two captains?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT COUNT(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",How many captains with younger than 50 are in each rank?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE class  =  'Third-rate ship of the line',Find the captain rank that has no captain in Third-rate ship of the line class.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT name FROM ship ORDER BY built_year ,  class","What are the names of ships, ordered by year they were built and their class?","CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",What are the names and flags of ships that do not have a captain with the rank of Midshipman?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT COUNT(*) FROM ship,Count the number of ships.,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT class FROM captain GROUP BY class HAVING COUNT(*)  >  2,Give the classes that have more than two captains.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1,Return the rank for which there are the fewest captains.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT name ,  class ,  rank FROM captain","What are the names, classes, and ranks of all captains?","CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1,What is the year in which most ships were built?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT COUNT(*) FROM ship,how many ships are there?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant',Find the name of captains whose rank are either Midshipman or Lieutenant.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT name FROM captain ORDER BY age LIMIT 1,What is the name of the youngest captain?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant',Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT name ,  class FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",Return the names and classes of ships that do not have a captain?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT name ,  type ,  flag FROM ship ORDER BY built_year DESC LIMIT 1","Find the name, type, and flag of the ship that is built in the most recent year.","CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1,What is the name of the ship that is commanded by the youngest captain?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT rank FROM captain WHERE class  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE class  =  'Armed schooner',Find the captain rank that has some captains in both Cutter and Armed schooner classes.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT rank FROM captain WHERE class  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE class  =  'Armed schooner',What are the ranks of captains that are both in the Cutter and Armed schooner classes?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT name ,  type ,  flag FROM ship ORDER BY built_year DESC LIMIT 1","What is the name, type, and flag of the ship that was built in the most recent year?","CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT COUNT(*) ,  rank FROM captain GROUP BY rank",How many captains are in each rank?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT AVG(age) ,  MIN(age) ,  class FROM captain GROUP BY class",What are the average and minimum age of captains in different class?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT COUNT(*) ,  rank FROM captain GROUP BY rank",Count the number of captains that have each rank.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT name ,  class FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",what are the names and classes of the ships that do not have any captain yet?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT name ,  class ,  rank FROM captain","Find the name, class and rank of all captains.","CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT name FROM captain ORDER BY age LIMIT 1,Return the name of the youngest captain.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT AVG(age) ,  MIN(age) ,  class FROM captain GROUP BY class",Return the average and minimum age of captains in each class.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant',What are the names of captains that have either the rank Midshipman or Lieutenant?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1,In which year were most of ships built?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE class  =  'Third-rate ship of the line',What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT name FROM ship ORDER BY built_year ,  class",List all ship names in the order of built year and class.,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,"SELECT COUNT(*) ,  flag FROM ship GROUP BY flag","Group by ships by flag, and return number of ships that have each flag.","CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT COUNT(DISTINCT rank) FROM captain,How many different captain ranks are there?,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*)  >  1,Find the name of the ships that have more than one captain.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
program_share,SELECT name FROM channel WHERE owner != 'CCTV',Find the names of channels that are not owned by CCTV.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(*) FROM program,Count the number of programs.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel WHERE owner != 'CCTV',Which channels are not owned by CCTV? Give me the channel names.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM program ORDER BY launch,"list all the names of programs, ordering by launch time.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT COUNT(DISTINCT owner) FROM channel,what is the number of different channel owners?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night',"How many distinct programs are broadcast at ""Night"" time?","CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM program WHERE origin != 'Beijing',"Which programs' origins are not ""Beijing""? Give me the program names.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',Find the names of the channels that are broadcast in the morning.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning"" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Night""",find the program owners that have some programs in both morning and night time.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS',What are the names of the channels owned by CCTV or HBS?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV',find the total percentage share of all channels owned by CCTV.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM program ORDER BY launch,"What is the list of program names, sorted by the order of launch date?","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner",What is the total rating of channel for each channel owner?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning"" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Night""",Who are the owners of the programs that broadcast both in the morning and at night?,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1,Which program is broadcast most frequently? Give me the program name.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning""",Which programs are never broadcasted in the morning? Give me the names of the programs.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM program ORDER BY launch DESC LIMIT 1,Which program was launched most recently? Return the program name.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1,Show me the owner of the channel with the highest rating.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV',What is the total share (in percent) of all the channels owned by CCTV?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',Which channels are broadcast in the morning? Give me the channel names.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",how many programs are broadcast in each time section of the day?,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,"SELECT name ,  origin ,  owner FROM program","List the name, origin and owner of each program.","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night',find the number of different programs that are broadcast during night time.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1,What is the owner of the channel that has the highest rating ratio?,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT origin FROM program ORDER BY origin,What is the list of program origins ordered alphabetically?,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel ORDER BY rating_in_percent DESC,Give me a list of all the channel names sorted by the channel rating in descending order.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,"SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  ""Morning""",Find the names of programs that are never broadcasted in the morning.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",Count the number of programs broadcast for each time section of a day.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT name FROM program WHERE origin != 'Beijing',find the names of programs whose origin is not in Beijing.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM program ORDER BY launch DESC LIMIT 1,find the name of the program that was launched most recently.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner",Find the total rating ratio for each channel owner.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT COUNT(DISTINCT owner) FROM channel,Count the number of distinct channel owners.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT name FROM channel ORDER BY rating_in_percent DESC,List all channel names ordered by their rating in percent from big to small.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
program_share,SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1,Find the name of the program that is broadcast most frequently.,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,"SELECT name ,  origin ,  owner FROM program","What are the name, origin and owner of each program?","CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',what are the names of the channels that broadcast in both morning and night?,"CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
election_representative,SELECT COUNT(DISTINCT party) FROM representative,How many distinct parties are there for representatives?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,"SELECT party ,  COUNT(*) FROM representative GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1",What is the party that has the largest number of representatives?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,SELECT t2.name FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id WHERE votes  >  10000,What are the names of representatives with more than 10000 votes in election?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,"SELECT lifespan FROM representative WHERE state  =  ""New York"" OR state  =  ""Indiana""",What are the life spans of representatives from New York state or Indiana state?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,"SELECT name FROM representative WHERE party != ""Republican""","What are the names of representatives whose party is not ""Republican""?","CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,"SELECT t2.name ,  t1.date FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id",What are the names of representatives and the dates of elections they participated in.,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,SELECT t2.name FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY votes DESC,What are the names of representatives in descending order of votes?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,"SELECT party FROM representative WHERE state  =  ""New York"" INTERSECT SELECT party FROM representative WHERE state  =  ""Pennsylvania""",Show the parties that have both representatives in New York state and representatives in Pennsylvania state.,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,"SELECT MIN(vote_percent) ,  MAX(vote_percent) FROM election",What are the minimum and maximum vote percents of elections?,"CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,"SELECT party ,  COUNT(*) FROM representative GROUP BY party",What are the different parties of representative? Show the party name and the number of representatives in each party.,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,SELECT t2.lifespan FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY vote_percent DESC,What are the lifespans of representatives in descending order of vote percent?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,"SELECT date ,  vote_percent FROM election",List the dates and vote percents of elections.,"CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,"SELECT name ,  party FROM representative",What are the names and parties of representatives?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,SELECT party FROM representative GROUP BY party HAVING COUNT(*)  >=  3,What parties have at least three representatives?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,"SELECT AVG(t1.votes) FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id WHERE t2.party  =  ""Republican""","What is the average number of votes of representatives from party ""Republican""?","CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,SELECT votes FROM election ORDER BY votes DESC,List the votes of elections in descending order.,"CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,SELECT COUNT(*) FROM election,How many elections are there?,"CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
election_representative,SELECT name FROM representative WHERE representative_id NOT IN (SELECT representative_id FROM election),List the names of representatives that have not participated in elections listed here.,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

"
phone_1,SELECT model_name FROM chip_model ORDER BY launch_year,List all the model names sorted by their launch year.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT chip_model ,  screen_mode FROM phone WHERE hardware_model_name = ""LG-P760"";","What are the chip model and screen mode of the phone with hardware model name ""LG-P760""?","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT accreditation_type ,  COUNT(*) FROM phone GROUP BY accreditation_type",Find the number of phones for each accreditation type.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,SELECT AVG(ram_mib) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone),Find the average ram mib size of the chip models that are never used by any phone.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT DISTINCT t2.hardware_model_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name  =  ""Nokia Corporation"" AND t1.type != ""Text"";","List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT t1.char_cells ,  t1.pixels ,  t1.hardware_colours FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.hardware_model_name = ""LG-P760"";","Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760"".","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT hardware_model_name ,  company_name FROM phone WHERE accreditation_type LIKE 'Full';",Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,SELECT model_name FROM chip_model WHERE launch_year BETWEEN 2002 AND 2004;,the names of models that launched between 2002 and 2004.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type  =  'Full',Find the names of the chip models that are not used by any phone with full accreditation type.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,SELECT * FROM chip_model,Find the details for all chip models.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT DISTINCT t2.hardware_model_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type  =  ""Graphics"" OR t2.company_name  =  ""Nokia Corporation""","List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics.""","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT AVG(t1.rom_mib) FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t2.company_name = ""Nokia Corporation"";","What is the average ROM size of phones produced by the company named ""Nokia Corporation""?","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,SELECT company_name FROM phone GROUP BY company_name HAVING COUNT(*)  >  1;,List the name of the company that produced more than one phone model.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,"SELECT COUNT(*) FROM phone WHERE company_name = ""Nokia Corporation"";","How many phone hardware models are produced by the company named ""Nokia Corporation""?","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,"SELECT DISTINCT t2.hardware_model_name , t2.company_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.used_kb BETWEEN 10 AND 15;",List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,SELECT t2.hardware_model_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t1.launch_year = 2002 ORDER BY t1.ram_mib DESC LIMIT 1;,List the name of the phone model launched in year 2002 and with the highest RAM size.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT company_name ,  COUNT(*) FROM phone GROUP BY company_name ORDER BY COUNT(*) ASC LIMIT 1;",Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,"SELECT MAX(t1.ram_mib) ,  MIN(t1.ram_mib) FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t2.company_name = ""Nokia Corporation"";","What is maximum and minimum RAM size of phone produced by company named ""Nokia Corporation""?","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT model_name ,  ram_mib FROM chip_model ORDER BY ram_mib ASC LIMIT 1;",Which model has the least amount of RAM? List the model name and the amount of RAM.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT t2.hardware_model_name ,  t2.company_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type  =  ""Graphics"";","List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT MAX(used_kb) , MIN(used_kb) , AVG(used_kb) FROM screen_mode;","List the maximum, minimum and average number of used kb in screen mode.","CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,SELECT accreditation_level FROM phone GROUP BY accreditation_level HAVING COUNT(*)  >  3,Find the accreditation level that more than 3 phones use.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
phone_1,SELECT COUNT(*) FROM chip_model WHERE wifi  =  'No',How many models do not have the wifi function?,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,"SELECT t1.wifi , t3.type FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.Hardware_model_name = ""LG-P760"";","What are the wifi and screen mode type of the hardware model named ""LG-P760""?","CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,SELECT COUNT(*) FROM chip_model WHERE wifi  =  'No',Count the number of chip model that do not have wifi.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

"
phone_1,SELECT t1.pixels FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode  =  t2.screen_mode WHERE t2.accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode  =  t2.screen_mode WHERE t2.accreditation_type  =  'Full',Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT accreditation_type ,  COUNT(*) FROM phone GROUP BY accreditation_type",How many phones belongs to each accreditation type?,"CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
machine_repair,SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment),List the names of technicians who have not been assigned to repair machines.,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT team ,  COUNT(*) FROM technician GROUP BY team","For each team, how many technicians are there?","CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT starting_year FROM technician WHERE team  =  ""CLE"" INTERSECT SELECT starting_year FROM technician WHERE team  =  ""CWS""","What are the starting years shared by the technicians from the team ""CLE"" or ""CWS""?","CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1,What is the starting year of the oldest technicians?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT starting_year FROM technician WHERE team  =  ""CLE"" INTERSECT SELECT starting_year FROM technician WHERE team  =  ""CWS""","Show the starting years shared by technicians from team ""CLE"" and ""CWS"".","CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT COUNT(*) FROM technician,How many technicians are there?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT name FROM technician ORDER BY age ASC,List the names of technicians in ascending order of age.,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id WHERE t2.value_points  >  70,Show names of technicians who are assigned to repair machines with value point more than 70.,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT team FROM technician GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1,What are the teams with the most technicians?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT name FROM technician WHERE team != ""NYY""",What is the name of the technician whose team is not 'NYY'?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment),What are the names of the technicians that have not been assigned to repair machines?,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT team FROM technician GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1,Please show the team that has the most number of technicians.,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1,What is the starting year for the oldest technician?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT team ,  COUNT(*) FROM technician GROUP BY team",Show different teams of technicians and the number of technicians in each team.,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT name FROM technician WHERE team != ""NYY""","List the name of technicians whose team is not ""NYY"".","CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT t2.name ,  COUNT(*) FROM repair_assignment as t1 JOIN technician as t2 ON t1.technician_id  =  t2.technician_id GROUP BY t2.name",Show names of technicians and the number of machines they are assigned to repair.,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

"
machine_repair,"SELECT t3.name ,  t2.machine_series FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id",Show names of technicians and series of machines they are assigned to repair.,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT name FROM technician WHERE age  =  36 OR age  =  37,Show the name of technicians aged either 36 or 37,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT team ,  starting_year FROM technician",What is the team and starting year for each technician?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT team FROM technician GROUP BY team HAVING COUNT(*)  >=  2,Show the team that have at least two technicians.,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id WHERE t2.value_points  >  70,What are the names of the technicians that are assigned to repair machines with more point values than 70?,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT team FROM technician GROUP BY team HAVING COUNT(*)  >=  2,What is the team with at least 2 technicians?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id ORDER BY t2.quality_rank,What are the names of the technicians by ascending order of quality rank for the machine they are assigned?,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT team ,  starting_year FROM technician",What are the team and starting year of technicians?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT name FROM technician WHERE age  =  36 OR age  =  37,What are the names of the technicians aged either 36 or 37?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT t3.name ,  t2.machine_series FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id",What are the names of technicians and the machine series that they repair?,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,"SELECT t2.name ,  COUNT(*) FROM repair_assignment as t1 JOIN technician as t2 ON t1.technician_id  =  t2.technician_id GROUP BY t2.name",What are the names of the technicians  and how many machines are they assigned to repair?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

"
workshop_paper,SELECT author FROM submission ORDER BY scores ASC,List the authors of submissions in ascending order of scores.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT college FROM submission GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1,Show the most common college of authors of submissions.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT date ,  venue FROM workshop ORDER BY venue",Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.,"CREATE TABLE `workshop` (
  Workshop_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT
);

"
workshop_paper,SELECT AVG(scores) FROM submission,What is the average score of submissions?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance),List the authors who do not have submission to any workshop.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,SELECT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance),Which authors did not submit to any workshop?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,SELECT college FROM submission WHERE scores  >  90 INTERSECT SELECT college FROM submission WHERE scores  <  80,Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT AVG(scores) FROM submission,Compute the average score of submissions.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT COUNT(*) FROM submission,How many submissions are there?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT t2.author ,  t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id","For each submission, find its author and acceptance result.","CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,"SELECT t2.author ,  COUNT(DISTINCT t1.workshop_id) FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author",How many workshops did each author submit to? Return the author name and the number of workshops.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,"SELECT author FROM submission WHERE college  =  ""Florida"" OR college  =  ""Temple""","Show the names of authors from college ""Florida"" or ""Temple""","CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT author FROM submission ORDER BY scores ASC,Find the author for each submission and list them in ascending order of submission score.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT college ,  COUNT(*) FROM submission GROUP BY college","For each college, return the college name and the count of authors with submissions from that college.","CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT t2.author FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author HAVING COUNT(DISTINCT t1.workshop_id)  >  1,Show the authors who have submissions to more than one workshop.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,SELECT author FROM submission ORDER BY scores DESC LIMIT 1,What is the author of the submission with the highest score?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT date ,  venue FROM workshop ORDER BY venue",Show the date and venue of each workshop in ascending alphabetical order of the venue.,"CREATE TABLE `workshop` (
  Workshop_ID INT PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT
);

"
workshop_paper,SELECT COUNT(*) FROM submission,Count the number of submissions.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT author FROM submission ORDER BY scores DESC LIMIT 1,Find the author who achieved the highest score in a submission.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT t2.author ,  t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id",Show the authors of submissions and the acceptance results of their submissions.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,"SELECT t2.author ,  COUNT(DISTINCT t1.workshop_id) FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author",Show each author and the number of workshops they submitted to.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,"SELECT author ,  college FROM submission",What are the authors of submissions and their colleges?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT author ,  college FROM submission","For each submission, show the author and their affiliated college.","CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id ORDER BY t2.scores DESC LIMIT 1,Which submission received the highest score in acceptance result. Show me the result.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,SELECT college FROM submission GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1,Which college has the most authors with submissions?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id ORDER BY t2.scores DESC LIMIT 1,Show the result of the submission with the highest score.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

"
workshop_paper,"SELECT college ,  COUNT(*) FROM submission GROUP BY college",Show different colleges along with the number of authors of submission from each college.,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
local_govt_mdm,"SELECT t1.council_tax_id FROM rent_arrears as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id JOIN customer_master_index as t3 ON t3.master_customer_id  =  t2.master_customer_id WHERE t3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'","What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","CREATE TABLE `Rent_Arrears` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t1.source_system_code ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN benefits_overpayments as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id ORDER BY t2.council_tax_id","What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.","CREATE TABLE `Benefits_Overpayments` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT t1.source_system_code ,  t1.master_customer_id ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN parking_fines as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id",Wat is the tax source system code and master customer id of the taxes related to each parking fine id?,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT COUNT(*) FROM rent_arrears,How many council taxes are collected for renting arrears ?,"CREATE TABLE `Rent_Arrears` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,SELECT t1.electoral_register_id FROM electoral_register as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id WHERE t2.source_system_code  =  'Electoral' OR t2.source_system_code  =  'Tax',What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?,"CREATE TABLE `Electoral_Register` (
  electoral_register_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,"SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",List the council tax ids and their related cmi cross references of all the parking fines.,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,"SELECT DISTINCT t2.source_system_code FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t1.cmi_details  =  'Gottlieb ,  Becker and Wyman'","What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

"
local_govt_mdm,"SELECT t2.cmi_cross_ref_id ,  t2.master_customer_id ,  COUNT(*) FROM business_rates as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id","How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

CREATE TABLE `Business_Rates` (
  business_rates_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
local_govt_mdm,SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references,How many different source system code for the cmi cross references are there?,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%',Which distinct source system code includes the substring 'en'?,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
local_govt_mdm,SELECT * FROM customer_master_index ORDER BY cmi_details DESC,"List all information about customer master index, and sort them by details in descending order.","CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

"
local_govt_mdm,SELECT t1.cmi_details FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t2.source_system_code  =  'Tax',what are the details of the cmi masters that have the cross reference code 'Tax'?,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

CREATE TABLE `Customer_Master_Index` (
  master_customer_id INTEGER,
  cmi_details VARCHAR(255)
);

"
local_govt_mdm,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,Which cmi cross reference id is not related to any parking taxes?,"CREATE TABLE `Parking_Fines` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

"
store_product,"SELECT product FROM product WHERE product LIKE ""%Scanner%""","Find all the product whose name contains the word ""Scanner"".","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT type ,  COUNT(*) FROM store GROUP BY type","For each type of store, how many of them are there?","CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  ""Khanewal District""",What are the names of all the stores located in Khanewal District?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",How many stores are headquarted in each city?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1,Find the most prominent max page size among all the products.,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",Find the number of stores in each city.,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" OR pages_per_minute_color  <  5",What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),What are the names of all the stores in the largest district by population?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT DISTINCT district_name FROM district ORDER BY city_area DESC,What are the different district names in order of descending city area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT AVG(pages_per_minute_color) FROM product,What is the average number of pages per minute color?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000,Find the name all districts with city area greater than 10 or population larger than 100000,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,What is the name of the district with the most residents?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district),Find the total population of the districts where the area is bigger than the average city area.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1,What is the most common maximum page size?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT product FROM product WHERE product LIKE ""%Scanner%""","What are all of the products whose name includes the substring ""Scanner""?","CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1,Find the city with the most number of stores.,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3,Find the total population of the top 3 districts with the largest area.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""City Mall"" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""Village Store""",Find the names of districts where have both city mall and village store type stores.,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1,What is the city with the most number of flagship stores?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT AVG(pages_per_minute_color) FROM product,What is the average pages per minute color?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,Which district has the largest population?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  ""Blackville""",What city is the headquarter of the store Blackville?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  ""Miramichi""",What products are sold at the store named Miramichi?,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `store_product` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3,What is the maximum page size for everything that has more than 3 products listed?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1),Find the name of the products that are not using the most frequently-used max page size.,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  ""Miramichi""","What products are available at store named ""Miramichi""?","CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

CREATE TABLE `store_product` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)
);

CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""City Mall"" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  ""Village Store""",What are the names of the districts that have both mall and village store style shops?,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000,What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" OR pages_per_minute_color  <  5","Find products with max page size as ""A4"" or pages per minute color smaller than 5.","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" AND pages_per_minute_color  <  5",What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,"SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  ""Blackville""","Which city is the headquarter of the store named ""Blackville"" in?","CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT DISTINCT district_name FROM district ORDER BY city_area DESC,Find all the distinct district names ordered by city area in descending.,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district),What is the total population for all the districts that have an area larger tahn the average city area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000",Find the name and population of district with population between 200000 and 2000000,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT type ,  COUNT(*) FROM store GROUP BY type",Find all types of store and number of them.,"CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,"SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  ""Khanewal District""",Find the names of all stores in Khanewal District.,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3,What is the total number of residents for the districts with the 3 largest areas?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3,Find the list of page size which have more than 3 product listed,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),Find all the stores in the district with the most population.,"CREATE TABLE `store_district` (
  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),
  District_ID INT REFERENCES district(District_ID)
);

CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE `store` (
  Store_ID INT PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking INT
);

"
store_product,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1),What are the names of all products that are not the most frequently-used maximum page size?,"CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
gas_company,"SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year","What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas',What are the headquarters that have both a company in the banking and 'oil and gas' industries?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id",Show the company name with the number of gas station.,"CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*)","For each location, how many gas stations are there in order?","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company","Show minimum, maximum, and average market value for all companies.","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil',Show the manager name for gas stations belonging to the ExxonMobil company.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",Show the company name and the main industry for all companies whose headquarters are not from USA.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking',What are the headquarters without companies that are in the banking industry?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas',Show all headquarters with both a company in banking industry and a company in Oil and gas.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking',Show all headquarters without a company in banking industry.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT COUNT(*) FROM company,What is the total number of companies?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1","For each main industry, what is the total number of companies for the industry with the highest total market value?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC",Show all company names and headquarters in the descending order of market value.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",What are the companies and main industries of all companies that are not headquartered in the United States?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*)",Show all locations and the number of gas stations in each location ordered by the count.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,How many gas station are opened between 2000 and 2005?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT company ,  rank FROM company ORDER BY sales_billion DESC",List the company name and rank for all companies in the decreasing order of their sales.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  rank FROM company ORDER BY sales_billion DESC",What is the name and rank of every company ordered by descending number of sales?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry",What are the main indstries and total market value for each industry?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters","For each headquarter, what are the headquarter and how many companies are centered there?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT DISTINCT main_industry FROM company,Show all main industry for all companies.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT COUNT(*) FROM company,How many gas companies are there?,"CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion","What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?","CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  headquarters FROM company ORDER BY market_value DESC",What are the names and headquarters of all companies ordered by descending market value?,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT DISTINCT main_industry FROM company,What are the different main industries for all companies?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",Show company name and main industry without a gas station.,"CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT location FROM gas_station ORDER BY open_year,What are the locations of all the gas stations ordered by opening year?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry",Show all main industry and total market value in each industry.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",What are the main industries of the companies without gas stations and what are the companies?,"CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the manager with the most gas stations that opened after 2000?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,What is the total number of gas stations that opened between 2000 and 2005?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100,What are the locations that have gas stations owned by a company with a market value greater than 100?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT location FROM gas_station ORDER BY open_year,order all gas station locations by the opening year.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,"SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1",List the main industry with highest total market value and its number of companies.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year","Show gas station id, location, and manager_name for all gas stations ordered by open year.","CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

"
gas_company,SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100,Show all locations where a gas station for company with market value greater than 100 is located.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2,Show headquarters with at least two companies in the banking industry.,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil',What are the names of the managers for gas stations that are operated by the ExxonMobil company?,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.,"CREATE TABLE `gas_station` (
  Station_ID INT PRIMARY KEY,
  Open_Year INT,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company","What is the minimum, maximum, and average market value for every company?","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
entertainment_awards,SELECT AVG(num_of_audience) FROM festival_detail,What is the average number of audience for festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT year FROM festival_detail GROUP BY year HAVING COUNT(*)  >  1,List the year in which there are more than one festivals.,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT num_of_audience FROM festival_detail WHERE year  =  2008 OR year  =  2010,Show the number of audience in year 2008 or 2010.,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT COUNT(*) FROM artwork,How many artworks are there?,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT t1.festival_id ,  t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id HAVING COUNT(*)  >=  2",Show the ids and names of festivals that have at least two nominations for artworks.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT type FROM artwork GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of artworks.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT festival_name FROM festival_detail ORDER BY year DESC LIMIT 3,Show the names of the three most recent festivals.,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t2.name ,  t3.Festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id","For each nomination, show the name of the artwork and name of the festival where it is nominated.","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT location FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1,What is the location of the festival with the largest number of audience?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT chair_name FROM festival_detail ORDER BY year ASC,"What are the names of the chairs of festivals, sorted in ascending order of the year held?","CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t2.type  =  ""Program Talent Show""","Show the names of festivals that have nominated artworks of type ""Program Talent Show"".","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT name FROM artwork WHERE type != ""Program Talent Show""","List the name of artworks whose type is not ""Program Talent Show"".","CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT SUM(num_of_audience) FROM festival_detail,What are the total number of the audiences who visited any of the festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,"SELECT t1.festival_id ,  t3.festival_name ,  COUNT(*) FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id","Show the id, name of each festival and the number of artworks it has nominated.","CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT festival_name ,  location FROM festival_detail",What are the names and locations of festivals?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT year FROM festival_detail WHERE location  =  'United States' INTERSECT SELECT year FROM festival_detail WHERE location != 'United States',In which year are there festivals both inside the 'United States' and outside the 'United States'?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
entertainment_awards,SELECT name FROM artwork ORDER BY name ASC,List the name of artworks in ascending alphabetical order.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT DISTINCT t2.type FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t3.year  =  2007,Show distinct types of artworks that are nominated in festivals in 2007.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,SELECT t2.name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id ORDER BY t3.year,Show the names of artworks in ascending order of the year they are nominated in.,"CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
entertainment_awards,"SELECT type ,  COUNT(*) FROM artwork GROUP BY type",Please show different types of artworks with the corresponding number of artworks of each type.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

"
protein_institute,SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20,List the names of buildings with at least 200 feet of height and with at least 20 floors.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
protein_institute,SELECT COUNT(*) FROM building WHERE height_feet  >  (SELECT AVG(height_feet) FROM building) OR floors  >  (SELECT AVG(floors) FROM building),Show the number of buildings with a height above the average or a number of floors above the average.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
protein_institute,SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id JOIN building as t3 ON t3.building_id  =  t1.building_id WHERE t3.floors  >=  20,How many proteins are associated with an institution in a building with at least 20 floors?,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t2.protein_name ,  t1.institution FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id",Show the protein name and the institution name.,"CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT AVG(floors) ,  MAX(floors) ,  MIN(floors) FROM building","What are the average, maximum, and minimum number of floors for all buildings?","CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,"SELECT type ,  COUNT(*) ,  SUM(enrollment) FROM institution GROUP BY type","Show institution types, along with the number of institutions and total enrollment for each type.","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT name FROM building ORDER BY height_feet DESC LIMIT 1,What is the name of the tallest building?,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
protein_institute,SELECT COUNT(*) FROM building,How many buildings are there?,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT COUNT(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein),How many institutions do not have an associated protein in our record?,"CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT name ,  street_address ,  floors FROM building ORDER BY floors","Show the name, street address, and number of floors for all buildings ordered by the number of floors.","CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

"
protein_institute,SELECT name FROM building EXCEPT SELECT t1.name FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  =  2003,Show the names of buildings except for those having an institution founded in 2003.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id WHERE t1.founded  >  1880 OR t1.type  =  'Private',"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?","CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT institution ,  location FROM institution WHERE founded  >  1990 AND type  =  'Private'","Show the names and locations of institutions that are founded after 1990 and have the type ""Private"".","CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution),Show the name of buildings that do not have any institution.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t1.name ,  t1.height_feet FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  >  1880 GROUP BY t1.building_id HAVING COUNT(*)  >=  2",Show the names and heights of buildings with at least two institutions founded after 1880.,"CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT DISTINCT type FROM institution,Show all the distinct institution types.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t1.institution ,  COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id GROUP BY t1.institution_id",Show institution names along with the number of proteins for each institution.,"CREATE TABLE `protein` (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT REFERENCES Institution(Institution_id)
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,SELECT type FROM institution GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1,Show the institution type with the largest number of institutions.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
roller_coaster,"SELECT status ,  COUNT(*) FROM roller_coaster GROUP BY status",Show the different statuses and the numbers of roller coasters for each status.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1,Show the park of the roller coaster with the highest speed.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT speed FROM roller_coaster ORDER BY length DESC LIMIT 1,What are the speeds of the longest roller coaster?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name HAVING COUNT(*)  >  1,Show the names of countries that have more than one roller coaster.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,"SELECT t1.name ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id ORDER BY t2.height DESC LIMIT 1",Show the name and population of the country that has the highest roller coaster.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,SELECT AVG(speed) FROM roller_coaster,What is the average speed of roller coasters?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common status of roller coasters.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT COUNT(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE length  >  3000 ),How many countries do not have an roller coaster longer than 3000?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster WHERE length  >  3300 OR height  >  100,Show the statuses of roller coasters longer than 3300 or higher than 100.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t2.name ,  t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id",Show the names of roller coasters and names of country they are in.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,SELECT COUNT(*) FROM roller_coaster,How many roller coasters are there?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT t1.name ,  AVG(t2.speed) FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name",Show the names of countries and the average speed of roller coasters from each country.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,SELECT status FROM roller_coaster GROUP BY status HAVING COUNT(*)  >  2,List the status shared by more than two roller coaster.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,"SELECT name FROM country WHERE languages != ""German""","List the names of countries whose language is not ""German"".","CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

"
roller_coaster,"SELECT length ,  height FROM roller_coaster",What are the lengths and heights of roller coasters?,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
roller_coaster,SELECT name FROM roller_coaster ORDER BY length ASC,List the names of roller coasters by ascending order of length.,"CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
local_govt_in_alabama,"SELECT service_id ,  event_details FROM events",List the service id and details for the events.,"CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Success' INTERSECT SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Fail',Which services type had both successful and failure event details?,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events),How many events did not have any participants?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,"SELECT t1.event_id ,  t1.event_details FROM events as t1 JOIN participants_in_events as t2 ON t1.event_id  =  t2.event_id GROUP BY t1.event_id HAVING COUNT(*)  >  1",What are the ids and details of events that have more than one participants?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT COUNT(DISTINCT participant_id) FROM participants_in_events,What are all the distinct participant ids who attended any events?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,"SELECT t3.service_id ,  t4.service_type_code FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id JOIN events as t3 ON t2.event_id   =  t3.event_id JOIN services as t4 ON t3.service_id  =  t4.service_id GROUP BY t3.service_id ORDER BY COUNT(*) asC LIMIT 1",Which service id and type has the least number of participants?,"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1,What is the most common participant type?,"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT COUNT(*) FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id WHERE t1.participant_details LIKE '%Dr.%',How many events had participants whose details had the substring 'Dr.',"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY COUNT(*) DESC LIMIT 1,What is the id of the event with the most participants?,"CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
local_govt_in_alabama,SELECT COUNT(*) FROM participants WHERE participant_type_code  =  'Organizer',How many participants belong to the type 'Organizer'?,"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT event_id FROM events EXCEPT SELECT t1.event_id FROM participants_in_events as t1 JOIN participants as t2 ON t1.participant_id  =  t2.participant_id WHERE participant_details  =  'Kenyatta Kuhn',Which events id does not have any participant with detail 'Kenyatta Kuhn'?,"CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,SELECT t1.event_details FROM events as t1 JOIN services as t2 ON t1.service_id  =  t2.service_id WHERE t2.service_type_code  =  'Marriage',what are the event details of the services that have the type code 'Marriage'?,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

CREATE TABLE `Events` (
  Event_ID INTEGER,
  Service_ID INTEGER REFERENCES Services(Service_ID),
  Event_Details VARCHAR(255)
);

"
local_govt_in_alabama,"SELECT participant_id ,  participant_type_code ,  participant_details FROM  participants","What are all the the participant ids, type code and details?","CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

"
local_govt_in_alabama,"SELECT t1.participant_id ,  t1.participant_type_code ,  COUNT(*) FROM participants as t1 JOIN participants_in_Events as t2 ON t1.participant_id  =  t2.participant_id GROUP BY t1.participant_id","How many events have each participants attended? List the participant id, type and the number.","CREATE TABLE `Participants` (
  Participant_ID INTEGER,
  Participant_Type_Code CHAR(15),
  Participant_Details VARCHAR(255)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

CREATE TABLE `Participants_in_Events` (
  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),
  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)
);

"
architecture,SELECT AVG(length_feet) FROM bridge,What is the average length in feet of the bridges?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
architecture,"SELECT t1.id ,  t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1","What is the id, name and nationality of the architect who built most mills?","CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,"SELECT MAX(t1.length_meters) ,  t2.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id",What is the maximum length in meters for the bridges and what are the architects' names?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,"SELECT t1.id ,  t1.name FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  >=  3",What are the ids and names of the architects who built at least 3 bridges ?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT COUNT(*) FROM architect WHERE gender  =  'female',How many architects are female?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );,How many architects haven't built a mill before year 1850?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT name FROM mill WHERE location != 'Donceel',What are the names of the mills which are not located in 'Donceel'?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  2 UNION SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  1","What are the ids, names and genders of the architects who built two bridges or one mill?","CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT DISTINCT t1.type FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' OR t2.nationality  =  'Canadian',What are the distinct types of mills that are built by American or Canadian architects?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,"SELECT type ,  COUNT(*) FROM mill GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1","What is the most common mill type, and how many are there?","CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,SELECT t1.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet,"show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.","CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,"SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name","List the name, nationality and id of all male architects ordered by their names lexicographically.","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT DISTINCT t1.name FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id JOIN bridge as t3 ON t3.architect_id  =  t2.id WHERE t3.length_meters  >  80,What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT name FROM mill WHERE name LIKE '%Moulin%',Which of the mill names contains the french word 'Moulin'?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
architecture,"SELECT DISTINCT t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id",What are the distinct names and nationalities of the architects who have ever built a mill?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
architecture,SELECT location FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge',What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?,"CREATE TABLE `bridge` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL
);

"
railway,SELECT location FROM railway GROUP BY location HAVING COUNT(*)  >  1,Show the locations that have more than one railways.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT builder FROM railway GROUP BY builder ORDER BY COUNT(*) DESC LIMIT 1,Show the most common builder of railways.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT name FROM manager ORDER BY level ASC,What are the names of managers in ascending order of level?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT country FROM manager WHERE age  >  50 INTERSECT SELECT country FROM manager WHERE age  <  46,Show the countries that have both managers of age above 50 and managers of age below 46.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,"SELECT name ,  arrival FROM train",What are the names and arrival times of trains?,"CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT MAX(level) FROM manager WHERE country != ""Australia	""","What is the maximum level of managers in countries that are not ""Australia""?","CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT working_year_starts FROM manager ORDER BY level DESC,Show the working years of managers in descending order of their level.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT COUNT(*) FROM railway,How many railways are there?,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT name FROM manager ORDER BY age DESC LIMIT 1,What is the name of the oldest manager?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,"SELECT t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id WHERE t2.name  =  ""Andaman Exp""","Show the builder of railways associated with the trains named ""Andaman Exp"".","CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT t2.name ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id",Show the names of trains and locations of railways they are in.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,"SELECT location ,  COUNT(*) FROM railway GROUP BY location",Show different locations of railways along with the corresponding number of railways at each location.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,"SELECT wheels ,  location FROM railway",List the wheels and locations of the railways.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT AVG(age) FROM manager,What is the average age for all managers?,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,SELECT builder FROM railway ORDER BY builder ASC,List the builders of railways in ascending alphabetical order.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,"SELECT t2.railway_id ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id HAVING COUNT(*)  >  1",Show id and location of railways that are associated with more than one train.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
railway,SELECT DISTINCT country FROM manager,Show the distinct countries of managers.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
railway,"SELECT builder ,  COUNT(*) FROM railway GROUP BY builder","Show different builders of railways, along with the corresponding number of railways using each builder.","CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT country FROM manager WHERE age  >  50 OR age  <  46,Show the countries that have managers of age above 50 or below 46.,"CREATE TABLE `manager` (
  Manager_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age INT,
  Level INT
);

"
book_2,SELECT publication_date FROM publication ORDER BY price DESC,What are the dates of publications in descending order of price?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(DISTINCT publication_date) FROM publication,What is the number of distinct publication dates?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT writer FROM book GROUP BY writer HAVING COUNT(*)  >  1,List the writers who have written more than one book.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT DISTINCT publisher FROM publication WHERE price  >  5000000,What are the distinct publishers of publications with price higher than 5000000?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT publisher FROM publication WHERE price  >  10000000 INTERSECT SELECT publisher FROM publication WHERE price  <  5000000,Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,"SELECT title FROM book WHERE writer != ""Elaine Lee""","What are the titles of the books whose writer is not ""Elaine Lee""?","CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common publication date.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,"SELECT t1.title ,  t2.publication_date FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id",Show the title and publication dates of books.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,"SELECT title ,  issues FROM book",What are the title and issues of the books?,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT t1.writer FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id WHERE t2.price  >  4000000,Show writers who have published a book with price more than 4000000.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT title FROM book ORDER BY issues ASC,List the titles of the books in ascending order of issues.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publisher FROM publication ORDER BY price DESC LIMIT 1,List the publisher of the publication with the highest price.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(DISTINCT publication_date) FROM publication,How many distinct publication dates are there in our record?,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT COUNT(*) FROM book,How many books are there?,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
book_2,SELECT writer FROM book ORDER BY writer ASC,List the writers of the books in ascending alphabetical order.,"CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3,List the publication dates of publications with 3 lowest prices.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication),List the titles of books that are not published.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT t1.title FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id ORDER BY t2.price DESC,Show the titles of books in descending order of publication price.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

CREATE TABLE `book` (
  Book_ID INT PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

"
book_2,SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*)  >  1,Show publishers that have more than one publication.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
