{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Give the distinct headquarters of manufacturers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT headquarter FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the names and the prices of all the products in the store.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the sum of revenue from companies with headquarters in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name of the products with a price less than or equal to $200.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products WHERE price  <=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students along with how many sports and games did they play?", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "How many students play video games?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the average, minimum, and max ages for each of the different majors?", "output": "```gerenated SQL\n-- SQL: SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students and number of hours played?", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the different types of video games?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT gtype FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the types of video games and how many are in each type?", "output": "```gerenated SQL\n-- SQL: SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  \"Lacrosse\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Which game type has least number of games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the number of documents.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find names and ids of all documents with document type code BK.", "output": "```gerenated SQL\n-- SQL: SELECT document_name ,  document_id FROM documents WHERE document_type_code  =  \"BK\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "What are the different statement ids on accounts, and the number of accounts for each?", "output": "```gerenated SQL\n-- SQL: SELECT statement_id ,  COUNT(*) FROM accounts GROUP BY statement_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "What are the document ids for the budget type code 'SF'?", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents_with_expenses WHERE budget_type_code  =  'SF';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids of documents with letter 's' in the name with any expense budgets.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_id FROM documents as t1 JOIN documents_with_expenses as t2 ON t1.document_id  =  t2.document_id WHERE t1.document_name LIKE '%s%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "Count the number of budget codes.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM ref_budget_codes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\n", "input": "Show all document type codes, document type names, document type descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM ref_document_types;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "What is the project id and detail for the project with at least two documents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.project_id ,  t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id GROUP BY t1.project_id HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "pldi 2015 conference", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\n", "input": "papers with at least 5 citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >=  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "List the journals published in March , 2011", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT journalid FROM paper WHERE year  =  2011 GROUP BY journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\n", "input": "eccv 2014 papers using ImageNet", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers written by sharon goldwater", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "In 2010 what journal published an article about Trophic Cascade ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "acl papers in 2012 about Parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by sharon goldwater ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "conferences that Daniella Coelho has published in", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Has Peter Mertens and Dina Barbian written a paper together ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "what keyphrases get most citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.citingpaperid)  ,  t1.keyphrasename FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite as t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT(t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\n", "input": "How many papers run experiments on ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "Question Answering publications", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "papers about Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "chi papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "what papers have fewer than 5 citations by ACL papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers from pldi 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what topics does oren etzioni write about most ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.keyphraseid)  ,  t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT(t2.keyphraseid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\n", "input": "which papers used WebKB ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "datasets for semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Liwen Xiong 's papers in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "most cited papers for parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "convolution by brian curless", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "keywords in the papers written by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\n", "input": "List of authors acl 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "which year had the most NIPS papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who wrote sensor fusion ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers has brian curless written on convolution ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "When did Peter Mertens and Dina Barbian collaborate ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "journal papers for instance segmentation", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers are presented in nature communications 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "when was the first deep learning paper published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers where sharon goldwater is an author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers published in the last year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE year  =  ( SELECT MAX(year) FROM paper );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "What is the paper with the most citation about Artificial Intelligence ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "What was the topic of best paper in 2012 EMNLP-CoNLL ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.keyphraseid  ,  t2.paperid FROM paper as t2 JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase as t1 ON t2.paperid  =  t1.paperid JOIN venue as t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What is the venue of Fracture of acrylic bone cement ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many paper does Christopher D. Manning have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\n", "input": "author published acl 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "list papers published by balakrishnan prabhakaran", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What datasets have jitendra malik used", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "keyphrases used by Luke Zettlemoyer .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "When was benjamin mako hill 's first publication ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by brian curless in convolution topic", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers has Christopher D. Manning published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What conferences did li dong submit to in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\n", "input": "how is the most prolific author in chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "who is the most cited author at CVPR ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid JOIN cite as t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Liwen Xiong 's papers in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "How many papers were written on the convolutional neural networks this year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "How many papers were written on question answering in 2011 through 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "which papers in acl 2012 had Parsing in them ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers has Christopher D. Manning written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "List of papers in pldi 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers has written by sharon goldwater ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What is the most cited paper of ohad shamir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the total and average enrollment of all schools?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  AVG(enrollment) FROM school;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\nCREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "Find the names of schools that have more than one donator with donation amount above 8.5.", "output": "```gerenated SQL\n-- SQL: SELECT t2.school_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t1.amount  >  8.5 GROUP BY t1.school_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" OR award  =  \"Cleavant Derricks\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the different nominees of musicals that have an award that is not the Tony Award.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT nominee FROM musical WHERE award != \"Tony award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "How many actors are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Count the number of actors.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "output": "```gerenated SQL\n-- SQL: SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the total money requested by entrepreneurs with height more than 1.85?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "Count the number of different companies.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT company) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "How many distinct companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT company) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "List the number of invoices from the US, grouped by state.", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all the tracks that are in both the Movies and music playlists?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' INTERSECT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "How many albums has Billy Cobam released?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the first and last names of the top 10 longest-serving employees?", "output": "```gerenated SQL\n-- SQL: SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "How many milliseconds long is Fast As a Shark?", "output": "```gerenated SQL\n-- SQL: SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of playlist which has number of tracks greater than 100.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM playlist_tracks as t1 JOIN playlists as t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING COUNT(t1.track_id)  >  100;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name ,  COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What is the full name of the employee who has the most customers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name , t1.last_name FROM employees as t1 JOIN customers as t2 ON t1.id  =  t2.support_rep_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "How many tracks does each genre have and what are the names of the top 5?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM genres as t1 JOIN tracks as t2 ON t2.genre_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What is title of album which track Balls to the Wall belongs to?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t2.name = \"Balls to the Wall\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" OR t2.tourist_details  =  \"Vivian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Attraction_Types` (\r\n  Attraction_Type_Code CHAR(15) PRIMARY KEY,\r\n  Attraction_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the address of the location \"UK Gallery\"?", "output": "```gerenated SQL\n-- SQL: SELECT address FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and star rating of each hotel, ordered by its price from low to high.", "output": "```gerenated SQL\n-- SQL: SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "What is the detail of each visitor?", "output": "```gerenated SQL\n-- SQL: SELECT tourist_details FROM visitors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"US museum\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the price ranges of hotels?", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Which destination has least number of flights?", "output": "```gerenated SQL\n-- SQL: SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the aircraft name for the flight with number 99", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t1.flno  =  99;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What is the number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the id and name of the employee with the highest salary?", "output": "```gerenated SQL\n-- SQL: SELECT eid ,  name FROM employee ORDER BY salary DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What destination has the fewest number of flights?", "output": "```gerenated SQL\n-- SQL: SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show the id and name of the aircraft with the maximum distance.", "output": "```gerenated SQL\n-- SQL: SELECT aid ,  name FROM aircraft ORDER BY distance DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show the id and salary of Mark Young.", "output": "```gerenated SQL\n-- SQL: SELECT eid ,  salary FROM employee WHERE name  =  'Mark Young';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\nCREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\" INTERSECT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Airbus A340-300\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the origins of all flights that are headed to Honolulu?", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM flight WHERE destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of all the states combined", "output": "```gerenated SQL\n-- SQL: SELECT SUM(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "population of boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the capital of the state that borders the state that borders texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states lie on the largest river in the united states", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the high point of texas", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the capital of the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "number of citizens in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what state has no rivers", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state 's capital city is the largest", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the smallest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states does kentucky border", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which capitals are not major cities", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which river runs through most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how large is the largest city in alaska", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state is springfield located in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the usa", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers run through idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest city in the largest state", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "give me the cities in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the shortest river", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT traverse FROM river WHERE length  =  ( SELECT MIN(DISTINCT length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the height of mount mckinley", "output": "```gerenated SQL\n-- SQL: SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "name the longest river in us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "kentucky borders how many states", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities are in texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the total population of the states that border texas", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.population) FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states have major rivers", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(traverse) FROM river WHERE length  >  750;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what capital is the largest in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the biggest state in continental us", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities named austin are there in the usa", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE city_name  =  \"austin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what rivers flow through the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities in states through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE length  >  750 AND river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density of the largest state", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the smallest area that borders texas", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the populations of the states through which the mississippi river runs", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the most populous city in wyoming", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state is springfield in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the smallest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the shortest river in the usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest city in the smallest state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states neighbor kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density of the state with the smallest area", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers do not run through tennessee", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital city of the largest state in the us", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states that border states that border states that border texas", "output": "```gerenated SQL\n-- SQL: SELECT t1.border FROM border_info as t2 JOIN border_info as t1 ON t2.border  =  t1.state_name JOIN border_info as t3 ON t3.border  =  t2.state_name JOIN border_info as t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers in idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states are next to kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what rivers flow through the largest state", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people live in seattle washington", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what length is the rio grande", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what mountains are in alaska", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the longest river in the smallest state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many citizens does the biggest city have in the usa", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers are found in idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names and location of the wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the locations that are shared by more than two wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What is the name of the wrestler with the fewest days held?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination WHERE eliminated_by  =  \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  \"Benjamin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "how many users reviewed \" Sushi Too \" in Pittsburgh", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all Bars reviewed by Patrick with at least 3 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What neighbourhood is restaurant \" Flat Top Grill \" in ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many reviews has Michelle written in March 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "What is the number of checkins for \" Cafe Zinho \" on Friday", "output": "```gerenated SQL\n-- SQL: SELECT t2.count FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "What are all the breweries in \" Los Angeles \" ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "which business has the most number of checkins", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM(t2.count) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "which neighbourhood has the most number of businesses in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT(DISTINCT t2.name) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find all the reviews for all Pet Groomers with more than 100 reviews", "output": "```gerenated SQL\n-- SQL: SELECT t3.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show all book categories and the number of books in each category.", "output": "```gerenated SQL\n-- SQL: SELECT category ,  COUNT(*) FROM book_club GROUP BY category;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List categories that have at least two books after year 1989.", "output": "```gerenated SQL\n-- SQL: SELECT category FROM book_club WHERE year  >  1989 GROUP BY category HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Count the number of different directors.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT director) FROM movie;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the dates of the assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_notes FROM assessment_notes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the last names of teachers who are not involved in any detention.", "output": "```gerenated SQL\n-- SQL: SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers as t1 JOIN detention as t2 ON t1.teacher_id  =  t2.teacher_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.teacher_id ,  t2.first_name FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students_in_Detention` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  detention_id INTEGER REFERENCES Detention(detention_id),\r\n  incident_id INTEGER REFERENCES Behavior_Incident(incident_id)\r\n);\n\n", "input": "How many distinct students have been in detention?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT student_id) FROM students_in_detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "List all club names in descending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "Please show the names and the players of clubs.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.player_id FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "what are the name of players who get more than the average points.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM player WHERE points  >  (SELECT AVG(points) FROM player);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "List all club names in ascending order of start year.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club ORDER BY start_year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "List the position of players with average number of points scored by players of that position bigger than 20.", "output": "```gerenated SQL\n-- SQL: SELECT position FROM player GROUP BY name HAVING AVG(points)  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Return the name, location, and seating of the track that was opened in the most recent year.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location ,  seating FROM track ORDER BY year_opened DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Return the minimum, maximum, and average seating across all tracks.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(seating) ,  MAX(seating) ,  AVG(seating) FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\nCREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the names and dates of races, and the names of the tracks where they are held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.date ,  t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\nCREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the names of different tracks, and how many races has each had?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "output": "```gerenated SQL\n-- SQL: SELECT title ,  studio FROM film WHERE studio LIKE \"%Universal%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the name of teh studio that created the most films?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries of markets and their corresponding years of market estimation?", "output": "```gerenated SQL\n-- SQL: SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "Please list the countries and years of film market estimations.", "output": "```gerenated SQL\n-- SQL: SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "What is the attribute data type of the attribute with name \"Green\"?", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  \"Green\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find all the catalog publishers whose name contains \"Murray\"", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the names of catalog entries with level number 8?", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many products are there in the records?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all cities with more than one airport and how many airports do they have?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of cities in the United States with more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the total number of routes for each country and airline in that country?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For each  airport name, how many routes start at that airport, ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, and country of the airport with the highest elevation?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the name and city of the airport from most of the routes start?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "For each airport name, how many routes start at that airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, and country of the airport with the lowest altitude?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\nCREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the count of the songs that last approximately 4 minutes?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM files WHERE duration LIKE \"4:%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of the songs whose rating is below the rating of all songs in English?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE rating  <   (SELECT MIN(rating) FROM song WHERE languages  =  'english');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\nCREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the average rating of songs produced by female artists?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "Give me a list of the names of all songs ordered by their resolution.", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song ORDER BY resolution;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of all songs that are ordered by their resolution numbers?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song ORDER BY resolution;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of all male British artists?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the average rating and resolution of all bangla songs?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) ,  AVG(resolution) FROM song WHERE languages  =  \"bangla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "Find the id of the song that lasts the longest.", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\nCREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "List the names of all songs that have 4 minute duration or are in English.", "output": "```gerenated SQL\n-- SQL: SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\nCREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "For each file format, return the number of artists who released songs in that format.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  formats FROM files GROUP BY formats;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "What are the maximum, minimum and average home games each stadium held?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(home_games) ,  MIN(home_games) ,  AVG(home_games) FROM stadium;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "List the names of all distinct medications, ordered in an alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM medication ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What is the name of the patient who made the most recent appointment?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\n", "input": "Which patient is undergoing the most recent treatment?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "How many patients are not using Procrastin-X as medication?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "How many patients do each physician take care of? List their names and number of patients they take care of.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Find the id of the appointment with the most recent start date?", "output": "```gerenated SQL\n-- SQL: SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "what is the name and position of the head whose department has least number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the alphabetically ordered list of all distinct medications?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM medication ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "what are name and phone number of patients who had more than one appointment?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the average price for wines not produced in Sonoma county?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM wine WHERE appelation NOT IN (SELECT t1.appelation FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  'Sonoma');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\nCREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the names of all distinct wines that are made of red color grape.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"Red\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  \"Central Coast\" AND t2.year  <  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\nCREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "output": "```gerenated SQL\n-- SQL: SELECT t2.winery FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\" GROUP BY t2.winery ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  \"Monterey\" AND t2.price  <  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines with scores higher than 90?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE score  >  90;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine WHERE year  <  2000 OR year  >  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine WHERE price  >  (SELECT MIN(price) FROM wine WHERE winery  =  \"John Anthony\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies WHERE headquarters  =  \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters  =  \"China\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\n", "input": "List the names of buildings that have no company office.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the industry shared by the most companies.", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the names of buildings sorted in descending order of building height?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings ORDER BY height DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "find the event names that have more than 2 records.", "output": "```gerenated SQL\n-- SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Count the number of regions.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Which event names were used more than twice for party events?", "output": "```gerenated SQL\n-- SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all ministers and parties they belong to in descending order of the time they took office.", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id JOIN web_client_accelerator as t3 ON t2.accelerator_id  =  t3.id WHERE t3.name  =  'CProxy' AND t2.compatible_since_year  >  1998;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Purchases` (\r\n  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  purchase_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the purchase details of transactions with amount bigger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.purchase_details FROM purchases as t1 JOIN transactions as t2 ON t1.purchase_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\nCREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\n", "input": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON  t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  >  100 AND t3.transaction_type_code  =  \"PUR\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all dates of transactions whose type code is \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE transaction_type_code  =  \"SALE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average amount of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(amount_of_transaction) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the schools that were either founded before 1850 or are public?", "output": "```gerenated SQL\n-- SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the founded year of the newest non public school.", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "How many schools do not participate in the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the average enrollment size of the universities that are founded before 1850?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(enrollment) FROM university WHERE founded  <  1850;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "how many places for french are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good place in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a restaurant on buchanan in san francisco that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good restaurants in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "What is the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "how many french restaurant are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can we find a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the users who have more than 1000 followers.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles WHERE followers  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "List the names of 5 users followed by the largest number of other users.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "output": "```gerenated SQL\n-- SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which start station had the most trips starting from August? Give me the name and id of the station.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each trip, return its ending station's installation date.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "List all the cities in a decreasing order of each city's stations' highest latitude.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\nCREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\n", "input": "What are the id and name of the stations that have ever had more than 12 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many stations are in Mountain View?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the name, latitude, and city of the station that is located the furthest South?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus was opened between 1935 and 1939?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty, in total, are there in the year 2002?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(faculty) FROM faculty WHERE year  =  2002;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee for San Francisco State University in 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the name of the campuses opened before 1800.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  <  1800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many campuses exist are in the county of LA?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee on a CSU campus in 2005?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the campus fee for San Jose State University in 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What are the nationalities and ages of journalists?", "output": "```gerenated SQL\n-- SQL: SELECT nationality ,  age FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the number of rooms with king bed for each decor type.", "output": "```gerenated SQL\n-- SQL: SELECT decor ,  COUNT(*) FROM rooms WHERE bedtype = \"King\" GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the average and minimum price of the rooms in different decor.", "output": "```gerenated SQL\n-- SQL: SELECT decor , AVG(baseprice) ,  MIN(baseprice) FROM rooms GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\nCREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "Find the number of rooms that do not have any reservation.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t2.maxoccupancy  =  t1.adults + t1.kids;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the name of rooms booked by some customers whose first name contains ROY.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE firstname LIKE '%ROY%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "List the name of rooms with king or queen bed.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE bedtype  =  \"King\" OR bedtype  =  \"Queen\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the name of the room that can accommodate the most people?", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which paper has the most authors? Give me the paper title.", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the number of papers published by the institution \"University of Pennsylvania\".", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%ML%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "How many papers are \"Atsushi Ohori\" the author of?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Find the name and component amount of the least popular furniture.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  num_of_component FROM furniture ORDER BY market_rate LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the number of people whose age is greater than all engineers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the doctor named Zach?", "output": "```gerenated SQL\n-- SQL: SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all of Bob's friends?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the oldest person whose job is student?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of the people who have no friends who are students?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of everybody who has exactly one friend?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the youngest male?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "List the name of enzymes in descending lexicographical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Sort the apartment numbers in ascending order of room count.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY room_count ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show the short names of the buildings managed by \"Emma\".", "output": "```gerenated SQL\n-- SQL: SELECT building_short_name FROM apartment_buildings WHERE building_manager\t =  \"Emma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "output": "```gerenated SQL\n-- SQL: SELECT \tbooking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the guest first name, start date, and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of banks in the state of New York?", "output": "```gerenated SQL\n-- SQL: SELECT bname FROM bank WHERE state  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name ,  t1.acc_type FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING SUM(t2.amount)  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "For each account type, find the average account balance of customers with credit score lower than 50.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "output": "```gerenated SQL\n-- SQL: SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of customers who do not have an saving account.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of customers who have both savings and checking accounts?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the total amount of loans offered by each bank branch.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(amount) ,  t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "How many bank branches are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "List the open date of open year of the shop named \"Apple\".", "output": "```gerenated SQL\n-- SQL: SELECT open_date ,  open_year FROM shop WHERE shop_name  =  \"Apple\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\nCREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What are the carriers of devices that are in stock in more than a single shop?", "output": "```gerenated SQL\n-- SQL: SELECT t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id GROUP BY t1.device_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "What are the names and location of the shops in ascending alphabetical order of name.", "output": "```gerenated SQL\n-- SQL: SELECT shop_name ,  location FROM shop ORDER BY shop_name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "List the carriers of devices in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device ORDER BY carrier ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\nCREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Return the flag that is most common among all ships.", "output": "```gerenated SQL\n-- SQL: SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\nCREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Count the number of captains younger than 50 of each rank.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "how many programs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\nCREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Which channels broadcast both in the morning and at night? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "List all program origins in the alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM program ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "List the names of all the channels owned by either CCTV or HBS", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\nCREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What is the party of the representative that has the smallest number of votes.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY votes asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What states have at least two representatives?", "output": "```gerenated SQL\n-- SQL: SELECT state FROM representative GROUP BY state HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\nCREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "output": "```gerenated SQL\n-- SQL: SELECT t2.hardware_model_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t3.type = \"Text\" OR t1.ram_mib  >  32;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\nCREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "output": "```gerenated SQL\n-- SQL: SELECT t2.hardware_model_name ,  t2.company_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t1.launch_year = 2002 OR t1.ram_mib  >  32;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\n", "input": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id ORDER BY t2.quality_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of the technicians by ascending order of age?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician ORDER BY age ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the number of technicians?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM technician;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Which authors have submitted to more than one workshop?", "output": "```gerenated SQL\n-- SQL: SELECT t2.author FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author HAVING COUNT(DISTINCT t1.workshop_id)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "output": "```gerenated SQL\n-- SQL: SELECT college FROM submission WHERE scores  >  90 INTERSECT SELECT college FROM submission WHERE scores  <  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission WHERE college  =  \"Florida\" OR college  =  \"Temple\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Council_Tax` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cmi_cross_ref_id ,  t1.source_system_code FROM cmi_cross_references as t1 JOIN council_tax as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Which district has the least area?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the name of the district with the smallest area?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "output": "```gerenated SQL\n-- SQL: SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "For each company id, what are the companies and how many gas stations does each one operate?", "output": "```gerenated SQL\n-- SQL: SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters with at least two companies in the banking industry?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "output": "```gerenated SQL\n-- SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List all headquarters and the number of companies in each headquarter.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\nCREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\n", "input": "List the name of artworks that are not nominated.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork WHERE artwork_ID NOT IN (SELECT artwork_ID FROM nomination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names of festivals held in year 2007?", "output": "```gerenated SQL\n-- SQL: SELECT festival_name FROM festival_detail WHERE year  =  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM institution WHERE founded  >  1990 AND enrollment  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "For each building, show the name of the building and the number of institutions in it.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id GROUP BY t1.building_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\nCREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the country names, area and population which has both roller coasters with speed higher", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  >  60 INTERSECT SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  <  55;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\n", "input": "List the type of the services in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT service_type_code FROM services ORDER BY service_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  built_year FROM mill WHERE type  =  'Grondzeiler';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show the id and builder of the railway that are associated with the most trains.", "output": "```gerenated SQL\n-- SQL: SELECT t2.railway_id ,  t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "List the object number of railways that do not have any trains.", "output": "```gerenated SQL\n-- SQL: SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "output": "```gerenated SQL\n-- SQL: SELECT price FROM publication WHERE publisher  =  \"Person\" OR publisher  =  \"Wiley\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show different publishers together with the number of publications they have.", "output": "```gerenated SQL\n-- SQL: SELECT publisher ,  COUNT(*) FROM publication GROUP BY publisher;\n```"}
