db_id,query,question,database_schema
manufactory_1,"SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC","Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.","CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan',Return the total revenue of companies with headquarters in Tokyo or Taiwan.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT DISTINCT headquarter FROM manufacturers,Give the distinct headquarters of manufacturers.,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,"SELECT name ,  price FROM products",Select the names and the prices of all the products in the store.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
manufactory_1,"SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name",What is the total revenue of each manufacturer?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Taiwan',What is the total revenue of all companies whose main office is at Tokyo or Taiwan?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin',What is the sum of revenue from companies with headquarters in Austin?,"CREATE TABLE `Manufacturers` (
  Code INTEGER,
  Name VARCHAR(255),
  Headquarter VARCHAR(255),
  Founder VARCHAR(255),
  Revenue REAL
);

"
manufactory_1,SELECT name FROM products WHERE price  <=  200,Select the name of the products with a price less than or equal to $200.,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
game_1,"SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid",What are the ids of all students along with how many sports and games did they play?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT COUNT(DISTINCT stuid) FROM plays_games,How many students play video games?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,"SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major","What are the average, minimum, and max ages for each of the different majors?","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,"SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid",What are the ids of all students and number of hours played?,"CREATE TABLE `Plays_Games` (
  StuID INTEGER REFERENCES Student(StuID),
  GameID INTEGER REFERENCES Video_Games(GameID),
  Hours_Played INTEGER
);

"
game_1,SELECT DISTINCT gtype FROM video_games,What are the different types of video games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype",What are the types of video games and how many are in each type?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
game_1,"SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  ""Football"" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  ""Lacrosse"")",What are the first names and ages of all students who are playing both Football and Lacrosse?,"CREATE TABLE `SportsInfo` (
  StuID INTEGER REFERENCES Student(StuID),
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1)
);

CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

"
game_1,SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1,Which game type has least number of games?,"CREATE TABLE `Video_Games` (
  GameID INTEGER,
  GName VARCHAR(40),
  GType VARCHAR(40)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM documents,Show the number of documents.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_name ,  document_id FROM documents WHERE document_type_code  =  ""BK""",Find names and ids of all documents with document type code BK.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT statement_id ,  COUNT(*) FROM accounts GROUP BY statement_id","What are the different statement ids on accounts, and the number of accounts for each?","CREATE TABLE `Accounts` (
  Account_ID INTEGER,
  Statement_ID INTEGER REFERENCES Statements(Statement_ID),
  Account_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT document_id FROM documents_with_expenses WHERE budget_type_code  =  'SF',What are the document ids for the budget type code 'SF'?,"CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT t1.document_id FROM documents as t1 JOIN documents_with_expenses as t2 ON t1.document_id  =  t2.document_id WHERE t1.document_name LIKE '%s%',What are the ids of documents with letter 's' in the name with any expense budgets.,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Documents_with_Expenses` (
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),
  Document_Details VARCHAR(255)
);

"
cre_Docs_and_Epenses,SELECT COUNT(*) FROM ref_budget_codes,Count the number of budget codes.,"CREATE TABLE `Ref_Budget_Codes` (
  Budget_Type_Code CHAR(15) PRIMARY KEY,
  Budget_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT document_type_code ,  document_type_name ,  document_type_description FROM ref_document_types","Show all document type codes, document type names, document type descriptions.","CREATE TABLE `Ref_Document_Types` (
  Document_Type_Code CHAR(15) PRIMARY KEY,
  Document_Type_Name VARCHAR(255),
  Document_Type_Description VARCHAR(255)
);

"
cre_Docs_and_Epenses,"SELECT t1.project_id ,  t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id GROUP BY t1.project_id HAVING COUNT(*)  >  2",What is the project id and detail for the project with at least two documents?,"CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),
  Project_ID INTEGER REFERENCES Projects(Project_ID),
  Document_Date DATETIME,
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Projects` (
  Project_ID INTEGER,
  Project_Details VARCHAR(255)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",pldi 2015 conference,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >=  5;,papers with at least 5 citations,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

"
scholar,SELECT DISTINCT journalid FROM paper WHERE year  =  2011 GROUP BY journalid;,"List the journals published in March , 2011","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  ""ImageNet"" AND t3.year  =  2014 AND t4.venuename  =  ""eccv"";",eccv 2014 papers using ImageNet,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",papers written by sharon goldwater,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Trophic Cascade"" AND t3.year  =  2010 GROUP BY t3.journalid;",In 2010 what journal published an article about Trophic Cascade ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 about Parsing,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",papers by sharon goldwater ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Daniella Coelho"";",conferences that Daniella Coelho has published in,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Has Peter Mertens and Dina Barbian written a paper together ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.citingpaperid)  ,  t1.keyphrasename FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite as t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT(t3.citingpaperid) DESC;",what keyphrases get most citations ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers run experiments on ImageNet ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Question Answering publications,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers about Question Answering,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""chi"";",chi papers,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""ACL"" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;",what papers have fewer than 5 citations by ACL papers ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",Papers from pldi 2015 ?,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT COUNT(t2.keyphraseid)  ,  t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""oren etzioni"" GROUP BY t2.keyphraseid ORDER BY COUNT(t2.keyphraseid) DESC;",what topics does oren etzioni write about most ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  ""WebKB"";",which papers used WebKB ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  ""semantic parsing"";",datasets for semantic parsing,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `dataset` (
  datasetId INTEGER,
  datasetName varchar(50)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Liwen Xiong 's papers in 2015,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",most cited papers for parsing,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",convolution by brian curless,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",keywords in the papers written by Luke Zettlemoyer,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",List of authors acl 2016,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  ""NIPS"" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;",which year had the most NIPS papers ?,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE ""sensor fusion"";",Who wrote sensor fusion ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",What papers has brian curless written on convolution ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",When did Peter Mertens and Dina Barbian collaborate ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""instance segmentation"" AND t3.journalid  >=  0;",journal papers for instance segmentation,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers are presented in nature communications 2015 ?,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" GROUP BY t3.year ORDER BY t3.year asC;",when was the first deep learning paper published ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",papers where sharon goldwater is an author,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,SELECT DISTINCT paperid FROM paper WHERE year  =  ( SELECT MAX(year) FROM paper );,papers published in the last year,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""Artificial Intelligence"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citingpaperid) DESC;",What is the paper with the most citation about Artificial Intelligence ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.keyphraseid  ,  t2.paperid FROM paper as t2 JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase as t1 ON t2.paperid  =  t1.paperid JOIN venue as t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  ""EMNLP-CoNLL"" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;",What was the topic of best paper in 2012 EMNLP-CoNLL ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT venueid FROM paper WHERE title  =  ""Fracture of acrylic bone cement"";",What is the venue of Fracture of acrylic bone cement ?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",How many paper does Christopher D. Manning have ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",author published acl 2016,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

"
scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""balakrishnan prabhakaran"";",list papers published by balakrishnan prabhakaran,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",What datasets have jitendra malik used,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paperDataset` (
  paperId INTEGER PRIMARY KEY,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  ""Luke Zettlemoyer"";",keyphrases used by Luke Zettlemoyer .,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""benjamin mako hill"" GROUP BY t3.year ORDER BY t3.year;",When was benjamin mako hill 's first publication ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""brian curless"" AND t5.keyphrasename  =  ""convolution"";",papers by brian curless in convolution topic,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",how many papers has Christopher D. Manning published ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""li dong"" AND t3.year  =  2016;",What conferences did li dong submit to in 2016 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  ""chi"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;",how is the most prolific author in chi ?,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid JOIN cite as t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;",who is the most cited author at CVPR ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""Liwen Xiong"" AND t3.year  =  2015;",Liwen Xiong 's papers in 2015 ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""convolutional neural networks"" AND t3.year  =  2016;",How many papers were written on the convolutional neural networks this year ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  >=  2011;",How many papers were written on question answering in 2011 through 2016 ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",which papers in acl 2012 had Parsing in them ?,"CREATE TABLE `paperKeyphrase` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `keyphrase` (
  keyphraseId INTEGER,
  keyphraseName varchar(50)
);

"
scholar,"SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christopher D. Manning"";",how many papers has Christopher D. Manning written ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",List of papers in pldi 2015,"CREATE TABLE `venue` (
  venueId INTEGER,
  venueName varchar(100)
);

CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

"
scholar,"SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",What papers has written by sharon goldwater ?,"CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;",What is the most cited paper of ohad shamir ?,"CREATE TABLE `paper` (
  paperId INTEGER,
  title varchar(300),
  venueId INTEGER REFERENCES venue(venueId),
  year INTEGER,
  numCiting INTEGER,
  numCitedBy INTEGER,
  journalId INTEGER REFERENCES journal(journalId)
);

CREATE TABLE `cite` (
  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)
);

CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `author` (
  authorId INTEGER,
  authorName varchar(50)
);

"
school_finance,"SELECT SUM(enrollment) ,  AVG(enrollment) FROM school",What are the total and average enrollment of all schools?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
school_finance,SELECT t2.school_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t1.amount  >  8.5 GROUP BY t1.school_id HAVING COUNT(*)  >  1,Find the names of schools that have more than one donator with donation amount above 8.5.,"CREATE TABLE `endowment` (
  endowment_id INT PRIMARY KEY,
  School_id INT REFERENCES School(School_id),
  donator_name TEXT,
  amount REAL
);

CREATE TABLE `School` (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment INT,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

"
musical,"SELECT nominee FROM musical WHERE award  =  ""Tony award"" OR award  =  ""Cleavant Derricks""","Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks"".","CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,"SELECT DISTINCT nominee FROM musical WHERE award != ""Tony award""",Return the different nominees of musicals that have an award that is not the Tony Award.,"CREATE TABLE `musical` (
  Musical_ID INT PRIMARY KEY,
  Name TEXT,
  Year INT,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

"
musical,SELECT COUNT(*) FROM actor,How many actors are there?,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
musical,SELECT COUNT(*) FROM actor,Count the number of actors.,"CREATE TABLE `actor` (
  Actor_ID INT PRIMARY KEY,
  Name TEXT,
  Musical_ID INT REFERENCES actor(Actor_ID),
  Character TEXT,
  Duration TEXT,
  age INT
);

"
entrepreneur,"SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor",What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

"
entrepreneur,SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85,What is the total money requested by entrepreneurs with height more than 1.85?,"CREATE TABLE `entrepreneur` (
  Entrepreneur_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

"
entrepreneur,SELECT COUNT(DISTINCT company) FROM entrepreneur,Count the number of different companies.,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
entrepreneur,SELECT COUNT(DISTINCT company) FROM entrepreneur,How many distinct companies are there?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
store_1,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  ""USA"" GROUP BY billing_state;","List the number of invoices from the US, grouped by state.","CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' INTERSECT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music',What are the names of all the tracks that are in both the Movies and music playlists?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";","What is the title, phone number and hire date for the employee named Nancy Edwards?","CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

"
store_1,"SELECT COUNT(*) FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = ""Billy Cobham"";",How many albums has Billy Cobam released?,"CREATE TABLE `artists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

"
store_1,"SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",What are the first and last names of the top 10 longest-serving employees?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
store_1,"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"";",How many milliseconds long is Fast As a Shark?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
store_1,SELECT t2.name FROM playlist_tracks as t1 JOIN playlists as t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING COUNT(t1.track_id)  >  100;,List the name of playlist which has number of tracks greater than 100.,"CREATE TABLE `playlist_tracks` (
  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),
  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)
);

CREATE TABLE `playlists` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT t1.first_name ,  t1.last_name ,  COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 10;",What are the top 10 customers' first and last names by total number of orders and how many orders did they make?,"CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

CREATE TABLE `invoices` (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),
  invoice_date TIMESTAMP,
  billing_address VARCHAR(70),
  billing_city VARCHAR(40),
  billing_state VARCHAR(40),
  billing_country VARCHAR(40),
  billing_postal_code VARCHAR(10),
  total NUMERIC(10,2)
);

"
store_1,"SELECT t1.first_name , t1.last_name FROM employees as t1 JOIN customers as t2 ON t1.id  =  t2.support_rep_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1",What is the full name of the employee who has the most customers?,"CREATE TABLE `employees` (
  id INTEGER PRIMARY KEY,
  last_name VARCHAR(20),
  first_name VARCHAR(20),
  title VARCHAR(30),
  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),
  birth_date TIMESTAMP,
  hire_date TIMESTAMP,
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60)
);

CREATE TABLE `customers` (
  id INTEGER PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(20),
  company VARCHAR(80),
  address VARCHAR(70),
  city VARCHAR(40),
  state VARCHAR(40),
  country VARCHAR(40),
  postal_code VARCHAR(10),
  phone VARCHAR(24),
  fax VARCHAR(24),
  email VARCHAR(60),
  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)
);

"
store_1,"SELECT t1.name ,  COUNT(*) FROM genres as t1 JOIN tracks as t2 ON t2.genre_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 5;",How many tracks does each genre have and what are the names of the top 5?,"CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

CREATE TABLE `genres` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(120)
);

"
store_1,"SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t2.name = ""Balls to the Wall"";",What is title of album which track Balls to the Wall belongs to?,"CREATE TABLE `albums` (
  id INTEGER PRIMARY KEY,
  title VARCHAR(160),
  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)
);

CREATE TABLE `tracks` (
  id INTEGER PRIMARY KEY,
  name VARCHAR(200),
  album_id INTEGER PRIMARY KEY REFERENCES albums(id),
  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),
  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),
  composer VARCHAR(220),
  milliseconds INTEGER,
  bytes INTEGER,
  unit_price NUMERIC(10,2)
);

"
cre_Theme_park,"SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Vincent"" OR t2.tourist_details  =  ""Vivian""",What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1",Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.,"CREATE TABLE `Ref_Attraction_Types` (
  Attraction_Type_Code CHAR(15) PRIMARY KEY,
  Attraction_Type_Description VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Alison"" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  ""Rosalind""",What are the names of tourist attraction that Alison visited but Rosalind did not visit?,"CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Visits` (
  Visit_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),
  Visit_Date DATETIME,
  Visit_Details VARCHAR(40)
);

CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT address FROM locations WHERE location_name  =  ""UK Gallery""","What is the address of the location ""UK Gallery""?","CREATE TABLE `Locations` (
  Location_ID INTEGER,
  Location_Name VARCHAR(255),
  Address VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC","Show the id and star rating of each hotel, ordered by its price from low to high.","CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
cre_Theme_park,SELECT tourist_details FROM visitors,What is the detail of each visitor?,"CREATE TABLE `Visitors` (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details VARCHAR(255)
);

"
cre_Theme_park,"SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  ""US museum""","What is the name of the staff that is in charge of the attraction named ""US museum""?","CREATE TABLE `Staff` (
  Staff_ID INTEGER,
  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),
  Name VARCHAR(40),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Tourist_Attractions` (
  Tourist_Attraction_ID INTEGER,
  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  Location_ID INTEGER REFERENCES Locations(Location_ID),
  How_to_Get_There VARCHAR(255),
  Name VARCHAR(255),
  Description VARCHAR(255),
  Opening_Hours VARCHAR(255),
  Other_Details VARCHAR(255)
);

"
cre_Theme_park,SELECT price_range FROM hotels,What are the price ranges of hotels?,"CREATE TABLE `Hotels` (
  hotel_id INTEGER,
  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),
  pets_allowed_yn CHAR(1),
  price_range REAL,
  other_hotel_details VARCHAR(255)
);

"
flight_1,SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1,Which destination has least number of flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t1.flno  =  99,What is the aircraft name for the flight with number 99,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,SELECT COUNT(*) FROM employee,What is the number of employees?,"CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
flight_1,"SELECT eid ,  name FROM employee ORDER BY salary DESC LIMIT 1",What is the id and name of the employee with the highest salary?,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1,What destination has the fewest number of flights?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
flight_1,"SELECT aid ,  name FROM aircraft ORDER BY distance DESC LIMIT 1",Show the id and name of the aircraft with the maximum distance.,"CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT eid ,  salary FROM employee WHERE name  =  'Mark Young'",Show the id and salary of Mark Young.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

"
flight_1,"SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Boeing 737-800"" INTERSECT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  ""Airbus A340-300""",Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.,"CREATE TABLE `employee` (
  eid number(9,0) PRIMARY KEY,
  name varchar2(30),
  salary number(10,2)
);

CREATE TABLE `certificate` (
  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),
  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)
);

CREATE TABLE `aircraft` (
  aid number(9,0) PRIMARY KEY,
  name varchar2(30),
  distance number(6,0)
);

"
flight_1,"SELECT origin FROM flight WHERE destination  =  ""Honolulu""",What are the origins of all flights that are headed to Honolulu?,"CREATE TABLE `flight` (
  flno number(4,0) PRIMARY KEY,
  origin varchar2(20),
  destination varchar2(20),
  distance number(6,0),
  departure_date date,
  arrival_date date,
  price number(7,2),
  aid number(9,0) REFERENCES aircraft(aid)
);

"
geo,SELECT SUM(area) FROM state;,what is the area of all the states combined,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",population of boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" ) );",what is the capital of the state that borders the state that borders texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,which states lie on the largest river in the united states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT highest_point FROM highlow WHERE state_name  =  ""texas"";",what is the high point of texas,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what states border kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what is the population of the capital of the smallest state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the population of the state with the largest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",number of citizens in boulder,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );,what state has no rivers,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,which state 's capital city is the largest,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,what state has the smallest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ""kentucky"";",how many states does kentucky border,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT t2.capital FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;,which capitals are not major cities,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;,which river runs through most states,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""alaska"" ) AND state_name  =  ""alaska"";",how large is the largest city in alaska,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what state is springfield located in,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );,what is the highest point in the usa,"CREATE TABLE `highlow` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers run through idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what is the smallest city in the largest state,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE state_name  =  ""texas"";",give me the cities in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT DISTINCT traverse FROM river WHERE length  =  ( SELECT MIN(DISTINCT length) FROM river );,what state has the shortest river,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT mountain_altitude FROM mountain WHERE mountain_name  =  ""mckinley"";",what is the height of mount mckinley,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );,name the longest river in us,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(border) FROM border_info WHERE state_name  =  ""kentucky"";",kentucky borders how many states,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE state_name  =  ""texas"";",how many cities are in texas,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT SUM(t2.population) FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  ""texas"";",what is the total population of the states that border texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT COUNT(traverse) FROM river WHERE length  >  750;,how many states have major rivers,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );,what capital is the largest in the us,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the biggest state in continental us,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT COUNT(city_name) FROM city WHERE city_name  =  ""austin"";",how many cities named austin are there in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );,what rivers flow through the state with the largest population,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE length  >  750 AND river_name  =  ""mississippi"" );",what are the major cities in states through which the mississippi runs,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT density FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the population density of the largest state,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  ""texas"" );",which state has the smallest area that borders texas,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of the states through which the mississippi river runs,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  ""wyoming"" ) AND state_name  =  ""wyoming"";",what is the most populous city in wyoming,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",which state is springfield in,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );,which state has the smallest population density,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );,what is the shortest river in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what is the largest city in the smallest state in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what states neighbor kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT density FROM state WHERE area  =  ( SELECT MIN(area) FROM state );,what is the population density of the state with the smallest area,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  ""tennessee"" );",what rivers do not run through tennessee,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state );,what is the capital city of the largest state in the us,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT t1.border FROM border_info as t2 JOIN border_info as t1 ON t2.border  =  t1.state_name JOIN border_info as t3 ON t3.border  =  t2.state_name JOIN border_info as t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  ""texas"";",what states border states that border states that border states that border texas,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers in idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",what states are next to kentucky,"CREATE TABLE `border_info` (
  state_name TEXT PRIMARY KEY REFERENCES state(state_name),
  border TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );,what rivers flow through the largest state,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,"SELECT population FROM city WHERE city_name  =  ""seattle"" AND state_name  =  ""washington"";",how many people live in seattle washington,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT length FROM river WHERE river_name  =  ""rio grande"";",what length is the rio grande,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
geo,"SELECT mountain_name FROM mountain WHERE state_name  =  ""alaska"";",what mountains are in alaska,"CREATE TABLE `mountain` (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );,what state has the largest population,"CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );,what is the longest river in the smallest state in the usa,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

CREATE TABLE `state` (
  state_name TEXT PRIMARY KEY,
  population INTEGER,
  area double,
  country_name varchar(3),
  capital TEXT,
  density double
);

"
geo,SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city );,how many citizens does the biggest city have in the usa,"CREATE TABLE `city` (
  city_name TEXT PRIMARY KEY,
  population INTEGER,
  country_name varchar(3),
  state_name TEXT PRIMARY KEY REFERENCES state(state_name)
);

"
geo,"SELECT COUNT(river_name) FROM river WHERE traverse  =  ""idaho"";",how many rivers are found in idaho,"CREATE TABLE `river` (
  river_name TEXT PRIMARY KEY,
  length INTEGER,
  country_name varchar(3),
  traverse TEXT REFERENCES state(state_name)
);

"
wrestler,"SELECT name ,  location FROM wrestler",What are the names and location of the wrestlers?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2,List the locations that are shared by more than two wrestlers.,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1,What is the name of the wrestler with the fewest days held?,"CREATE TABLE `wrestler` (
  Wrestler_ID INT PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

"
wrestler,"SELECT team FROM elimination WHERE eliminated_by  =  ""Orton"" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  ""Benjamin""",What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?,"CREATE TABLE `Elimination` (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  ""Pittsburgh"" AND t1.name  =  ""Sushi Too"";","how many users reviewed "" Sushi Too "" in Pittsburgh","CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  ""Bars"" AND t4.name  =  ""Patrick"";",Find all Bars reviewed by Patrick with at least 3 stars,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  ""Flat Top Grill"" AND t3.category_name  =  ""category_category_name0"";","What neighbourhood is restaurant "" Flat Top Grill "" in ?","CREATE TABLE `architect` (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

"
yelp,"SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  ""March"" AND t1.year  =  2014 AND t2.name  =  ""Michelle"";",How many reviews has Michelle written in March 2014 ?,"CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT t2.count FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  ""Cafe Zinho"" AND t2.day  =  ""Friday"";","What is the number of checkins for "" Cafe Zinho "" on Friday","CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""breweries"";","What are all the breweries in "" Los Angeles "" ?","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,SELECT t1.name FROM checkin as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM(t2.count) DESC LIMIT 1;,which business has the most number of checkins,"CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  ""Cafe Zinho"" AND t3.name  =  ""Niloofar"";","What is the total likes on tips from Niloofar about "" Cafe Zinho ""","CREATE TABLE `tip` (
  tip_id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  text TEXT,
  user_id TEXT REFERENCES user(user_id),
  likes INT,
  year INT,
  month TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `user` (
  uid INT PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

"
yelp,"SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  ""Los Angeles"" AND t2.category_name  =  ""Moroccan"" AND t3.category_name  =  ""restaurant"" AND t4.day  =  ""Friday"";","find the total checkins in Moroccan restaurant in "" Los Angeles "" on Friday","CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `checkin` (
  cid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  count INT,
  day TEXT
);

"
yelp,"SELECT t1.neighbourhood_name FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  ""Madison"" GROUP BY t1.neighbourhood_name ORDER BY COUNT(DISTINCT t2.name) DESC LIMIT 1;",which neighbourhood has the most number of businesses in Madison,"CREATE TABLE `neighbourhood` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  neighbourhood_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
yelp,"SELECT t3.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  ""Pet Groomers"";",Find all the reviews for all Pet Groomers with more than 100 reviews,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

CREATE TABLE `review` (
  rid INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  user_id TEXT REFERENCES user(user_id),
  rating REAL,
  text TEXT,
  year INT,
  month TEXT
);

"
culture_company,"SELECT category ,  COUNT(*) FROM book_club GROUP BY category",Show all book categories and the number of books in each category.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT category FROM book_club WHERE year  >  1989 GROUP BY category HAVING COUNT(*)  >=  2,List categories that have at least two books after year 1989.,"CREATE TABLE `book_club` (
  book_club_id INT PRIMARY KEY,
  Year INT,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

"
culture_company,SELECT COUNT(DISTINCT director) FROM movie,Count the number of different directors.,"CREATE TABLE `movie` (
  movie_id INT PRIMARY KEY,
  Title TEXT,
  Year INT,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide INT
);

"
behavior_monitoring,SELECT date_of_notes FROM assessment_notes,What are the dates of the assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers as t1 JOIN detention as t2 ON t1.teacher_id  =  t2.teacher_id,Find the last names of teachers who are not involved in any detention.,"CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

"
behavior_monitoring,"SELECT t1.teacher_id ,  t2.first_name FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3",Find the ids and first names of the 3 teachers that have the most number of assessment notes?,"CREATE TABLE `Assessment_Notes` (
  notes_id INTEGER,
  student_id INTEGER REFERENCES Students(student_id),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  date_of_notes DATETIME,
  text_of_notes VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Teachers` (
  teacher_id INTEGER,
  address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(80),
  last_name VARCHAR(80),
  gender VARCHAR(1),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  other_details VARCHAR(255)
);

"
behavior_monitoring,SELECT COUNT(DISTINCT student_id) FROM students_in_detention,How many distinct students have been in detention?,"CREATE TABLE `Detention` (
  detention_id INTEGER,
  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),
  teacher_id INTEGER REFERENCES Teachers(teacher_id),
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students_in_Detention` (
  student_id INTEGER REFERENCES Students(student_id),
  detention_id INTEGER REFERENCES Detention(detention_id),
  incident_id INTEGER REFERENCES Behavior_Incident(incident_id)
);

"
sports_competition,SELECT name FROM club ORDER BY name DESC,List all club names in descending alphabetical order.,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,"SELECT t1.name ,  t2.player_id FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id",Please show the names and the players of clubs.,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT name FROM player WHERE points  >  (SELECT AVG(points) FROM player),what are the name of players who get more than the average points.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
sports_competition,SELECT name FROM club ORDER BY start_year ASC,List all club names in ascending order of start year.,"CREATE TABLE `club` (
  Club_ID INT PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

"
sports_competition,SELECT position FROM player GROUP BY name HAVING AVG(points)  >=  20,List the position of players with average number of points scored by players of that position bigger than 20.,"CREATE TABLE `player` (
  Player_ID INT PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INT REFERENCES club(Club_ID),
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL
);

"
race_track,"SELECT name ,  location ,  seating FROM track ORDER BY year_opened DESC LIMIT 1","Return the name, location, and seating of the track that was opened in the most recent year.","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT MIN(seating) ,  MAX(seating) ,  AVG(seating) FROM track","Return the minimum, maximum, and average seating across all tracks.","CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT t1.name ,  t1.date ,  t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id","What are the names and dates of races, and the names of the tracks where they are held?","CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
race_track,"SELECT t2.name ,  COUNT(*) FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id","What are the names of different tracks, and how many races has each had?","CREATE TABLE `race` (
  Race_ID INT PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT REFERENCES track(Track_ID)
);

CREATE TABLE `track` (
  Track_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

"
film_rank,"SELECT title ,  studio FROM film WHERE studio LIKE ""%Universal%""","Find the titles and studios of the films that are produced by some film studios that contained the word ""Universal"".","CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1,What is the name of teh studio that created the most films?,"CREATE TABLE `film` (
  Film_ID INT PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar INT
);

"
film_rank,"SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id",What are the countries of markets and their corresponding years of market estimation?,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

CREATE TABLE `market` (
  Market_ID INT PRIMARY KEY,
  Country TEXT,
  Number_cities INT
);

"
film_rank,"SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id",Please list the countries and years of film market estimations.,"CREATE TABLE `film_market_estimation` (
  Estimation_ID INT PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INT REFERENCES film(Film_ID),
  Type TEXT,
  Market_ID INT REFERENCES market(Market_ID),
  Year INT
);

"
product_catalog,"SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  ""Green""","What is the attribute data type of the attribute with name ""Green""?","CREATE TABLE `Attribute_Definitions` (
  attribute_id INTEGER,
  attribute_name VARCHAR(30),
  attribute_data_type VARCHAR(10)
);

"
product_catalog,"SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%""","Find all the catalog publishers whose name contains ""Murray""","CREATE TABLE `Catalogs` (
  catalog_id INTEGER,
  catalog_name VARCHAR(50),
  catalog_publisher VARCHAR(80),
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

"
product_catalog,"SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  ""8""",What are the names of catalog entries with level number 8?,"CREATE TABLE `Catalog_Contents` (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),
  parent_entry_id INTEGER,
  previous_entry_id INTEGER,
  next_entry_id INTEGER,
  catalog_entry_name VARCHAR(80),
  product_stock_number VARCHAR(50),
  price_in_dollars DOUBLE,
  price_in_euros DOUBLE,
  price_in_pounds DOUBLE,
  capacity VARCHAR(20),
  length VARCHAR(20),
  height VARCHAR(20),
  width VARCHAR(20)
);

"
product_catalog,SELECT COUNT(*) FROM catalog_contents,How many products are there in the records?,"CREATE TABLE `Products` (
  Code INTEGER,
  Name VARCHAR(255),
  Price DECIMAL,
  Manufacturer INTEGER REFERENCES Manufacturers(Code)
);

"
flight_4,"SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1",What are the names of all cities with more than one airport and how many airports do they have?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3,What is the number of cities in the United States with more than 3 airports?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name",What is the total number of routes for each country and airline in that country?,"CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `airlines` (
  alid INTEGER,
  name TEXT,
  iata varchar(2),
  icao varchar(3),
  callsign TEXT,
  country TEXT,
  active varchar(2)
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC","For each  airport name, how many routes start at that airport, ordered from most to least?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1","What is the name, city, and country of the airport with the highest elevation?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
flight_4,"SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1",What is the name and city of the airport from most of the routes start?,"CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,"SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name","For each airport name, how many routes start at that airport?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

CREATE TABLE `routes` (
  rid INTEGER,
  dst_apid INTEGER REFERENCES airports(apid),
  dst_ap varchar(4),
  src_apid bigint REFERENCES airports(apid),
  src_ap varchar(4),
  alid bigint REFERENCES airlines(alid),
  airline varchar(4),
  codeshare TEXT
);

"
flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1","What is the name, city, and country of the airport with the lowest altitude?","CREATE TABLE `airports` (
  apid INTEGER,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation bigint,
  iata character varchar(3),
  icao character varchar(4)
);

"
music_1,"SELECT COUNT(*) FROM files WHERE duration LIKE ""4:%""",What is the count of the songs that last approximately 4 minutes?,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT song_name FROM song WHERE rating  <   (SELECT MIN(rating) FROM song WHERE languages  =  'english'),What are the names of the songs whose rating is below the rating of all songs in English?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  ""Female""",What is the average rating of songs produced by female artists?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT song_name FROM song ORDER BY resolution,Give me a list of the names of all songs ordered by their resolution.,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT song_name FROM song ORDER BY resolution,What are the names of all songs that are ordered by their resolution numbers?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" AND gender  =  ""Male""",What are the names of all male British artists?,"CREATE TABLE `artist` (
  artist_name varchar2(50) PRIMARY KEY,
  country varchar2(20),
  gender varchar2(20),
  preferred_genre varchar2(50) REFERENCES genre(g_name)
);

"
music_1,"SELECT AVG(rating) ,  AVG(resolution) FROM song WHERE languages  =  ""bangla""",What is the average rating and resolution of all bangla songs?,"CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,SELECT f_id FROM files ORDER BY duration DESC LIMIT 1,Find the id of the song that lasts the longest.,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

"
music_1,"SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE ""4:%"" UNION SELECT song_name FROM song WHERE languages  =  ""english""",List the names of all songs that have 4 minute duration or are in English.,"CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
music_1,"SELECT COUNT(*) ,  formats FROM files GROUP BY formats","For each file format, return the number of artists who released songs in that format.","CREATE TABLE `files` (
  f_id number(10) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  file_size varchar2(20),
  duration varchar2(20),
  formats varchar2(20)
);

CREATE TABLE `song` (
  song_name varchar2(50) PRIMARY KEY,
  artist_name varchar2(50) REFERENCES artist(artist_name),
  country varchar2(20),
  f_id number(10) REFERENCES files(f_id),
  genre_is varchar2(20) REFERENCES genre(g_name),
  rating number(10),
  languages varchar2(20),
  releasedate Date,
  resolution number(10)
);

"
game_injury,"SELECT MAX(home_games) ,  MIN(home_games) ,  AVG(home_games) FROM stadium","What are the maximum, minimum and average home games each stadium held?","CREATE TABLE `stadium` (
  id INT PRIMARY KEY,
  name TEXT,
  Home_Games INT,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

"
hospital_1,SELECT DISTINCT name FROM medication ORDER BY name,"List the names of all distinct medications, ordered in an alphabetical order.","CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1,What is the name of the patient who made the most recent appointment?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,Which patient is undergoing the most recent treatment?,"CREATE TABLE `Undergoes` (
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),
  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),
  DateUndergoes DATETIME PRIMARY KEY,
  Physician INTEGER REFERENCES Physician(EmployeeID),
  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)
);

"
hospital_1,SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' ),How many patients are not using Procrastin-X as medication?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Prescribes` (
  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),
  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),
  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),
  Date DATETIME PRIMARY KEY,
  Appointment INTEGER REFERENCES Appointment(AppointmentID),
  Dose VARCHAR(30)
);

CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid",How many patients do each physician take care of? List their names and number of patients they take care of.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

"
hospital_1,SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1,Find the id of the appointment with the most recent start date?,"CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,"SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;",what is the name and position of the head whose department has least number of employees?,"CREATE TABLE `Department` (
  DepartmentID INTEGER,
  Name VARCHAR(30),
  Head INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Physician` (
  EmployeeID INTEGER,
  Name VARCHAR(30),
  Position VARCHAR(30),
  SSN INTEGER
);

"
hospital_1,"SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1",Which patients made more than one appointment? Tell me the name and phone number of these patients.,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
hospital_1,SELECT DISTINCT name FROM medication ORDER BY name,What is the alphabetically ordered list of all distinct medications?,"CREATE TABLE `Medication` (
  Code INTEGER,
  Name VARCHAR(30),
  Brand VARCHAR(30),
  Description VARCHAR(30)
);

"
hospital_1,"SELECT name ,  phone FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn GROUP BY t1.patient HAVING COUNT(*)  >  1",what are name and phone number of patients who had more than one appointment?,"CREATE TABLE `Patient` (
  SSN INTEGER,
  Name VARCHAR(30),
  Address VARCHAR(30),
  Phone VARCHAR(30),
  InsuranceID INTEGER,
  PCP INTEGER REFERENCES Physician(EmployeeID)
);

CREATE TABLE `Appointment` (
  AppointmentID INTEGER,
  Patient INTEGER REFERENCES Patient(SSN),
  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),
  Physician INTEGER REFERENCES Physician(EmployeeID),
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT
);

"
wine_1,SELECT AVG(price) FROM wine WHERE appelation NOT IN (SELECT t1.appelation FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  'Sonoma'),What is the average price for wines not produced in Sonoma county?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT DISTINCT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""Red""",List the names of all distinct wines that are made of red color grape.,"CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT MAX(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  ""Central Coast"" AND t2.year  <  2005",Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,"SELECT t2.winery FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  ""White"" GROUP BY t2.winery ORDER BY COUNT(*) DESC LIMIT 3",Find the top 3 wineries with the greatest number of wines made of white color grapes.,"CREATE TABLE `grapes` (
  ID INTEGER,
  Grape TEXT PRIMARY KEY,
  Color TEXT
);

CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  ""Monterey"" AND t2.price  <  50",What are the wines that have prices lower than 50 and have appelations in Monterey county?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

CREATE TABLE `appellations` (
  No INTEGER,
  Appelation TEXT PRIMARY KEY,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

"
wine_1,SELECT name FROM wine WHERE score  >  90,What are the names of wines with scores higher than 90?,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,SELECT DISTINCT name FROM wine WHERE year  <  2000 OR year  >  2010,Find the distinct names of wines produced before the year of 2000 or after the year of 2010.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
wine_1,"SELECT DISTINCT name FROM wine WHERE price  >  (SELECT MIN(price) FROM wine WHERE winery  =  ""John Anthony"")",Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.,"CREATE TABLE `wine` (
  No INTEGER,
  Grape TEXT REFERENCES grapes(Grape),
  Winery TEXT,
  Appelation TEXT REFERENCES appellations(Appelation),
  State TEXT,
  Name TEXT,
  Year INTEGER,
  Price INTEGER,
  Score INTEGER,
  Cases INTEGER,
  Drink TEXT
);

"
company_office,"SELECT industry FROM companies WHERE headquarters  =  ""USA"" INTERSECT SELECT industry FROM companies WHERE headquarters  =  ""China""","Show the industries shared by companies whose headquarters are ""USA"" and companies whose headquarters are ""China"".","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations),List the names of buildings that have no company office.,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

CREATE TABLE `Office_locations` (
  building_id INT PRIMARY KEY REFERENCES buildings(id),
  company_id INT PRIMARY KEY REFERENCES Companies(id),
  move_in_year INT
);

"
company_office,SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1,List the industry shared by the most companies.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
company_office,SELECT name FROM buildings ORDER BY height DESC,What are the names of buildings sorted in descending order of building height?,"CREATE TABLE `buildings` (
  id INT PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height INT,
  Stories INT,
  Status TEXT
);

"
party_people,SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2,find the event names that have more than 2 records.,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,SELECT COUNT(*) FROM region,Count the number of regions.,"CREATE TABLE `region` (
  Region_ID INT PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

"
party_people,SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*)  >  2,Which event names were used more than twice for party events?,"CREATE TABLE `party_events` (
  Event_ID INT PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INT REFERENCES party(Party_ID),
  Member_in_charge_ID INT REFERENCES member(Member_ID)
);

"
party_people,"SELECT minister ,  party_name FROM party ORDER BY took_office DESC",Show all ministers and parties they belong to in descending order of the time they took office.,"CREATE TABLE `party` (
  Party_ID INT PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INT REFERENCES region(Region_ID),
  Party_name TEXT
);

"
browser_web,SELECT t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id JOIN web_client_accelerator as t3 ON t2.accelerator_id  =  t3.id WHERE t3.name  =  'CProxy' AND t2.compatible_since_year  >  1998,What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?,"CREATE TABLE `accelerator_compatible_browser` (
  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),
  browser_id INT PRIMARY KEY REFERENCES browser(id),
  compatible_since_year INT
);

CREATE TABLE `Web_client_accelerator` (
  id INT PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE `browser` (
  id INT PRIMARY KEY,
  name TEXT,
  market_share REAL
);

"
tracking_share_transactions,SELECT t1.purchase_details FROM purchases as t1 JOIN transactions as t2 ON t1.purchase_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  >  10000,What are the purchase details of transactions with amount bigger than 10000?,"CREATE TABLE `Purchases` (
  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),
  purchase_details VARCHAR(255)
);

CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON  t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  >  100 AND t3.transaction_type_code  =  ""PUR""","What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is ""PUR""?","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

CREATE TABLE `Transactions_Lots` (
  transaction_id INTEGER REFERENCES Transactions(transaction_id),
  lot_id INTEGER REFERENCES Lots(lot_id)
);

CREATE TABLE `Lots` (
  lot_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  lot_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT date_of_transaction FROM transactions WHERE transaction_type_code  =  ""SALE""","Show all dates of transactions whose type code is ""SALE"".","CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
tracking_share_transactions,"SELECT investor_id ,  AVG(amount_of_transaction) FROM transactions GROUP BY investor_id",Show the average amount of transactions for different investors.,"CREATE TABLE `Transactions` (
  transaction_id INTEGER,
  investor_id INTEGER REFERENCES Investors(investor_id),
  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),
  date_of_transaction DATETIME,
  amount_of_transaction DECIMAL(19,4),
  share_count VARCHAR(40),
  other_details VARCHAR(255)
);

"
university_basketball,SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public',What are the schools that were either founded before 1850 or are public?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,Find the founded year of the newest non public school.,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
university_basketball,SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match),How many schools do not participate in the basketball match?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

CREATE TABLE `basketball_match` (
  Team_ID INT PRIMARY KEY,
  School_ID INT REFERENCES university(School_ID),
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent INT,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT
);

"
university_basketball,SELECT AVG(enrollment) FROM university WHERE founded  <  1850,What are the average enrollment size of the universities that are founded before 1850?,"CREATE TABLE `university` (
  School_ID INT PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many places for french are there in palo alto ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",where is a good place in the yosemite and mono lake area for french food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""region0"" ) AND t1.rating  >  2.5;",give me some good restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t2.street_name  =  ""buchanan"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",where is a restaurant on buchanan in san francisco that serves good arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""mountain view"" AND t1.food_type  =  ""arabic"" AND t1.rating  >  2.5;",what are some good restaurants in mountain view for arabic food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  ""bay area"" );",give me some restaurants in the bay area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""yosemite and mono lake area"" AND t1.food_type  =  ""french"" AND t1.rating  >  2.5;",give me some restaurants good for french food in the yosemite and mono lake area ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""san francisco"" AND t1.food_type  =  ""french"" );",What is the best french in san francisco ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""palo alto"" AND t1.food_type  =  ""french"";",how many french restaurant are there in palo alto ?,"CREATE TABLE `category` (
  id INT PRIMARY KEY,
  business_id TEXT REFERENCES business(business_id),
  category_name TEXT
);

CREATE TABLE `business` (
  bid INT PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count INT,
  is_open INT,
  rating REAL,
  state TEXT
);

"
restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  ""alameda"";",where can we find a restaurant in alameda ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
restaurants,"SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  ""bay area"" AND t1.food_type  =  ""american"" );",what is the best restaurant in the bay area for american food ?,"CREATE TABLE `RESTAURANT` (
  ID INT PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),
  RATING REAL
);

CREATE TABLE `GEOGRAPHIC` (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE `LOCATION` (
  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),
  HOUSE_NUMBER INT,
  STREET_NAME TEXT,
  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)
);

"
twitter_1,"SELECT name ,  email FROM user_profiles WHERE followers  >  1000",Find the name and email of the users who have more than 1000 followers.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

"
twitter_1,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5,List the names of 5 users followed by the largest number of other users.,"CREATE TABLE `user_profiles` (
  uid int(11) PRIMARY KEY,
  name varchar(255),
  email varchar(255),
  partitionid int(11),
  followers int(11)
);

CREATE TABLE `follows` (
  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),
  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)
);

"
bike_1,"SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id","For each end station id, what is its name, latitude, and minimum duration for trips ended there?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,What is the 3 most common cloud cover rates in the region of zip code 94107?,"CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches NUMERIC,
  mean_sea_level_pressure_inches NUMERIC,
  min_sea_level_pressure_inches NUMERIC,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches INTEGER,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE ""12/%""",What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

"
bike_1,"SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",Which start station had the most trips starting from August? Give me the name and id of the station.,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id","For each trip, return its ending station's installation date.","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,List all the cities in a decreasing order of each city's stations' highest latitude.,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",What are the ids and names of all start stations that were the beginning of at least 200 trips?,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);

"
bike_1,"SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12",What are the id and name of the stations that have ever had more than 12 bikes available?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE `status` (
  station_id INTEGER REFERENCES station(id),
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);

"
bike_1,"SELECT COUNT(*) FROM station WHERE city  =  ""Mountain View""",How many stations are in Mountain View?,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What is the name, latitude, and city of the station that is located the furthest South?","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat NUMERIC,
  long NUMERIC,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);

"
csu_1,SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939,Which campus was opened between 1935 and 1939?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT SUM(faculty) FROM faculty WHERE year  =  2002,"How many faculty, in total, are there in the year 2002?","CREATE TABLE `faculty` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  Faculty REAL
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND t2.year  =  1996",What is the campus fee for San Francisco State University in 1996?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,SELECT campus FROM campuses WHERE year  <  1800,Find the name of the campuses opened before 1800.,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,"SELECT COUNT(*) FROM campuses WHERE county  =  ""Los Angeles""",How many campuses exist are in the county of LA?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

"
csu_1,SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005,What is the average fee on a CSU campus in 2005?,"CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
csu_1,"SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  ""San Jose State University"" AND t2.year  =  1996",What is the campus fee for San Jose State University in 1996?,"CREATE TABLE `Campuses` (
  Id INTEGER,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year INTEGER
);

CREATE TABLE `csu_fees` (
  Campus INTEGER REFERENCES Campuses(Id),
  Year INTEGER,
  CampusFee INTEGER
);

"
news_report,"SELECT nationality ,  age FROM journalist",What are the nationalities and ages of journalists?,"CREATE TABLE `journalist` (
  journalist_ID INT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working INT
);

"
inn_1,"SELECT decor ,  COUNT(*) FROM rooms WHERE bedtype = ""King"" GROUP BY decor;",Find the number of rooms with king bed for each decor type.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT decor , AVG(baseprice) ,  MIN(baseprice) FROM rooms GROUP BY decor;",Find the average and minimum price of the rooms in different decor.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT COUNT(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),Find the number of rooms that do not have any reservation.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

"
inn_1,SELECT COUNT(*) FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t2.maxoccupancy  =  t1.adults + t1.kids;,How many times the number of adults and kids staying in a room reached the maximum capacity of the room?,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE firstname LIKE '%ROY%',Find the name of rooms booked by some customers whose first name contains ROY.,"CREATE TABLE `Reservations` (
  Code INTEGER,
  Room TEXT REFERENCES Rooms(RoomId),
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults INTEGER,
  Kids INTEGER
);

CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,"SELECT roomname FROM rooms WHERE bedtype  =  ""King"" OR bedtype  =  ""Queen"";",List the name of rooms with king or queen bed.,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
inn_1,SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;,What is the name of the room that can accommodate the most people?,"CREATE TABLE `Rooms` (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds INTEGER,
  bedType TEXT,
  maxOccupancy INTEGER,
  basePrice INTEGER,
  decor TEXT
);

"
icfp_1,SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship),Which paper has the most authors? Give me the paper title.,"CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""","Find the number of papers published by the institution ""University of Pennsylvania"".","CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Katsuhiro"" AND t1.lname  =  ""Ueno""","What is the name of the institution the author ""Katsuhiro Ueno"" belongs to?","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT title FROM papers WHERE title LIKE ""%ML%""","Which papers have the substring ""ML"" in their titles? Return the titles of the papers.","CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""","Find the first names and last names of the authors whose institution affiliation is ""Google"".","CREATE TABLE `Authors` (
  authID INTEGER,
  lname TEXT,
  fname TEXT
);

CREATE TABLE `Authorship` (
  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),
  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),
  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),
  authOrder INTEGER
);

CREATE TABLE `Inst` (
  instID INTEGER,
  name TEXT,
  country TEXT
);

"
icfp_1,"SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Atsushi"" AND t1.lname  =  ""Ohori""","How many papers are ""Atsushi Ohori"" the author of?","CREATE TABLE `writes` (
  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),
  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)
);

CREATE TABLE `Papers` (
  paperID INTEGER,
  title TEXT
);

"
manufacturer,"SELECT name ,  num_of_component FROM furniture ORDER BY market_rate LIMIT 1",Find the name and component amount of the least popular furniture.,"CREATE TABLE `furniture` (
  Furniture_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Component INT,
  Market_Rate REAL
);

"
network_2,SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer'),Find the number of people whose age is greater than all engineers.,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach',How old is the doctor named Zach?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob',What are the names of all of Bob's friends?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,"SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice')","What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?","CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' ),Who is the oldest person whose job is student?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
network_2,SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student',What are the names of the people who have no friends who are students?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1,What are the names of everybody who has exactly one friend?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE `PersonFriend` (
  name varchar(20) REFERENCES Person(name),
  friend varchar(20) REFERENCES Person(name),
  year INTEGER
);

"
network_2,SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' ),What is the name of the youngest male?,"CREATE TABLE `Person` (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);

"
medicine_enzyme_interaction,SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole',What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC","What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,"SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3",What are the ids and trade names of the medicine that can interact with at least 3 enzymes?,"CREATE TABLE `medicine_enzyme_interaction` (
  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),
  medicine_id INT PRIMARY KEY REFERENCES medicine(id),
  interaction_type TEXT
);

CREATE TABLE `medicine` (
  id INT PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

"
medicine_enzyme_interaction,SELECT name FROM enzyme ORDER BY name DESC,List the name of enzymes in descending lexicographical order.,"CREATE TABLE `enzyme` (
  id INT PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM INT,
  Porphyria TEXT
);

"
apartment_rentals,SELECT apt_number FROM apartments ORDER BY room_count ASC,Sort the apartment numbers in ascending order of room count.,"CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT building_short_name FROM apartment_buildings WHERE building_manager	 =  ""Emma""","Show the short names of the buildings managed by ""Emma"".","CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

"
apartment_rentals,"SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id","Show the apartment numbers, start dates, and end dates of all the apartment bookings.","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id","Show the guest first names, start dates, and end dates of all the apartment bookings.","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  ""Confirmed""","Which guests have apartment bookings with status code ""Confirmed""? Return their first names and last names.","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
apartment_rentals,"SELECT 	booking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code",How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.,"CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

"
apartment_rentals,SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2,Show the addresses of the buildings that have apartments with more than 2 bathrooms.,"CREATE TABLE `Apartment_Buildings` (
  building_id INTEGER PRIMARY KEY,
  building_short_name CHAR(15),
  building_full_name VARCHAR(80),
  building_description VARCHAR(255),
  building_address VARCHAR(255),
  building_manager VARCHAR(50),
  building_phone VARCHAR(80)
);

CREATE TABLE `Apartments` (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER REFERENCES Apartment_Buildings(building_id),
  apt_type_code CHAR(15),
  apt_number CHAR(10),
  bathroom_count INTEGER,
  bedroom_count INTEGER,
  room_count CHAR(5)
);

"
apartment_rentals,"SELECT t2.guest_first_name ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id","What are the guest first name, start date, and end date of each apartment booking?","CREATE TABLE `Apartment_Bookings` (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER REFERENCES Apartments(apt_id),
  guest_id INTEGER REFERENCES Guests(guest_id),
  booking_status_code CHAR(15),
  booking_start_date DATETIME,
  booking_end_date DATETIME
);

CREATE TABLE `Guests` (
  guest_id INTEGER PRIMARY KEY,
  gender_code CHAR(1),
  guest_first_name VARCHAR(80),
  guest_last_name VARCHAR(80),
  date_of_birth DATETIME
);

"
loan_1,SELECT bname FROM bank WHERE state  =  'New York',What are the names of banks in the state of New York?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
loan_1,"SELECT t1.cust_name ,  t1.acc_type FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING SUM(t2.amount)  >  5000",Find the name and account balance of the customers who have loans with a total amount of more than 5000.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,"SELECT AVG(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type","For each account type, find the average account balance of customers with credit score lower than 50.","CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100,Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving',Find the name of customers who do not have an saving account.,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',What are the names of customers who have both savings and checking accounts?,"CREATE TABLE `customer` (
  cust_ID varchar(3) PRIMARY KEY,
  cust_name varchar(20),
  acc_type char(1),
  acc_bal INT,
  no_of_loans INT,
  credit_score INT,
  branch_ID INT REFERENCES bank(branch_ID),
  state varchar(20)
);

"
loan_1,"SELECT SUM(amount) ,  t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname",Find the total amount of loans offered by each bank branch.,"CREATE TABLE `loan` (
  loan_ID varchar(3) PRIMARY KEY,
  loan_type varchar(15),
  cust_ID varchar(3) REFERENCES customer(Cust_ID),
  branch_ID varchar(3) REFERENCES bank(branch_ID),
  amount INT
);

"
loan_1,SELECT COUNT(*) FROM bank,How many bank branches are there?,"CREATE TABLE `bank` (
  branch_ID INT PRIMARY KEY,
  bname varchar(20),
  no_of_customers INT,
  city varchar(10),
  state varchar(20)
);

"
device,"SELECT open_date ,  open_year FROM shop WHERE shop_name  =  ""Apple""","List the open date of open year of the shop named ""Apple"".","CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id GROUP BY t1.device_id HAVING COUNT(*)  >  1,What are the carriers of devices that are in stock in more than a single shop?,"CREATE TABLE `stock` (
  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),
  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),
  Quantity INT
);

CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
device,"SELECT shop_name ,  location FROM shop ORDER BY shop_name ASC",What are the names and location of the shops in ascending alphabetical order of name.,"CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year INT
);

"
device,SELECT carrier FROM device ORDER BY carrier ASC,List the carriers of devices in ascending alphabetical order.,"CREATE TABLE `device` (
  Device_ID INT PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

"
ship_1,"SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",Find the name and flag of ships that are not steered by any captain with Midshipman rank.,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1,Return the flag that is most common among all ships.,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

"
ship_1,SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant',What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?,"CREATE TABLE `Ship` (
  Ship_ID INT PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
ship_1,"SELECT COUNT(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",Count the number of captains younger than 50 of each rank.,"CREATE TABLE `captain` (
  Captain_ID INT PRIMARY KEY,
  Name TEXT,
  Ship_ID INT REFERENCES Ship(Ship_ID),
  age TEXT,
  Class TEXT,
  Rank TEXT
);

"
program_share,SELECT COUNT(*) FROM program,how many programs are there?,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',Which channels broadcast both in the morning and at night? Give me the channel names.,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

CREATE TABLE `broadcast` (
  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),
  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),
  Time_of_day TEXT
);

"
program_share,SELECT origin FROM program ORDER BY origin,List all program origins in the alphabetical order.,"CREATE TABLE `program` (
  Program_ID INT PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

"
program_share,SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS',List the names of all the channels owned by either CCTV or HBS,"CREATE TABLE `channel` (
  Channel_ID INT PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

"
election_representative,SELECT t2.party FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY votes asC LIMIT 1,What is the party of the representative that has the smallest number of votes.,"CREATE TABLE `election` (
  Election_ID INT PRIMARY KEY,
  Representative_ID INT REFERENCES representative(Representative_ID),
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL
);

CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
election_representative,SELECT state FROM representative GROUP BY state HAVING COUNT(*)  >=  2,What states have at least two representatives?,"CREATE TABLE `representative` (
  Representative_ID INT PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

"
phone_1,"SELECT t2.hardware_model_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t3.type = ""Text"" OR t1.ram_mib  >  32;","List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32.","CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

CREATE TABLE `screen_mode` (
  Graphics_mode REAL PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

"
phone_1,"SELECT t2.hardware_model_name ,  t2.company_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t1.launch_year = 2002 OR t1.ram_mib  >  32;",List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.,"CREATE TABLE `chip_model` (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

CREATE TABLE `phone` (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT REFERENCES chip_model(Model_name),
  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)
);

"
machine_repair,SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id ORDER BY t2.quality_rank,Show names of technicians in ascending order of quality rank of the machine they are assigned.,"CREATE TABLE `repair_assignment` (
  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),
  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),
  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)
);

CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

CREATE TABLE `machine` (
  Machine_ID INT PRIMARY KEY,
  Making_Year INT,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank INT
);

"
machine_repair,SELECT name FROM technician ORDER BY age ASC,What are the names of the technicians by ascending order of age?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
machine_repair,SELECT COUNT(*) FROM technician,What is the number of technicians?,"CREATE TABLE `technician` (
  technician_id REAL PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age INT
);

"
workshop_paper,SELECT t2.author FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author HAVING COUNT(DISTINCT t1.workshop_id)  >  1,Which authors have submitted to more than one workshop?,"CREATE TABLE `Acceptance` (
  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),
  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),
  Result TEXT
);

CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,SELECT college FROM submission WHERE scores  >  90 INTERSECT SELECT college FROM submission WHERE scores  <  80,Which colleges have both authors with submission score above 90 and authors with submission score below 80?,"CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
workshop_paper,"SELECT author FROM submission WHERE college  =  ""Florida"" OR college  =  ""Temple""","Which authors with submissions are from college ""Florida"" or ""Temple""?","CREATE TABLE `submission` (
  Submission_ID INT PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

"
local_govt_mdm,"SELECT t1.cmi_cross_ref_id ,  t1.source_system_code FROM cmi_cross_references as t1 JOIN council_tax as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING COUNT(*)  >=  1",What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,"CREATE TABLE `CMI_Cross_References` (
  cmi_cross_ref_id INTEGER,
  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),
  source_system_code CHAR(15)
);

CREATE TABLE `Council_Tax` (
  council_tax_id INTEGER,
  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

"
store_product,"SELECT product FROM product WHERE max_page_size  =  ""A4"" AND pages_per_minute_color  <  5","Find products with max page size as ""A4"" and pages per minute color smaller than 5.","CREATE TABLE `product` (
  product_id INT PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

"
store_product,SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1,Which district has the least area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1,What is the name of the district with the smallest area?,"CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
store_product,"SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000","What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?","CREATE TABLE `district` (
  District_ID INT PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

"
gas_company,"SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id","For each company id, what are the companies and how many gas stations does each one operate?","CREATE TABLE `station_company` (
  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),
  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),
  Rank_of_the_Year INT
);

CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2,What are the headquarters with at least two companies in the banking industry?,"CREATE TABLE `company` (
  Company_ID INT PRIMARY KEY,
  Rank INT,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

"
gas_company,"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion","find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
gas_company,"SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters",List all headquarters and the number of companies in each headquarter.,"CREATE TABLE `Companies` (
  id INT PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

"
entertainment_awards,SELECT name FROM artwork WHERE artwork_ID NOT IN (SELECT artwork_ID FROM nomination),List the name of artworks that are not nominated.,"CREATE TABLE `artwork` (
  Artwork_ID INT PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE `nomination` (
  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),
  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),
  Result TEXT
);

"
entertainment_awards,SELECT festival_name FROM festival_detail WHERE year  =  2007,What are the names of festivals held in year 2007?,"CREATE TABLE `festival_detail` (
  Festival_ID INT PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year INT,
  Num_of_Audience INT
);

"
protein_institute,SELECT type FROM institution WHERE founded  >  1990 AND enrollment  >=  1000,Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.,"CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
protein_institute,"SELECT t1.name ,  COUNT(*) FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id GROUP BY t1.building_id","For each building, show the name of the building and the number of institutions in it.","CREATE TABLE `building` (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet INT,
  Floors INT
);

CREATE TABLE `Institution` (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment INT,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT REFERENCES building(building_id)
);

"
roller_coaster,"SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  >  60 INTERSECT SELECT t1.name ,  t1.area ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id WHERE t2.speed  <  55","What are the country names, area and population which has both roller coasters with speed higher","CREATE TABLE `country` (
  Country_ID INT PRIMARY KEY,
  Name TEXT,
  Population INT,
  Area INT,
  Languages TEXT
);

CREATE TABLE `roller_coaster` (
  Roller_Coaster_ID INT PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INT REFERENCES country(Country_ID),
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT
);

"
local_govt_in_alabama,SELECT service_type_code FROM services ORDER BY service_type_code,List the type of the services in alphabetical order.,"CREATE TABLE `Services` (
  Service_ID INTEGER,
  Service_Type_Code CHAR(15)
);

"
architecture,"SELECT name ,  built_year FROM mill WHERE type  =  'Grondzeiler'",What are the names and year of construction for the mills of 'Grondzeiler' type?,"CREATE TABLE `mill` (
  architect_id INT REFERENCES architect(id),
  id INT PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year INT,
  notes TEXT
);

"
railway,"SELECT t2.railway_id ,  t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT(*) DESC LIMIT 1",Show the id and builder of the railway that are associated with the most trains.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

"
railway,SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train),List the object number of railways that do not have any trains.,"CREATE TABLE `railway` (
  Railway_ID INT PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE `train` (
  Train_ID INT PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  From TEXT,
  Arrival TEXT,
  Railway_ID INT REFERENCES railway(Railway_ID)
);

"
book_2,"SELECT price FROM publication WHERE publisher  =  ""Person"" OR publisher  =  ""Wiley""","Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
book_2,"SELECT publisher ,  COUNT(*) FROM publication GROUP BY publisher",Show different publishers together with the number of publications they have.,"CREATE TABLE `publication` (
  Publication_ID INT PRIMARY KEY,
  Book_ID INT REFERENCES book(Book_ID),
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL
);

"
