{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue of companies of each founder.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the number of manufactures that are based in Tokyo or Beijing.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Select the name of each manufacturer along with the name and price of its most expensive product.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the number of companies created by Andy.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Who is the founders of companies whose first letter is S?", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Who is the founder of Sony?", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the average, maximum and total revenues of all companies?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the average price across all products?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of products produced by both Creative Labs and Sony?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of products with price at most 200?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products WHERE price  <=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the number of products with a price larger than or equal to $180.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM products WHERE price >= 180;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is all the product data, as well as  each product's manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the average price of all products with manufacturer code equal to 2.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products WHERE manufacturer  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the average prices of products, grouped by manufacturer code?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the names of all the products in the store.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many different products are produced in each headquarter city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names and prices of all products in the store?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the headquarter of the company whose founder is James?", "output": "```gerenated SQL\n-- SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the average prices of products, grouped by manufacturer name?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the founder of Sony.", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many products are there for each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue created by the companies whose headquarter is located at Austin.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names, headquarters and founders of the company with the highest revenue?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name and price of the cheapest product.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the name and price of the cheapest product?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products ORDER BY price ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Compute the average price of all the products.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the average prices of all products from each manufacture, and list each company's name.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the average prices of products for each manufacturer?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of all products?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM products;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is greater than the average revenue of all companies.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Where is the headquarter of the company founded by James?", "output": "```gerenated SQL\n-- SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many manufacturers have headquarters in either Tokyo or Beijing?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names and revenues of the companies with the highest revenues in each headquarter city?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the number of products for each manufacturer, showing the name of each company.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of companies with revenue between 100 and 150?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find all information of all the products with a price between $60 and $120.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Select all the data from the products and each product's manufacturer.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of companies whose revenue is between 100 and 150.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many companies were created by Andy?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM manufacturers WHERE founder  =  'Andy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the number of different products that are produced by companies at different headquarter cities.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) ,  t2.headquarter FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name of product that is produced by both companies Creative Labs and Sony.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of companies started by founder?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name and revenue of the company that earns the highest revenue in each city.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is all the information of all the products that have a price between 60 and 120?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the codes and names of the cheapest products in each category?", "output": "```gerenated SQL\n-- SQL: SELECT code ,  name ,  MIN(price) FROM products GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the code of the product that is cheapest in each product category.", "output": "```gerenated SQL\n-- SQL: SELECT code ,  name ,  MIN(price) FROM products GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name HAVING AVG(t1.price) >= 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue for each manufacturer.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) ,  name FROM manufacturers GROUP BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Return the average, maximum, and total revenues across all manufacturers.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What is the average price of products with manufacturer codes equal to 2?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM products WHERE manufacturer  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "For each manufacturer name, what are the names and prices of their most expensive product?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  MAX(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "How many products are not made by Sony?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Find the name of companies that do not make DVD drive.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "What are the different cities listed?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT headquarter FROM manufacturers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the founder of the company whose name begins with the letter 'S'.", "output": "```gerenated SQL\n-- SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "How many products have prices of at least 180?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM products WHERE price >= 180;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "What are the names of manufacturers with revenue greater than the average of all revenues?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\nCREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "What are the names of companies that do not make DVD drives?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t1.name  =  'DVD drive';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find number of products which Sony does not make.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\n", "input": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  manufacturer FROM products GROUP BY manufacturer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(revenue) FROM manufacturers WHERE revenue  >  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `Manufacturers` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Headquarter VARCHAR(255),\r\n  Founder VARCHAR(255),\r\n  Revenue REAL\r\n);\n\n", "input": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.price) ,  t2.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many games are played for all students?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many students play each sport?", "output": "```gerenated SQL\n-- SQL: SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all male students who do not play football?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  \"Football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show total hours per week and number of games played for student David Shieber.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  \"David\" AND t2.lname  =  \"Shieber\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show ids for all students who have advisor 1121.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE advisor  =  1121;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Which game type has most number of games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all student ids and the number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  SUM(hours_played) FROM plays_games GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who don't have any sports.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many different students are involved in sports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the advisors", "output": "```gerenated SQL\n-- SQL: SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "How many different students play games?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show total hours per week and number of games played for students under 20.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the total number of hours per week and number of games played by students under 20?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.age  <  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all female students who play football?", "output": "```gerenated SQL\n-- SQL: SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  \"football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the type of video game Call of Destiny.", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games WHERE gname  =  \"Call of Destiny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What type has the most games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all game names played by at least 1000 hours.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show all game ids and the number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video games and their types in the order of their names.", "output": "```gerenated SQL\n-- SQL: SELECT gname ,  gtype FROM video_games ORDER BY gname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who don't play sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the names of all games played by Linda Smith?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show ids of students who don't play video game.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the total number of hours per work and number of games played by David Shieber?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  \"David\" AND t2.lname  =  \"Shieber\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show first name for all students with major 600.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM student WHERE major  =  600;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What is the name of the game that has been played the most?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "List ids for all student who are on scholarship.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first and last name of all students who play Football or Lacrosse?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  \"Football\" OR t1.sportname  =  \"Lacrosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first and last name of the student who played the most sports?", "output": "```gerenated SQL\n-- SQL: SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show all male student ids who don't play football.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  \"Football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show the average, minimum, and maximum age for different majors.", "output": "```gerenated SQL\n-- SQL: SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the first names for all students who are from the major numbered 600?", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM student WHERE major  =  600;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "output": "```gerenated SQL\n-- SQL: SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Call of Destiny\" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Works of Widenius\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What type of game is Call of Destiny?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games WHERE gname  =  \"Call of Destiny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all student IDs with the number of sports and total number of games played", "output": "```gerenated SQL\n-- SQL: SELECT stuid ,  COUNT(*) ,  SUM(gamesplayed) FROM sportsinfo GROUP BY stuid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What are the ids for all sporty students who are on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Find the last and first name of students who are playing Football or Lacrosse.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname ,  t2.fname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.sportname  =  \"Football\" OR t1.sportname  =  \"Lacrosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the student ids for those on scholarship in major number 600?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the total number of all football games played by scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who are on scholarship and have major 600.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE major  =  600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show ids of students who play video game and play sports.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the total number of games played?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video game types and the number of video games in each type.", "output": "```gerenated SQL\n-- SQL: SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Which sport has most number of students on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all sport name and the number of students.", "output": "```gerenated SQL\n-- SQL: SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the names of all the video games and their types in alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT gname ,  gtype FROM video_games ORDER BY gname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "Show all student IDs with more than total 10 hours per week on all sports played.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM(hoursperweek)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show ids for all students who live in CHI.", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE city_code  =  \"CHI\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are ids and total number of hours played for each game?", "output": "```gerenated SQL\n-- SQL: SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all game names played by Linda Smith", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\nCREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "output": "```gerenated SQL\n-- SQL: SELECT lname ,  sex FROM student WHERE stuid IN (SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Call of Destiny\" INTERSECT SELECT t1.stuid FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid WHERE t2.gname  =  \"Works of Widenius\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What are the names of all video games that are collectible cards?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM video_games WHERE gtype  =  \"Collectible card game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video games with type Collectible card game.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM video_games WHERE gtype  =  \"Collectible card game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video game types exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT gtype) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the count of different game types?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT gtype) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games do you have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "How many video games have type Massively multiplayer online game?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many games are played for all football games by students on scholarship?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What is the first name and last name of the student who have most number of sports?", "output": "```gerenated SQL\n-- SQL: SELECT t2.fname ,  t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Count the number of video games with Massively multiplayer online game type .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who are not video game players?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show last names for all student who are on scholarship.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who live in CHI?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE city_code  =  \"CHI\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many different types of sports do we offer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT sportname) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "Show the game name that has most number of hours played.", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show student ids who are female and play football.", "output": "```gerenated SQL\n-- SQL: SELECT stuid fROM student WHERE sex  =  'f' INTERSECT SELECT stuid fROM sportsinfo WHERE sportname  =  \"football\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "What is the type with the fewest games?", "output": "```gerenated SQL\n-- SQL: SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the names of all the games that have been played for at least 1000 hours?", "output": "```gerenated SQL\n-- SQL: SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid GROUP BY t1.gameid HAVING SUM(hours_played)  >=  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the ids of all students who have advisor number 1121?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM student WHERE advisor  =  1121;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "What is the sport with the most scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT sportname FROM sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Plays_Games` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  GameID INTEGER REFERENCES Video_Games(GameID),\r\n  Hours_Played INTEGER\r\n);\n\n", "input": "What are the ids of all students who played video games and sports?", "output": "```gerenated SQL\n-- SQL: SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "What are the last names for all scholarship students?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lname FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t1.onscholarship  =  'Y';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Video_Games` (\r\n  GameID INTEGER,\r\n  GName VARCHAR(40),\r\n  GType VARCHAR(40)\r\n);\n\n", "input": "Show all video game types.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT gtype FROM video_games;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\nCREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Find the first name and age of the students who are playing both Football and Lacrosse.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname  =  \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname  =  \"Lacrosse\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student` (\r\n  StuID INTEGER,\r\n  LName VARCHAR(12),\r\n  Fname VARCHAR(12),\r\n  Age INTEGER,\r\n  Sex VARCHAR(1),\r\n  Major INTEGER,\r\n  Advisor INTEGER,\r\n  city_code VARCHAR(3)\r\n);\n\n", "input": "Show all advisors who have at least two students.", "output": "```gerenated SQL\n-- SQL: SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many sports do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT sportname) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `SportsInfo` (\r\n  StuID INTEGER REFERENCES Student(StuID),\r\n  SportName VARCHAR(32),\r\n  HoursPerWeek INTEGER,\r\n  GamesPlayed INTEGER,\r\n  OnScholarship VARCHAR(1)\r\n);\n\n", "input": "How many students play sports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT stuid) FROM sportsinfo;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "Return the description of the budget type that has the code ORG.", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code  =  \"ORG\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "List all budget type codes and descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code ,  budget_type_description FROM ref_budget_codes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids and details for each project?", "output": "```gerenated SQL\n-- SQL: SELECT project_id ,  project_details FROM projects;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "Show all statement id and the number of accounts for each statement.", "output": "```gerenated SQL\n-- SQL: SELECT statement_id ,  COUNT(*) FROM accounts GROUP BY statement_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Return the ids of documents that do not have expenses.", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the document type code with fewer than 3 documents.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*)  <  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "List ids and details for all projects.", "output": "```gerenated SQL\n-- SQL: SELECT project_id ,  project_details FROM projects;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Show ids for all documents with budget types described as 'Government'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code WHERE t2.budget_type_description  =  \"Government\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of documents that do not have expenses.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "How many documents are there of each type?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  COUNT(*) FROM documents GROUP BY document_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the codes corresponding to document types for which there are less than 3 documents?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*)  <  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What are the different budget type codes, and how many documents are there for each?", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code ,  COUNT(*) FROM documents_with_expenses GROUP BY budget_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "Return the ids and details corresponding to projects for which there are more than two documents.", "output": "```gerenated SQL\n-- SQL: SELECT t1.project_id ,  t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id GROUP BY t1.project_id HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "How many accounts do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM accounts;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "Show the statement id and the statement detail for the statement with most number of accounts.", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_id ,  t2.statement_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'GV' INTERSECT SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'SF';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids and details of all statements?", "output": "```gerenated SQL\n-- SQL: SELECT statement_id ,  statement_details FROM statements;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Show the budget type code and description and the corresponding document id.", "output": "```gerenated SQL\n-- SQL: SELECT t2.budget_type_code ,  t2.budget_type_description ,  t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "What is the description for the budget type with code ORG?", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code  =  \"ORG\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "How many documents correspond with each project id?", "output": "```gerenated SQL\n-- SQL: SELECT project_id ,  COUNT(*) FROM documents GROUP BY project_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Give the budget type code that is most common among documents with expenses.", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Give the ids of documents that have expenses and contain the letter s in their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_id FROM documents as t1 JOIN documents_with_expenses as t2 ON t1.document_id  =  t2.document_id WHERE t1.document_name LIKE '%s%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_details ,  t2.document_name FROM statements as t1 JOIN documents as t2 ON t1.statement_id  =  t2.document_id WHERE t1.statement_details  =  'Private Project';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "Give the details of the project with the document name 'King Book'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id WHERE t2.document_name  =  \"King Book\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "Show all account ids and account details.", "output": "```gerenated SQL\n-- SQL: SELECT account_id ,  account_details FROM accounts;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\n", "input": "What are the codes, names, and descriptions of the different document types?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM ref_document_types;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "List document type codes and the number of documents in each code.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  COUNT(*) FROM documents GROUP BY document_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\n", "input": "What is the document type description for document type named Film?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_description FROM ref_document_types WHERE document_type_name  =  \"Film\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\n", "input": "Return the description of the document type name 'Film'.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_description FROM ref_document_types WHERE document_type_name  =  \"Film\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "What are the account details with the largest value or with value having char '5' in it?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(account_details) FROM accounts UNION SELECT account_details FROM accounts WHERE account_details LIKE \"%5%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Give the ids for documents that have the budget description 'Government'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code WHERE t2.budget_type_description  =  \"Government\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Show ids for all documents in type CV without expense budgets.", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the document type code with most number of documents?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of documents with the type code BK that correspond to each product id.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  project_id FROM documents WHERE document_type_code  =  \"BK\" GROUP BY project_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "What is the project detail for the project with document \"King Book\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.project_details FROM projects as t1 JOIN documents as t2 ON t1.project_id  =  t2.project_id WHERE t2.document_name  =  \"King Book\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Return the code of the document type that is most common.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the ids for projects with at least 2 documents.", "output": "```gerenated SQL\n-- SQL: SELECT project_id FROM documents GROUP BY project_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What is the budget type code with most number of documents.", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "output": "```gerenated SQL\n-- SQL: SELECT document_name ,  document_date FROM documents as t1 JOIN projects as t2 ON t1.project_id  =  t2.project_id WHERE t2.project_details  =  'Graph Database project';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "How many documents are with document type code BK for each product id?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  project_id FROM documents WHERE document_type_code  =  \"BK\" GROUP BY project_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids and details of all accounts?", "output": "```gerenated SQL\n-- SQL: SELECT account_id ,  account_details FROM accounts;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "What are the statement id and statement detail for the statement that has the most corresponding accounts?", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_id ,  t2.statement_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'GV' INTERSECT SELECT t1.document_date FROM documents as t1 JOIN documents_with_Expenses as t2 ON t1.document_id  =  t2.document_id WHERE t2.budget_type_code  =  'SF';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "What are the type codes and descriptions of each budget type?", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code ,  budget_type_description FROM ref_budget_codes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the id of the project with least number of documents?", "output": "```gerenated SQL\n-- SQL: SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "How many documents do not have any expense?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  document_name ,  document_description FROM documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids and names for each of the documents?", "output": "```gerenated SQL\n-- SQL: SELECT document_id ,  document_name FROM documents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "Return the account details with the greatest value, as well as those that include the character 5.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(account_details) FROM accounts UNION SELECT account_details FROM accounts WHERE account_details LIKE \"%5%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the ids and names of all documents.", "output": "```gerenated SQL\n-- SQL: SELECT document_id ,  document_name FROM documents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of accounts.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM accounts;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "output": "```gerenated SQL\n-- SQL: SELECT document_name ,  document_date FROM documents as t1 JOIN projects as t2 ON t1.project_id  =  t2.project_id WHERE t2.project_details  =  'Graph Database project';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Give the ids of documents with expenses that have the budget code 'SF'.", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents_with_expenses WHERE budget_type_code  =  'SF';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of documents with expenses.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "Show the number of projects.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM projects;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Return the type name, type description, and date of creation for each document.", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_type_name ,  t1.document_type_description ,  t2.document_date FROM ref_document_types as t1 JOIN documents as t2 ON t1.document_type_code  =  t2.document_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "How many statements do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM statements;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "List all statement ids and statement details.", "output": "```gerenated SQL\n-- SQL: SELECT statement_id ,  statement_details FROM statements;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of statements.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM statements;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "output": "```gerenated SQL\n-- SQL: SELECT document_type_code ,  document_name ,  document_description FROM documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_details ,  t2.document_name FROM statements as t1 JOIN documents as t2 ON t1.statement_id  =  t2.document_id WHERE t1.statement_details  =  'Private Project';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Document_Types` (\r\n  Document_Type_Code CHAR(15) PRIMARY KEY,\r\n  Document_Type_Name VARCHAR(255),\r\n  Document_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the document type name and the document type description and creation date for all the documents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.document_type_name ,  t1.document_type_description ,  t2.document_date FROM ref_document_types as t1 JOIN documents as t2 ON t1.document_type_code  =  t2.document_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "What are the statement ids, statement details, and account details, for all accounts?", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_id ,  t2.statement_details ,  t1.account_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Projects` (\r\n  Project_ID INTEGER,\r\n  Project_Details VARCHAR(255)\r\n);\n\n", "input": "How many projects are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM projects;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "How many documents have expenses?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and ids of documents that have the type code BK?", "output": "```gerenated SQL\n-- SQL: SELECT document_name ,  document_id FROM documents WHERE document_type_code  =  \"BK\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "output": "```gerenated SQL\n-- SQL: SELECT t2.budget_type_code ,  t2.budget_type_description ,  t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show project ids and the number of documents in each project.", "output": "```gerenated SQL\n-- SQL: SELECT project_id ,  COUNT(*) FROM documents GROUP BY project_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids of documents which don't have expense budgets?", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids of documents with the type code CV that do not have expenses.", "output": "```gerenated SQL\n-- SQL: SELECT document_id FROM documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM documents_with_expenses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents_with_Expenses` (\r\n  Document_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code),\r\n  Document_Details VARCHAR(255)\r\n);\n\n", "input": "Show budget type codes and the number of documents in each budget type.", "output": "```gerenated SQL\n-- SQL: SELECT budget_type_code ,  COUNT(*) FROM documents_with_expenses GROUP BY budget_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Accounts` (\r\n  Account_ID INTEGER,\r\n  Statement_ID INTEGER REFERENCES Statements(Statement_ID),\r\n  Account_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Statements` (\r\n  Statement_ID INTEGER REFERENCES Documents(Document_ID),\r\n  Statement_Details VARCHAR(255)\r\n);\n\n", "input": "Show statement id, statement detail, account detail for accounts.", "output": "```gerenated SQL\n-- SQL: SELECT t1.statement_id ,  t2.statement_details ,  t1.account_details FROM accounts as t1 JOIN statements as t2 ON t1.statement_id  =  t2.statement_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of documents.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM documents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are project ids of projects that have 2 or more corresponding documents?", "output": "```gerenated SQL\n-- SQL: SELECT project_id FROM documents GROUP BY project_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Documents` (\r\n  Document_ID INTEGER,\r\n  Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code),\r\n  Project_ID INTEGER REFERENCES Projects(Project_ID),\r\n  Document_Date DATETIME,\r\n  Document_Name VARCHAR(255),\r\n  Document_Description VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Return the id of the project that has the fewest corresponding documents.", "output": "```gerenated SQL\n-- SQL: SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Budget_Codes` (\r\n  Budget_Type_Code CHAR(15) PRIMARY KEY,\r\n  Budget_Type_Description VARCHAR(255)\r\n);\n\n", "input": "How many budget types do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM ref_budget_codes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "pldi papers in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Who wrote on the topic of Bacterial Wilt in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid JOIN author as t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "citation count of zachary tatlock 's papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Papers by sharon goldwater", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "Which papers were accepted in pldi 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Datasets with semantic parsing information", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are some papers dealing with Semantic Data in YAGO ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase as t2 ON t2.paperid  =  t3.paperid JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who else was on the paper with Ameet Soni and Ras Bodik ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t5.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN writes as t5 ON t5.paperid  =  t4.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how many ACL 2012 papers have more than 7 citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT ( t1.paperid )  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT(t3.citingpaperid)  >  7;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers by Liwen Xiong from 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "At which conferences does Daniella Coelho publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "newest deep learning papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what topics does Luke Zettlemoyer publish in", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who had papers at acl 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers were published on convolutional neural networks in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers has David M. Blei published in AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many Parsing papers did acl 2012 have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the paper about Question Answering ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What conference does Daniella Coelho publish in ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "papers in chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What authors wrote papers about Bacterial Wilt in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid JOIN author as t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers does Samuel Madden publish outside of PVLDB area ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the paper about parsing of the most citation ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers of ali farhadi in eccv 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "Papers about chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many citations does noah a smith has ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "TAIL papers in NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what are the papers that have Peter Mertens and Dina Barbian as co-authors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `journal` (\r\n  journalId INTEGER,\r\n  journalName varchar(100)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Which journals did linda shapiro submit papers to ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.journalid FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what paper has Richard Ladner published in chi journal ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers from 2014", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "convolution papers by brian curless", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "NIPS authors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers that used WebKB", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who is a coauthor with Noah A Smith ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "give me the keywords used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who wrote the most papers on syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What is the most cited paper at sigcomm ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What is the latest paper by oren etzioni ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "most cited papers on parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers by Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who wrote papers in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers that are coauthored by Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "top author in syntactic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the most recent paper of deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers published in eccv 2016 by ali farhadi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers used ImageNet dataset ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "pldi papers 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "number of papers written by Christopher D. Manning", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "number of ACL papers by author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers published in nature communications in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Does Peter Mertens ever collaborated with Dina Barbian ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "authors with at least 5 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT(t2.paperid)  >=  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who wrote the most papers for CVPR 2007", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "number of papers in sigir conference", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What was the first paper on deep learning written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What are all the publication titles by Donald E Knuth ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.title FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "When does Michael Stonebraker publish the GIS Database paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "pldi 2015 list of papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Most recent deep learning conference ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers does sigir have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how many papers are based on ImageNet", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Who are the authors with the most published papers in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "which papers has sharon goldwater written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers that mention Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers are about deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What year did Ye Cao publish the most papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT(DISTINCT t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are some recent papers written in deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "What were the papers published at pldi 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who does oren etzioni cite", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many papers about deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets used for semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What topic does Luke Zettlemoyer write about ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers that were not published in the last year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE year != 2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What paper did Michael Armstrong wrote in the 90s ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year  ,  t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers published in 2015 by Liwen Xiong", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers related to deep reinforcement learning in nips ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who authored papers at NIPS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers authored by Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers does David M. Blei have in AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What journals has Takashi Matsumoto published in ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journal` (\r\n  journalId INTEGER,\r\n  journalName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "what papers were published in Academic radiology in 1995 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paper as t2 JOIN journal as t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "does ras bodik publish a lot ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t3.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "acl papers in 2012 on Parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "recent papers written by sanjeev arora", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many of dan klein 's papers cite michael i. jordan", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t5.citingpaperid) FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN cite as t5 ON t3.paperid  =  t5.citedpaperid JOIN writes as t4 ON t4.paperid  =  t5.citingpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "papers in pldi 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers coauthored by Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who has written the most syntactic parsing papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Number of ACL papers with more than 2 citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  >  2;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Question Answering papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who are Noah A Smith 's coauthors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Peter Mertens and Dina Barbian as co-authors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "2014 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Have Peter Mertens and Dina Barbian written a paper together ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "What venues are for Neuroscience ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers was published in nature communications in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers written by Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by sharon goldwater", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Current research on deep learning", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "conferences in 2013", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT venueid FROM paper WHERE year  =  2013;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List papers that has keyword Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "character recognition papers before 2010", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "in what conferences does Daniella Coelho publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers does David M. Blei have at AISTATS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers are in deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "number of papers published in ACL 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers were written by authors Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers does jamie callan publish each year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "what papers have fewer than 5 citations by ACL papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets in semantic parsing papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Euclidean Distance papers citing NIPS papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite as t5 ON t2.paperid  =  t5.citingpaperid JOIN paper as t3 ON t3.paperid  =  t5.citedpaperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who has the most papers in semantic parsing after 2005 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "what ACL papers have less than 5 citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "conferences for Trophic Cascade", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers in ACL 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "When did Michael Stonebraker publish his GIS Database paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who has written the most papers on semantic parsing since 2005 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many citations does noah a smith have", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "when were most NIPS papers published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "most cited EMNLP 2010 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "semantic parsing dataset", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers by dan klein are cited by michael i. jordan", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t5.citingpaperid) FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN cite as t5 ON t3.paperid  =  t5.citedpaperid JOIN writes as t4 ON t4.paperid  =  t5.citingpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who has coauthored with Noah A Smith ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who has the most publications in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the paper about convolution from brian curless ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers appeared at nature communications last year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are the latest publications on deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "pldi best paper award 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "list papers that used Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "most recent papers by oren etzioni", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Where does Peter Mertens publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "datasets mentioned at ACL", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "brian curless convolution paper", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what keywords are used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "papers from pldi 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "list papers published in chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What are the papers of Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "parsing papers that have the most citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers on WebKB", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases Christof Dallermassl used in papers written last year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT(DISTINCT t1.keyphrasename)  >  1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who published the most in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what paper did Peter Mertens and Dina Barbian write together ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "ACL papers by author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What papers did Liwen Xiong publish last year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who cites Daniel A Reed the most", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citingpaperid)  ,  t3.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN writes as t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT(t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Where did li dong publish in 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what datasets were used by jitendra malik ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers written on ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Most cited papers on parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers in nature communications 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who wrote the most CVPR papers in 2007", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "monte carlo simulation papers published after 2011", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "top dependent types papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Does brian curless do convolution ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "co-authors of Noah A Smith", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers related to Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers does Mirella Lapata cite", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "coauthors of Noah A Smith", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what was the first deep learning paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who are Noah A Smith 's co-authors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what are syntactic parsing papers not written by chris dyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "number of citations of noah a smith", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are recent papers on deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "brian curless 's papers on convolution", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Which papers are about about Question Answering ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers published in 2015 by Liwen Xiong", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What conferences does Daniella Coelho submit to ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers were at nature communications 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "citations for Daniel Jurafsky", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "When did Luke S Zettlemoyer publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "What articles have been published since 2006 about the effects of juicing for cancer patients ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND year  >  2006;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "List of authors in acl 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "people working on sensor fusion", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who are Noah A Smith 's coauthors ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "most popular topics at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "2014 papers using ImageNet", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who publishes papers about sensor fusion", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers about Parsing in acl 2012", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Who published the most papers in 2007 at CVPR ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are keyphrases by Christof Dallermassl in 2000 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "venue for Trophic Cascade", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what keyphrase does Brian DeRenzi write about that gets most citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphrasename  ,  SUM(t3.numcitedby) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM(t3.numcitedby) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers has Mirella Lapata cited ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keywords used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "the papers at eccv in 2014 using ImageNet dataset", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "convolution paper by brian curless", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "conference papers of subhasis chaudhuri", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers does David M. Blei have in AISTATS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers published in nature communications 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many papers on convolutional neural networks have been published in the past year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "jamie callan 's publications by year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many citation noah a smith has ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what are the collaborations of Peter Mertens and Dina Barbian ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers about character recognition from before 2010", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "what papers did chi publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many paper has Ed Desmond written about Semantic Parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List the journals related to Temporal Data", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What did Liwen Xiong published in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many Semantic Parsing papers has Ed Desmond written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "machine networks for one shot learning", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers did Mirella Lapata cite ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "brian curless 's paper about convolution", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What is oren etzioni 's latest paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Keyphrases used by Christof Dallermassl in 2000", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What papers has Liwen Xiong written in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers David M. Blei has in AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "papers published at pldi 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who is the most published author in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "topics used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "In which conferences does Daniella Coelho typically publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many parsing papers in ACL 2014", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers with Question Answering in keyphrases", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What has Richard Ladner published at chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers has Christopher D. Manning written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers were written on convolutional neural networks in the past year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Papers about TAIL in NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.title FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN paper as t3 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what are some syntactic parsing papers that chris dyer did not write ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are the best NLP conferences ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List top papers for parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases used by Christof Dallermassl in 2000", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Where did sergey levine publish his last paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "topics popular at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Parsing papers from acl 2012", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Parsing papers from ACL 2014 using Jeopardy! Questions", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What was the conference name that approved Trophic Cascade ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what conferences are related to Trophic Cascade", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers typically cited by parsing papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how many ACL papers by author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "data sets for semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Which papers cite Daniel Jurafsky ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Who cites Daniel A Reed most ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citingpaperid)  ,  t3.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t4 ON t2.paperid  =  t4.citedpaperid JOIN writes as t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT(t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who published at acl 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what datasets did jitendra malik use in his papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Which paper from EMNLP 2010 was cited most ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Papers about Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers were published in nature communications 2015 conference ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers are published in sigir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "are there any syntactic parsing papers not written by chris dyer ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "what papers are published by Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Parsing papers using Jeopardy! Questions published at ACL 2014", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers has Richard Ladner written at chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Fetch me the most cited publications for Artificial Intelligence", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who published Parsing papers at acl 2012", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers on Parsing appeared at acl in 2012", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Papers authored by sharon goldwater", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "most published author at CVPR 2007", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers did michael i. jordan publish in 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Who publishes in sensor fusion ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who has papers at NIPS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who published the most in semantic parsing after 2005 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "In what years did Pedro Domingos publish a paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers have been written by both Peter Mertens and Dina Barbian ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "noah a smith citation count", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who writes papers with Noah A Smith ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "number of papers by year from jamie callan", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "conferences that mention ImageNet", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what kind of papers does Luke Zettlemoyer publish", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what author is most cited ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname  ,  COUNT(t3.citingpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT(t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "top authors working on ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t4 ON t4.paperid  =  t2.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Show me some recent papers on deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers were published in acl in 2012 about Parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Papers written by sharon goldwater", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "monte carlo simulation papers since 2011", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "in what venues does Peter Mertens publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers before 2010 about character recognition", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "datasets used in papers written by jitendra malik ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "List all academic papers on machine networks for one shot learning", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers have been written by Peter Mertens and Dina Barbian .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers published in the area of Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many parsing papers were published at ACL 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what is the most cited paper of ohad shamir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "large-scale datasets used in semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journal` (\r\n  journalId INTEGER,\r\n  journalName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many publications were added to the Cell journal this year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase as t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets used for evaluating semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers were published in nature communications in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Does ali farhadi have a paper in eccv in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Paper on parsing with most citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers brian curless wrote about convolution", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "In what scholarly journals does Takashi Matsumoto publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers cite Daniel Jurafsky ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "journal articles by mohammad rastegari", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what papers does oren etzioni cite", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "what papers are published in pldi 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Fetch me some papers on Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "authors who collaborated with Noah A Smith", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers has Christopher D. Manning published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List the popular publications on dependent types", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "syntactic parsing papers not written by chris dyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "When was Michael Stonebraker GIS Database published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "ACL papers in 2016 with neural attention in the title", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "which topics were most popular at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List papers that has a keyword Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What is the most popular paper this year in CVPR ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers does Ed Desmond have in Semantic Parsing area ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t1 JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t1.paperid JOIN author as t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What years did Pedro Domingos publish papers in ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers were published at acl in 2012 were about Parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers does David M. Blei have in AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how is the most cited author in CVPR ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid JOIN cite as t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What is the highest cited paper by ohad shamir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Datasets by jitendra malik", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who published the most papers in CVPR 2007", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what datasets are used in papers by jitendra malik", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers that use the WebKB dataset", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "latest deep learning papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Latest paper by oren etzioni", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Who has written the most papers at chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "What are the papers from pldi 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what datasets did jitendra malik use ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "parsing top papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "list papers by subhasis chaudhuri", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Where did li dong publish in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What are the 5 most recent papers of Mirella Lapata ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers about TAIL published at NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "list datasets for semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers are there ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT paperid) FROM paper;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers on Parsing appeared at acl last year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many citations does noah a smith have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "When does Michael Stonebraker publish the first VLDB paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "Papers from pldi 2015 conference", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers are related to deep learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers does Christopher D. Manning have", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Question Answering experiments", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what paper has Richard Ladner published in chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "WebKB papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers written by authors Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers related to deep learning cited the dataset ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid) FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase as t1 ON t4.paperid  =  t1.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers were written on question answering this year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers has sharon goldwater written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "top syntactic parsing author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many authors published at sigcse in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid) FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what are the papers in NIPS about TAIL ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers have Peter Mertens and Dina Barbian written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "acl 2016 authors", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Has mirella lapata written any papers in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t2.authorid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "popular topics at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Journal Papers by mohammad rastegari", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Papers from Liwen Xiong in 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "author who wrote papers with Noah A Smith", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers on TAIL NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers that use WebKB", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What is the year of publication of \" A Switching Architecture For ISDN \" ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT title  ,  year FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "best paper in TACL 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.citingpaperid)  ,  t1.paperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT(DISTINCT t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "When did ameet soni publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers for Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers on nature communications in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who published the most at chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "sharon goldwater papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Which paper did Richard Ladner present at chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.title FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t5.paperid JOIN paper as t2 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid JOIN venue as t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "the papers on semantic parsing by li dong at acl in 2016", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper as t2 ON t2.paperid  =  t5.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets in papers about semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "monte carlo simulation later than 2011", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers by brian curless about convolution", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers does Christopher D. Manning have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers has brian curless written about convolution ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "When was benjamin mako hill 's first paper written ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "which papers in eccv 2014 use ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers written by Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Does sharon goldwater have any papers published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Has Christopher D. Manning published any papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what were some Parsing based papers in acl 2012 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers did David M. Blei publish at AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "first deep learning paper", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `journal` (\r\n  journalId INTEGER,\r\n  journalName varchar(100)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "in what journals does linda shapiro publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.journalid FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "question answering 2016 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "which journal did Donald E Knuth publish his last paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who published the most papers in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List prominent scholars in syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "most common topics at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who does Noah A Smith author with ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers about WebKB", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "highly cited parsing papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who does Noah A Smith work with ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Show me Question Answering papers .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "When was the last time Mary Crainie published a paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT MAX(t3.year) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Which authors published papers in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t1 JOIN paper as t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many co-authors has Mark Steedman had ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t1.authorid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets used by semantic parsing papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "datasets with semantic parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Authors of papers on sensor fusion", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many publications does Christopher D. Manning have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what did sharon goldwater write ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "papers at chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who does Noah A Smith collaborate with ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Does Richard Ladner publish in chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by authors Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Who writes a lot of papers in Machine Learning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT(DISTINCT t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers does michael i. jordan have in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "main topics of work by Brian DeRenzi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphrasename  ,  SUM(t3.numcitedby) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM(t3.numcitedby) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "TAIL papers used in NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "which EMNLP 2010 papers have the most citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "most cited parsing papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many citations does Dan Makumbi 's Genetic Identity paper have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t5.citingpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN cite as t5 ON t4.paperid  =  t5.citedpaperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases used by Luke S Zettlemoyer for each year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what papers do parsing papers typically cite ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What TAIL paper published in NIPS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "Papers on chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many David M. Blei papers are in AISTATS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Liwen Xiong publication 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "which venue publishes the most papers about deep learning", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t4.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers were written on question answering in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What are the papers of brian curless in convolution ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers are authored by sharon goldwater ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many citations does luke zettlemoyer have per year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid)  ,  t3.year FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "which EMNLP 2010 papers have been cited the most ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citedpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers at NIPS related to TAIL", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "sharon goldwater 's papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "List the papers that used WebKB dataset", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many times was noah a smith cited ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "hot topics at NIPS 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "recent research interests of sanjeev arora", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "what datasets do papers at ACL use most ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Keyphrases used by Luke Zettlemoyer", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "what year had the most number of NIPS papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Show me the papers on Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers by Richard Ladner published at chi", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "where does Peter Mertens publish ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "topics at ACL 2014", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT(t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What paper by ohad shamir has the most citation ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What journals are Takashi Matsumoto 's articles published in ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "recent papers by sanjeev arora", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers with more than 10 citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >  10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What conferences did li dong publish in in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "who are all the co-authors of Noah A Smith ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "How many papers were accepted at nature communications 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What has sharon goldwater published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "papers citing Daniel Jurafsky", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "How many papers used ImageNet datasets in cvpr ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "keyphrases used by dan klein in his emnlp papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid JOIN writes as t5 ON t5.paperid  =  t3.paperid JOIN author as t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "how many parsing papers appeared in the proceeeding of ACL 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "parsing papers with most citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Who has published more papers in chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers on Question Answering experiments", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "recent deep learning papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what keywords are used by papers at uist", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "monte carlo simulation papers later than 2011", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "count of ACL papers by author", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What was oren etzioni 's latest paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "List of papers by subhasis chaudhuri", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "character recognition papers earlier than 2010", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers has Noah Smith co-authored since 2009 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "are there any monte carlo simulation papers since 2011 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Eric C. Kerrigan 's Liquid Automatica paper", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t5.paperid JOIN paper as t2 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid JOIN venue as t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "what has Liwen Xiong done in the past year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM paperkeyphrase as t6 JOIN keyphrase as t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t6.paperid JOIN writes as t5 ON t5.paperid  =  t4.paperid JOIN author as t1 ON t5.authorid  =  t1.authorid JOIN author as t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who publishes in NIPS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Question Answering research papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how many papers jamie callan published each year ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "what year had the most NIPS papers ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "How many papers has Christopher D. Manning ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "show me papers by sharon goldwater .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "who has written the most papers on syntactic parsing ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Which paper should I read about dependent types ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who are the authors at NIPS ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Papers by Peter Mertens and Dina Barbian", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers using WebKB", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "character recognition papers from before 2010", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers are in sigir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "What papers were published during the conference pldi 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what are the parsing papers that have the most citations ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers does Richard Ladner have in chi ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "When was deep learning proposed ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "authors of acl 2016 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many citations does noah a smith have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "I want the papers on keyphrase0 by brian curless", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many papers were written on convolutional neural networks in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "List today 's journals", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT journalid FROM paper WHERE year  =  2011 GROUP BY journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers on Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Find journals about Temporal Data .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\n", "input": "authors working on ImageNet", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN writes as t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journal` (\r\n  journalId INTEGER,\r\n  journalName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "How many articles were published in the Cell journal in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid) FROM paper as t3 JOIN journal as t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase as t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What is the most cited paper by ohad shamir ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "acl papers in 2012 in Parsing", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "semantic parsing datasets", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "subhasis chaudhuri", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "How many papers did michael i. jordan publish in 2016 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What is ohad shamir 's highest cited paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "Which papers have Peter Mertens and Dina Barbian as co-authors ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "how many papers accepted in nature communications 2015", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What conferences does Daniella Coelho publish in ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers in semantic parsing for each year", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "papers cited by at least 5 papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >=  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\n", "input": "Show me chi papers .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "what year was the first deep learning paper published ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN keyphrase as t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year asC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "Give me the papers written by Su-In Lee before 2012 .", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What are the latest papers by oren etzioni ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "how many papers use ImageNet ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "List the papers on TAIL that were published in NIPS", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "who published papers in CVPR 2007", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "What papers have been written by Peter Mertens and Dina Barbian ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "In what year did Ye Cao publish the most papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT(DISTINCT t3.paperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "new deep learning papers", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What papers talk about Question Answering ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "What was the best paper at TACL 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t3.citingpaperid)  ,  t1.paperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT(DISTINCT t3.citingpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "What keywords are in papers by Luke Zettlemoyer ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "how many papers does Christopher D. Manning have ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "papers that used Question Answering", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\n", "input": "ACL papers with less than 5 citations", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `cite` (\r\n  citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId)\r\n);\n\nCREATE TABLE `author` (\r\n  authorId INTEGER,\r\n  authorName varchar(50)\r\n);\n\n", "input": "what is ohad shamir 's most cited paper ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `dataset` (\r\n  datasetId INTEGER,\r\n  datasetName varchar(50)\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\nCREATE TABLE `venue` (\r\n  venueId INTEGER,\r\n  venueName varchar(100)\r\n);\n\nCREATE TABLE `paper` (\r\n  paperId INTEGER,\r\n  title varchar(300),\r\n  venueId INTEGER REFERENCES venue(venueId),\r\n  year INTEGER,\r\n  numCiting INTEGER,\r\n  numCitedBy INTEGER,\r\n  journalId INTEGER REFERENCES journal(journalId)\r\n);\n\nCREATE TABLE `paperDataset` (\r\n  paperId INTEGER PRIMARY KEY,\r\n  datasetId INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\n", "input": "Parsing papers from ACL 2014 that used Jeopardy! Questions", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase as t4 ON t4.paperid  =  t3.paperid JOIN paper as t2 ON t2.paperid  =  t3.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN keyphrase as t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM budget WHERE budgeted  >  3000 AND year  <=  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING COUNT(*)  >  1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "Count the number of schools.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM school;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "output": "```gerenated SQL\n-- SQL: SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Glenn' INTERSECT SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Triton';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "Show all school names in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT school_name FROM school ORDER BY school_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "List the name, location, mascot for all schools.", "output": "```gerenated SQL\n-- SQL: SELECT school_name ,  location ,  mascot FROM school;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "What are the mascots for schools with enrollments above the average?", "output": "```gerenated SQL\n-- SQL: SELECT mascot FROM school WHERE enrollment  >  (SELECT AVG(enrollment) FROM school);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "Show the names of all the donors except those whose donation amount less than 9.", "output": "```gerenated SQL\n-- SQL: SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "output": "```gerenated SQL\n-- SQL: SELECT t2.school_name ,  t1.budgeted ,  t1.invested FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t1.year  >=  2002;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Show the average, maximum, minimum enrollment of all schools.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(enrollment) ,  MAX(enrollment) ,  MIN(enrollment) FROM school;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "Show each county along with the number of schools and total enrollment in each county.", "output": "```gerenated SQL\n-- SQL: SELECT county ,  COUNT(*) ,  SUM(enrollment) FROM school GROUP BY county;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "List the amount and donor name for the largest amount of donation.", "output": "```gerenated SQL\n-- SQL: SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "Show all donor names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT donator_name FROM endowment;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "List the names of the schools without any endowment.", "output": "```gerenated SQL\n-- SQL: SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\nCREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "output": "```gerenated SQL\n-- SQL: SELECT t2.school_name FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id JOIN endowment as t3 ON t2.school_id  =  t3.school_id GROUP BY t2.school_name HAVING SUM(t1.budgeted)  >  100 OR SUM(t3.amount)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "What is the total budget amount for school \"Glenn\" in all years?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.budgeted) FROM budget as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Glenn';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "How many schools are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM school;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "output": "```gerenated SQL\n-- SQL: SELECT donator_name ,  SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\n", "input": "List the name of the school with the smallest enrollment.", "output": "```gerenated SQL\n-- SQL: SELECT school_name FROM school ORDER BY enrollment LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "List all the names of schools with an endowment amount smaller than or equal to 10.", "output": "```gerenated SQL\n-- SQL: SELECT t2.school_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id GROUP BY t1.school_id HAVING SUM(t1.amount)  <=  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "How many budget record has a budget amount smaller than the invested amount?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM budget WHERE budgeted  <  invested;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "How many budgets are above 3000 in year 2001 or before?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM budget WHERE budgeted  >  3000 AND year  <=  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `endowment` (\r\n  endowment_id INT PRIMARY KEY,\r\n  School_id INT REFERENCES School(School_id),\r\n  donator_name TEXT,\r\n  amount REAL\r\n);\n\n", "input": "How many donors have endowment for school named \"Glenn\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.donator_name) FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  \"Glenn\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `School` (\r\n  School_id TEXT PRIMARY KEY,\r\n  School_name TEXT,\r\n  Location TEXT,\r\n  Mascot TEXT,\r\n  Enrollment INT,\r\n  IHSAA_Class TEXT,\r\n  IHSAA_Football_Class TEXT,\r\n  County TEXT\r\n);\n\nCREATE TABLE `budget` (\r\n  School_id INT PRIMARY KEY REFERENCES School(School_id),\r\n  Year INT PRIMARY KEY,\r\n  Budgeted INT,\r\n  total_budget_percent_budgeted REAL,\r\n  Invested INT,\r\n  total_budget_percent_invested REAL,\r\n  Budget_invested_percent TEXT\r\n);\n\n", "input": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "output": "```gerenated SQL\n-- SQL: SELECT t1.school_name ,  t1.mascot ,  t1.ihsaa_football_class FROM school as t1 JOIN budget as t2 ON t1.school_id  =  t2.school_id WHERE budgeted  >  6000 OR year  <  2003 ORDER BY t2.total_budget_percent_invested ,  t2.total_budget_percent_budgeted;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who is the nominee who has been nominated for the most musicals?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  \"The Phantom of the Opera\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show names of actors in descending order of the year their musical is awarded.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id WHERE t2.name  =  \"The Phantom of the Opera\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many musicals has each nominee been nominated for?", "output": "```gerenated SQL\n-- SQL: SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" INTERSECT SELECT nominee FROM musical WHERE award  =  \"Drama Desk award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who have been nominated more than two times?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the duration of the actor with the greatest age.", "output": "```gerenated SQL\n-- SQL: SELECT duration FROM actor ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors, ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of musicals who have at 3 or more actors?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the characters and durations for each actor.", "output": "```gerenated SQL\n-- SQL: SELECT character ,  duration FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List the nominees that have been nominated more than two musicals.", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT nominee FROM musical WHERE award != \"Tony award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show names of actors and names of musicals they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "List the name of actors in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" OR award  =  \"Cleavant Derricks\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "List the name of actors whose age is not 20.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor WHERE age != 20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "List the name of musicals that do not have actors.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What is the duration of the oldest actor?", "output": "```gerenated SQL\n-- SQL: SELECT duration FROM actor ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of actors who are not 20 years old?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM actor WHERE age != 20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Please show the nominee who has been nominated the greatest number of times.", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "Return the characters for actors, ordered by age descending.", "output": "```gerenated SQL\n-- SQL: SELECT character FROM actor ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List the most common result of the musicals.", "output": "```gerenated SQL\n-- SQL: SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show names of musicals and the number of actors who have appeared in the musicals.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the names of musicals who have no actors?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of musicals with nominee \"Bob Fosse\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE nominee  =  \"Bob Fosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of actors and the musicals that they are in?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the names of actors ordered descending by the year in which their musical was awarded?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id ORDER BY t2.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the most frequent result across all musicals.", "output": "```gerenated SQL\n-- SQL: SELECT result FROM musical GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many actors have appeared in each musical?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "output": "```gerenated SQL\n-- SQL: SELECT nominee FROM musical WHERE award  =  \"Tony award\" INTERSECT SELECT nominee FROM musical WHERE award  =  \"Drama Desk award\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show different nominees and the number of musicals they have been nominated.", "output": "```gerenated SQL\n-- SQL: SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the characters of actors in descending order of age?", "output": "```gerenated SQL\n-- SQL: SELECT character FROM actor ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\nCREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show names of musicals which have at least three actors.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id GROUP BY t1.musical_id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `actor` (\r\n  Actor_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Musical_ID INT REFERENCES actor(Actor_ID),\r\n  Character TEXT,\r\n  Duration TEXT,\r\n  age INT\r\n);\n\n", "input": "What are the characters and duration of actors?", "output": "```gerenated SQL\n-- SQL: SELECT character ,  duration FROM actor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `musical` (\r\n  Musical_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Year INT,\r\n  Award TEXT,\r\n  Category TEXT,\r\n  Nominee TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the names of musicals who have the nominee Bob Fosse.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM musical WHERE nominee  =  \"Bob Fosse\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the investors who have invested in two or more entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the weights of entrepreneurs in descending order of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "List the companies of entrepreneurs in descending order of money requested.", "output": "```gerenated SQL\n-- SQL: SELECT company FROM entrepreneur ORDER BY money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "How many entrepreneurs correspond to each investor?", "output": "```gerenated SQL\n-- SQL: SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Show the company of the tallest entrepreneur.", "output": "```gerenated SQL\n-- SQL: SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of people in ascending order of weight?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people ORDER BY weight ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What is the investor that has invested in the most number of entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Which company was started by the entrepreneur with the greatest height?", "output": "```gerenated SQL\n-- SQL: SELECT t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the average money requested across all entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(money_requested) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "List the names of people that are not entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the name of the entrepreneur with the greatest weight?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors that have invested in at least two entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  \"Simon Woodroffe\" OR t1.investor  =  \"Peter Jones\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What is the weight of the shortest person?", "output": "```gerenated SQL\n-- SQL: SELECT weight FROM people ORDER BY height ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of people who are not entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the companies and investors that correspond to each entrepreneur?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  investor FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the weight of the shortest person.", "output": "```gerenated SQL\n-- SQL: SELECT weight FROM people ORDER BY height ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the name of the heaviest entrepreneur.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of people, ordered by weight ascending.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM people ORDER BY weight ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What is the average money requested by all entrepreneurs?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(money_requested) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur WHERE money_requested  >  140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested  <  120000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Return the investor who have invested in the greatest number of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT investor FROM entrepreneur GROUP BY investor ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT company FROM entrepreneur ORDER BY money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "List the companies and the investors of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  investor FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Give the total money requested by entrepreneurs who are taller than 1.85.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.money_requested) FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t2.height  >  1.85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "output": "```gerenated SQL\n-- SQL: SELECT t2.weight FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != \"Rachel Elnaugh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "output": "```gerenated SQL\n-- SQL: SELECT t2.date_of_birth FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor  =  \"Simon Woodroffe\" OR t1.investor  =  \"Peter Jones\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != \"Rachel Elnaugh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "Count the number of entrepreneurs.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\nCREATE TABLE `people` (\r\n  People_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Height REAL,\r\n  Weight REAL,\r\n  Date_of_Birth TEXT\r\n);\n\n", "input": "List the names of entrepreneurs and their companies in descending order of money requested?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.company FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.money_requested;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `entrepreneur` (\r\n  Entrepreneur_ID INT PRIMARY KEY,\r\n  People_ID INT REFERENCES people(People_ID),\r\n  Company TEXT,\r\n  Money_Requested REAL,\r\n  Investor TEXT\r\n);\n\n", "input": "How many entrepreneurs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM entrepreneur;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What is Astrid Gruber's email and phone number?", "output": "```gerenated SQL\n-- SQL: SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all tracks that are on playlists titled Movies?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id = t2.track_id JOIN playlists as t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of all tracks in the playlists of Movies.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id = t2.track_id JOIN playlists as t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What are the first and last names of the customers with the 10 cheapest invoices?", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY total LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What is the number of invoices and total money billed in them from CA?", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" AND t3.name = \"MPEG audio file\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "How many customers does Steve Johnson support?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employees as t1 JOIN customers as t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "How many employees who are IT staff are from each city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What is the name of the album that has the track Ball to the Wall?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t2.name = \"Balls to the Wall\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the different names of the genres?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM genres;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What country does Roberto Almeida live?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many orders does Lucas Mancini has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List every album's title.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "How many invoices were billed from each state?", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `invoice_lines` (\r\n  id INTEGER PRIMARY KEY,\r\n  invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id),\r\n  unit_price NUMERIC(10,2),\r\n  quantity INTEGER\r\n);\n\n", "input": "List all tracks bought by customer Daan Peeters.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN invoice_lines as t2 ON t1.id = t2.track_id JOIN invoices as t3 ON t3.id = t2.invoice_id JOIN customers as t4 ON t4.id = t3.customer_id WHERE t4.first_name = \"Daan\" AND t4.last_name = \"Peeters\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "List the number of invoices and the invoice total from California.", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List name of all tracks in Balls to the Wall.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "List the number of invoices from Chicago, IL.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is employee Nancy Edwards's phone number?", "output": "```gerenated SQL\n-- SQL: SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What is the total amount of money spent by Lucas Mancini?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What is the name of all tracks in the album named Balls to the Wall?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many customers are from California?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers WHERE state = \"CA\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all the playlists?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM playlists;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "List top 10 employee work longest in the company. List employee's first and last name.", "output": "```gerenated SQL\n-- SQL: SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the first and last name of the employee who reports to Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name , t2.last_name FROM employees as t1 JOIN employees as t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all Rock tracks that are stored on MPEG audio files?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" AND t3.name = \"MPEG audio file\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "List the name of tracks belongs to genre Rock or genre Jazz.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\" OR t1.name = \"Jazz\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "Find the number of employees whose title is IT Staff from each city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "Eduardo Martins is a customer at which company?", "output": "```gerenated SQL\n-- SQL: SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List all different genre types.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM genres;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the count of customers that Steve Johnson supports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employees as t1 JOIN customers as t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the the phone number of Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all the media types?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM media_types;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "How many tracks are in each genre?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id GROUP BY t1.name;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How much money did Lucas Mancini spend?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What are the titles of all the albums alphabetically ascending?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums ORDER BY title;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "How many employees are living in Canada?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employees WHERE country = \"Canada\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What are the titles of all the Aerosmith albums?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = \"Aerosmith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "In which country does Roberto Almeida?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "How many employees live in Canada?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employees WHERE country = \"Canada\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "How long does track Fast As a Shark has?", "output": "```gerenated SQL\n-- SQL: SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the states with the most invoices?", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the names of the countries and average invoice size of the top countries by size?", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "find the full name of employees who report to Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name , t2.last_name FROM employees as t1 JOIN employees as t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name ,  SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY SUM(t2.total) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' EXCEPT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What is the composer who created the track \"Fast As a Shark\"?", "output": "```gerenated SQL\n-- SQL: SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "Who is the youngest employee in the company? List employee's first and last name.", "output": "```gerenated SQL\n-- SQL: SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "Find number of tracks in each genre?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id GROUP BY t1.name;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "Who is the composer of track Fast As a Shark?", "output": "```gerenated SQL\n-- SQL: SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "How many invoices were billed from Chicago, IL?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List title of albums have the number of tracks greater than 10.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT(t1.id)  >  10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What is the name of tracks whose genre is Rock?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "Find the full name of employee who supported the most number of customers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name , t1.last_name FROM employees as t1 JOIN customers as t2 ON t1.id  =  t2.support_rep_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What are the first and last names of the 5 customers who purchased something most recently?", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY t2.invoice_date DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "List the top 5 genres by number of tracks. List genres name and total tracks.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM genres as t1 JOIN tracks as t2 ON t2.genre_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What are the names of the tracks that are Rock or Jazz songs?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\" OR t1.name = \"Jazz\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List Aerosmith's albums.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = \"Aerosmith\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name ,  COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List every album whose title starts with A in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name ,  SUM(t2.total) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY SUM(t2.total) DESC LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "List the state in the US with the most invoices.", "output": "```gerenated SQL\n-- SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many orders does Luca Mancini have in his invoices?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is Nancy Edwards's address?", "output": "```gerenated SQL\n-- SQL: SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "How many albums does Billy Cobham has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM albums as t1 JOIN artists as t2 ON  t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "List the customers first and last name of 10 least expensive invoices.", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY total LIMIT 10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "Find the name of tracks which are in both Movies and music playlists.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' INTERSECT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the title, phone and hire date of Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of all playlist.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM playlists;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `invoice_lines` (\r\n  id INTEGER PRIMARY KEY,\r\n  invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id),\r\n  unit_price NUMERIC(10,2),\r\n  quantity INTEGER\r\n);\n\n", "input": "What are the tracks that Dean Peeters bought?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN invoice_lines as t2 ON t1.id = t2.track_id JOIN invoices as t3 ON t3.id = t2.invoice_id JOIN customers as t4 ON t4.id = t3.customer_id WHERE t4.first_name = \"Daan\" AND t4.last_name = \"Peeters\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name , t2.last_name ,  COUNT(t1.reports_to) FROM employees as t1 JOIN employees as t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY COUNT(t1.reports_to) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\n", "input": "What are the names of all playlists that have more than 100 tracks?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM playlist_tracks as t1 JOIN playlists as t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING COUNT(t1.track_id)  >  100;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "List total amount of  invoice from Chicago, IL.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What is the unit price of the tune \"Fast As a Shark\"?", "output": "```gerenated SQL\n-- SQL: SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What is the address of employee Nancy Edwards?", "output": "```gerenated SQL\n-- SQL: SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What are the titles of all the albums?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "How much is the track Fast As a Shark?", "output": "```gerenated SQL\n-- SQL: SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What is the email and phone number of Astrid Gruber the customer?", "output": "```gerenated SQL\n-- SQL: SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\n", "input": "What is the name of all tracks in the Rock genre?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `playlist_tracks` (\r\n  playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id),\r\n  track_id INTEGER PRIMARY KEY REFERENCES tracks(id)\r\n);\n\nCREATE TABLE `playlists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "Find the name of tracks which are in Movies playlist but not in music playlist.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Movies' EXCEPT SELECT t1.name FROM tracks as t1 JOIN playlist_tracks as t2 ON t1.id  =  t2.track_id JOIN playlists as t3 ON t2.playlist_id  =  t3.id WHERE t3.name  =  'Music';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many customers live in Prague city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers WHERE city = \"Prague\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY t2.invoice_date DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many customers live in the city of Prague?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers WHERE city = \"Prague\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genres` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\nCREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "How many customers in state of CA?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM customers WHERE state = \"CA\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What are the first and last names of all the employees and how many people report to them?", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name , t2.last_name ,  COUNT(t1.reports_to) FROM employees as t1 JOIN employees as t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY COUNT(t1.reports_to) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\nCREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List the name of albums that are released by aritist whose name has 'Led'", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM artists as t1 JOIN albums as t2 ON t1.id  =  t2.artist_id WHERE t1.name LIKE '%Led%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\nCREATE TABLE `artists` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM artists as t1 JOIN albums as t2 ON t1.id  =  t2.artist_id WHERE t1.name LIKE '%Led%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employees` (\r\n  id INTEGER PRIMARY KEY,\r\n  last_name VARCHAR(20),\r\n  first_name VARCHAR(20),\r\n  title VARCHAR(30),\r\n  reports_to INTEGER PRIMARY KEY REFERENCES employees(id),\r\n  birth_date TIMESTAMP,\r\n  hire_date TIMESTAMP,\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60)\r\n);\n\n", "input": "What si the youngest employee's first and last name?", "output": "```gerenated SQL\n-- SQL: SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `invoices` (\r\n  id INTEGER PRIMARY KEY,\r\n  customer_id INTEGER PRIMARY KEY REFERENCES customers(id),\r\n  invoice_date TIMESTAMP,\r\n  billing_address VARCHAR(70),\r\n  billing_city VARCHAR(40),\r\n  billing_state VARCHAR(40),\r\n  billing_country VARCHAR(40),\r\n  billing_postal_code VARCHAR(10),\r\n  total NUMERIC(10,2)\r\n);\n\n", "input": "What are the top 5 countries by number of invoices and how many do they have?", "output": "```gerenated SQL\n-- SQL: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `media_types` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(120)\r\n);\n\n", "input": "List all media types.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM media_types;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "What is the company where Eduardo Martins is a customer?", "output": "```gerenated SQL\n-- SQL: SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What are the titles of all albums that start with A in alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "What are the names of the albums that have more than 10 tracks?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT(t1.id)  >  10;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `albums` (\r\n  id INTEGER PRIMARY KEY,\r\n  title VARCHAR(160),\r\n  artist_id INTEGER PRIMARY KEY REFERENCES artists(id)\r\n);\n\n", "input": "List every album ordered by album title in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM albums ORDER BY title;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What is the average price range of hotels for each each star rating code?", "output": "```gerenated SQL\n-- SQL: SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the transportation method most people choose to get to tourist attractions.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attraction_Features` (\r\n  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)\r\n);\n\nCREATE TABLE `Features` (\r\n  Feature_ID INTEGER,\r\n  Feature_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find all the locations whose names contain the word \"film\".", "output": "```gerenated SQL\n-- SQL: SELECT location_name FROM locations WHERE location_name LIKE \"%film%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the details and star ratings of the three hotels with the lowest price ranges?", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the average prices of hotels grouped by their pet policy.", "output": "```gerenated SQL\n-- SQL: SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Attraction_Types` (\r\n  Attraction_Type_Code CHAR(15) PRIMARY KEY,\r\n  Attraction_Type_Description VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the description and code of the attraction type most tourist attractions belong to.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price of hotels for different pet policy.", "output": "```gerenated SQL\n-- SQL: SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Museums` (\r\n  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Museum_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details and opening hours of the museums?", "output": "```gerenated SQL\n-- SQL: SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Count the number of distinct names associated with the photos.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM photos;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the address of the location named \"UK Gallery\".", "output": "```gerenated SQL\n-- SQL: SELECT address FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  \"game1\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Royal_Family` (\r\n  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Royal_Family_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "output": "```gerenated SQL\n-- SQL: SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which location names contain the word \"film\"?", "output": "```gerenated SQL\n-- SQL: SELECT location_name FROM locations WHERE location_name LIKE \"%film%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Shops` (\r\n  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Shop_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the details of the shops that can be reached by walk.", "output": "```gerenated SQL\n-- SQL: SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions are visited at least twice? Give me their names and ids.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Marcelle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Find the total number of available hotels.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Shops` (\r\n  Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Shop_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the shops that can be accessed by walk?", "output": "```gerenated SQL\n-- SQL: SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and star rating of each hotel and sort them in increasing order of price.", "output": "```gerenated SQL\n-- SQL: SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Tell me the price ranges for all the hotels.", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and details of all the staff members.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  other_details FROM staff;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Find the visit date and details of the tourist whose detail is 'Vincent'", "output": "```gerenated SQL\n-- SQL: SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM staff as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"US museum\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "How many available hotels are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM hotels;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"254 Ottilie Junction\" OR t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Street_Markets` (\r\n  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Market_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the details of all the markets that are accessible by walk or bus.", "output": "```gerenated SQL\n-- SQL: SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\" OR  t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and ids of tourist attractions that are visited at least two times.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"254 Ottilie Junction\" OR t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"film festival\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and ids of the tourist attractions that are visited at most once?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the details and star ratings of the 3 least expensive hotels.", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details ,  star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Find all the distinct visit dates.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT visit_date FROM visits;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price range of hotels that have 5 star ratings and allow pets.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the details of the top 3 most expensive hotels.", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show all distinct location names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location_name FROM locations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the three most expensive hotels?", "output": "```gerenated SQL\n-- SQL: SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions that can be accessed by bus?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM tourist_attractions WHERE how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "How many distinct names are associated with all the photos?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM photos;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.description FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t2.name  =  \"film festival\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM tourist_attractions WHERE how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Hotel_Star_Ratings` (\r\n  star_rating_code CHAR(15) PRIMARY KEY,\r\n  star_rating_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Give me the star rating descriptions of the hotels that cost more than 10000.", "output": "```gerenated SQL\n-- SQL: SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "output": "```gerenated SQL\n-- SQL: SELECT t2.visit_date ,  t2.visit_details FROM visitors as t1 JOIN visits as t2 ON t1.tourist_id  =  t2.tourist_id WHERE t1.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  \"bus\" OR how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Museums` (\r\n  Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Museum_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Give me the detail and opening hour for each museum.", "output": "```gerenated SQL\n-- SQL: SELECT t1.museum_details ,  t2.opening_hours FROM museums as t1 JOIN tourist_attractions as t2 ON t1.museum_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Return the detail of the location named \"UK Gallery\".", "output": "```gerenated SQL\n-- SQL: SELECT other_details FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Staff` (\r\n  Staff_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(40),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name and detail of each staff member?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  other_details FROM staff;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  opening_hours FROM tourist_attractions WHERE how_to_get_there  =  \"bus\" OR how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the distinct location names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location_name FROM locations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" OR t2.tourist_details  =  \"Vivian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"660 Shea Crescent\" OR t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attraction_Features` (\r\n  Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID)\r\n);\n\nCREATE TABLE `Features` (\r\n  Feature_ID INTEGER,\r\n  Feature_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'park' UNION SELECT t1.name FROM tourist_attractions as t1 JOIN tourist_attraction_features as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN features as t3 ON t2.feature_id  =  t3.feature_id WHERE t3.feature_details  =  'shopping';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the average price of hotels for each star rating code.", "output": "```gerenated SQL\n-- SQL: SELECT star_rating_code ,  AVG(price_range) FROM hotels GROUP BY star_rating_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Hotel_Star_Ratings` (\r\n  star_rating_code CHAR(15) PRIMARY KEY,\r\n  star_rating_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the star rating descriptions of the hotels with price above 10000?", "output": "```gerenated SQL\n-- SQL: SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Royal_Family` (\r\n  Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Royal_Family_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details and ways to get to tourist attractions related to royal family?", "output": "```gerenated SQL\n-- SQL: SELECT t1.royal_family_details ,  t2.how_to_get_there FROM royal_family as t1 JOIN tourist_attractions as t2 ON t1.royal_family_id  =  t2.tourist_attraction_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "Show the price ranges of hotels with 5 star ratings.", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels WHERE star_rating_code  =  \"5\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "How many tourists did not make any visit?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What are the price ranges of five star hotels?", "output": "```gerenated SQL\n-- SQL: SELECT price_range FROM hotels WHERE star_rating_code  =  \"5\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Hotels` (\r\n  hotel_id INTEGER,\r\n  star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code),\r\n  pets_allowed_yn CHAR(1),\r\n  price_range REAL,\r\n  other_hotel_details VARCHAR(255)\r\n);\n\n", "input": "What is the average price range of five star hotels that allow pets?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_range) FROM hotels WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Which transportation method is used the most often to get to tourist attractions?", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM locations as t1 JOIN tourist_attractions as t2 ON t1.location_id  =  t2.location_id WHERE t1.address  =  \"660 Shea Crescent\" OR t2.how_to_get_there  =  \"walk\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  \"Vincent\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "What are the distinct visit dates?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT visit_date FROM visits;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Street_Markets` (\r\n  Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Market_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What are the details of the markets that can be accessed by walk or bus?", "output": "```gerenated SQL\n-- SQL: SELECT t1.market_details FROM street_markets as t1 JOIN tourist_attractions as t2 ON t1.market_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\" OR  t2.how_to_get_there  =  \"bus\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\n", "input": "Show details of all visitors.", "output": "```gerenated SQL\n-- SQL: SELECT tourist_details FROM visitors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Photos` (\r\n  Photo_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Filename VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  \"game1\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "What are the names of the tourist attractions Vincent and Marcelle visit?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Marcelle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\nCREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "Show the names and ids of tourist attractions that are visited at most once.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  <=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Visitors` (\r\n  Tourist_ID INTEGER PRIMARY KEY,\r\n  Tourist_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Visits` (\r\n  Visit_ID INTEGER,\r\n  Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID),\r\n  Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID),\r\n  Visit_Date DATETIME,\r\n  Visit_Details VARCHAR(40)\r\n);\n\n", "input": "Count the number of tourists who did not visit any place.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Locations` (\r\n  Location_ID INTEGER,\r\n  Location_Name VARCHAR(255),\r\n  Address VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "What is the detail of the location UK Gallery?", "output": "```gerenated SQL\n-- SQL: SELECT other_details FROM locations WHERE location_name  =  \"UK Gallery\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Tourist_Attractions` (\r\n  Tourist_Attraction_ID INTEGER,\r\n  Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),\r\n  Location_ID INTEGER REFERENCES Locations(Location_ID),\r\n  How_to_Get_There VARCHAR(255),\r\n  Name VARCHAR(255),\r\n  Description VARCHAR(255),\r\n  Opening_Hours VARCHAR(255),\r\n  Other_Details VARCHAR(255)\r\n);\n\n", "input": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "output": "```gerenated SQL\n-- SQL: SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.distance  >  5000 GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show names for all aircrafts with distances more than the average.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM aircraft WHERE distance  >  (SELECT AVG(distance) FROM aircraft);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the destinations and number of flights to each one?", "output": "```gerenated SQL\n-- SQL: SELECT destination ,  COUNT(*) FROM flight GROUP BY destination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the numbers of all flights coming from Los Angeles?", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight WHERE origin  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "For each origin, how many flights came from there?", "output": "```gerenated SQL\n-- SQL: SELECT origin ,  COUNT(*) FROM flight GROUP BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show ids for all aircrafts with more than 1000 distance.", "output": "```gerenated SQL\n-- SQL: SELECT aid FROM aircraft WHERE distance  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the name of the 3 employees who get paid the least?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee ORDER BY salary ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the name and salary of all employees in order of salary?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  salary FROM employee ORDER BY salary;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show aircraft names and number of flights for each aircraft.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the id and salary of the employee named Mark Young?", "output": "```gerenated SQL\n-- SQL: SELECT eid ,  salary FROM employee WHERE name  =  'Mark Young';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show names for all employees who have certificate of Boeing 737-800.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "what is the salary and name of the employee who has the most number of aircraft certificates?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.salary FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the number of flights?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM flight;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "How many employees have salary between 100000 and 200000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the name and distance for aircraft with id 12?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  distance FROM aircraft WHERE aid  =  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the id of every employee who has at least a salary of  100000?", "output": "```gerenated SQL\n-- SQL: SELECT eid FROM employee WHERE salary  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show names for all employees with salary more than the average.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee WHERE salary  >  (SELECT AVG(salary) FROM employee);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is average and maximum salary of all employees.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(salary) ,  MAX(salary) FROM employee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show the name of aircraft which fewest people have its certificate.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid GROUP BY t1.aid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the count of distinct employees with certificates?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT eid) FROM certificate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show names for all aircraft with at least two flights.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid HAVING COUNT(*)  >= 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show the id and name of the employee with maximum salary.", "output": "```gerenated SQL\n-- SQL: SELECT eid ,  name FROM employee ORDER BY salary DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the names of the aircraft that the least people are certified to fly?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid GROUP BY t1.aid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show ids for all employees with at least 100000 salary.", "output": "```gerenated SQL\n-- SQL: SELECT eid FROM employee WHERE salary  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee EXCEPT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the names for all aircrafts with at least 2 flights?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid HAVING COUNT(*)  >= 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the id and name of the aircraft that can cover the maximum distance?", "output": "```gerenated SQL\n-- SQL: SELECT aid ,  name FROM aircraft ORDER BY distance DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the minimum, average, and maximum distance of all aircrafts.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(distance) ,  AVG(distance) ,  MAX(distance) FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the names and distances for all airplanes?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  distance FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the average distance and average price for flights from Los Angeles.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(distance) ,  AVG(price) FROM flight WHERE origin  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the numbers of all flights that can cover a distance of more than 2000?", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight WHERE distance  >  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the numbers of the shortest flights?", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight ORDER BY distance ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What place has the most flights coming from there?", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show all destinations and the number of flights to each destination.", "output": "```gerenated SQL\n-- SQL: SELECT destination ,  COUNT(*) FROM flight GROUP BY destination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Which origin has most number of flights?", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show the name of employees with three lowest salaries.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee ORDER BY salary ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the flight number and its distance for the one with the maximum price?", "output": "```gerenated SQL\n-- SQL: SELECT flno ,  distance FROM flight ORDER BY price DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the names of all employees who have a salary higher than average?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee WHERE salary  >  (SELECT AVG(salary) FROM employee);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the name of the aircraft that was on flight number 99?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t1.flno  =  99;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "output": "```gerenated SQL\n-- SQL: SELECT flno ,  origin ,  destination FROM flight ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show names for all aircrafts of which John Williams has certificates.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t1.name  =  \"John Williams\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show names for all employees who do not have certificate of Boeing 737-800.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM employee EXCEPT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show ids for all employees who don't have a certificate.", "output": "```gerenated SQL\n-- SQL: SELECT eid FROM employee EXCEPT SELECT eid FROM certificate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show flight number for all flights with more than 2000 distance.", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight WHERE distance  >  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "How many aircrafts have distance between 1000 and 5000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the count of aircrafts that have a distance between 1000 and 5000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the number of employees that have a salary between 100000 and 200000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the average and largest salary of all employees?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(salary) ,  MAX(salary) FROM employee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show the flight number and distance of the flight with maximum price.", "output": "```gerenated SQL\n-- SQL: SELECT flno ,  distance FROM flight ORDER BY price DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "output": "```gerenated SQL\n-- SQL: SELECT departure_date ,  arrival_date FROM flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the average price for flights from Los Angeles to Honolulu.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\" INTERSECT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Airbus A340-300\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.distance  >  5000 GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the flight numbers for the aircraft Airbus A340-300?", "output": "```gerenated SQL\n-- SQL: SELECT t1.flno FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t2.name  =  \"Airbus A340-300\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the name and salary of the employee with the id 242518965?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  salary FROM employee WHERE eid  =  242518965;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "How many employees do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM employee;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the ids of all employees that don't have certificates?", "output": "```gerenated SQL\n-- SQL: SELECT eid FROM employee EXCEPT SELECT eid FROM certificate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the name and distance for the aircraft that has an id of 12?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  distance FROM aircraft WHERE aid  =  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show origins of all flights with destination Honolulu.", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM flight WHERE destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Return the minimum, average and maximum distances traveled across all aircrafts.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(distance) ,  AVG(distance) ,  MAX(distance) FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\n", "input": "How many employees have certificate.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT eid) FROM certificate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid WHERE t2.distance  >  5000 GROUP BY t1.aid ORDER BY COUNT(*)  >=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "output": "```gerenated SQL\n-- SQL: SELECT flno ,  origin ,  destination FROM flight ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What are the departure and arrival dates of all flights from LA to Honolulu?", "output": "```gerenated SQL\n-- SQL: SELECT departure_date ,  arrival_date FROM flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the salaray and name of the employee that is certified to fly the most planes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.salary FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid GROUP BY t1.eid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show name and distance for all aircrafts.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  distance FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show the name of aircrafts with top three lowest distances.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM aircraft ORDER BY distance LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "How many aircrafts do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show all origins and the number of flights from each origin.", "output": "```gerenated SQL\n-- SQL: SELECT origin ,  COUNT(*) FROM flight GROUP BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "Show all flight numbers with aircraft Airbus A340-300.", "output": "```gerenated SQL\n-- SQL: SELECT t1.flno FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid WHERE t2.name  =  \"Airbus A340-300\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the names of all aircrafts that can cover more distances than average?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM aircraft WHERE distance  >  (SELECT AVG(distance) FROM aircraft);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "How many flights do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM flight;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the average distance and price for all flights from LA?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(distance) ,  AVG(price) FROM flight WHERE origin  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid WHERE t2.distance  >  5000 GROUP BY t1.aid ORDER BY COUNT(*)  >=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the average price for flights from LA to Honolulu?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What is the name and salary for employee with id 242518965?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  salary FROM employee WHERE eid  =  242518965;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the aircrafts with top 3 shortest lengthes? List their names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM aircraft ORDER BY distance LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "How many aircrafts exist in the database?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM aircraft;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "What is the origin and destination for all flights whose price is higher than 300?", "output": "```gerenated SQL\n-- SQL: SELECT origin ,  destination FROM flight WHERE price  >  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show all flight number from Los Angeles.", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight WHERE origin  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What is the name of each aircraft and how many flights does each one complete?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM flight as t1 JOIN aircraft as t2 ON t1.aid  =  t2.aid GROUP BY t1.aid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show the flight number of flights with three lowest distances.", "output": "```gerenated SQL\n-- SQL: SELECT flno FROM flight ORDER BY distance ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `certificate` (\r\n  eid number(9,0) PRIMARY KEY REFERENCES employee(eid),\r\n  aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid)\r\n);\n\nCREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\nCREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t1.name  =  \"John Williams\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `employee` (\r\n  eid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  salary number(10,2)\r\n);\n\n", "input": "Show name and salary for all employees sorted by salary.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  salary FROM employee ORDER BY salary;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `aircraft` (\r\n  aid number(9,0) PRIMARY KEY,\r\n  name varchar2(30),\r\n  distance number(6,0)\r\n);\n\n", "input": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "output": "```gerenated SQL\n-- SQL: SELECT aid FROM aircraft WHERE distance  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `flight` (\r\n  flno number(4,0) PRIMARY KEY,\r\n  origin varchar2(20),\r\n  destination varchar2(20),\r\n  distance number(6,0),\r\n  departure_date date,\r\n  arrival_date date,\r\n  price number(7,2),\r\n  aid number(9,0) REFERENCES aircraft(aid)\r\n);\n\n", "input": "Show origin and destination for flights with price higher than 300.", "output": "```gerenated SQL\n-- SQL: SELECT origin ,  destination FROM flight WHERE price  >  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the biggest rivers in texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers do not run through tennessee", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states does the ohio run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the density of wyoming", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the combined area of all 50 states", "output": "```gerenated SQL\n-- SQL: SELECT SUM(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state borders kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what states capital is salem", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE capital  =  \"salem\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river flows through the most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest city in usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states are in the usa", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the capital cities of the states which border texas", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the elevation of the highest point in the usa", "output": "```gerenated SQL\n-- SQL: SELECT MAX(highest_elevation) FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people are in the state of california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the average population of the us by state", "output": "```gerenated SQL\n-- SQL: SELECT AVG(population) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states that border states that border florida", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which is the lowest point of the states that the mississippi runs through", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the biggest city in the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the state with the longest river", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the smallest area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state border kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which state has the highest elevation", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the most population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point in usa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the city in wyoming with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the elevation of death valley", "output": "```gerenated SQL\n-- SQL: SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities of the united states", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the largest density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "in which state does the highest point in usa exist", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what capital has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "salem is the capital of which state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE capital  =  \"salem\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river traverses the most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states have no bordering state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the most populous state in the us", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the highest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states does the missouri river flow through", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(traverse) FROM river WHERE river_name  =  \"missouri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states does the ohio river pass through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how many states have a higher point than the highest point of the state with the largest capital city in the us", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city ) ) ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states have a city named springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what are the cities of the state with the highest point", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the state with the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT t2.highest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "give me all the states of usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of states through which the mississippi river runs", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "number of states bordering kentucky", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest city in wyoming", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the lowest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the height of the highest point in the usa", "output": "```gerenated SQL\n-- SQL: SELECT MAX(highest_elevation) FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest elevation in pennsylvania", "output": "```gerenated SQL\n-- SQL: SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the population densities of each us state", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border kentucky", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the length of the rio grande river", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the highest point in states bordering colorado", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the tallest mountain in the united states", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what major cities are located in kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states does the ohio run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "give me the cities which are in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest city of wyoming", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state is the smallest", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many citizens in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest of the state that the rio grande runs through", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of states through which the mississippi river run", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the adjacent state of kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the most people", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high is the highest point in america", "output": "```gerenated SQL\n-- SQL: SELECT MAX(highest_elevation) FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point of the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT t2.lowest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the capitals of the states that border texas", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many inhabitants does boulder have", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest state in usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the most populated capital in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the height of the highest mountain in texas", "output": "```gerenated SQL\n-- SQL: SELECT MAX(DISTINCT highest_elevation) FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest city in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the size of new mexico", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what city has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the river that cross over illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many major cities are in texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest state that the mississippi river runs through", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the state with the highest elevation in the united states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the smallest urban population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city GROUP BY state_name ORDER BY SUM(population) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest city in states that border california", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state is the largest in population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states does the shortest river run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high is the highest point of delaware", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the largest city", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the most populous city", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "name the 50 capitals in the usa", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT capital FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people stay in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest mountain in texas", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is the most populated area of wyoming", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which states have points higher than the highest point in colorado", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers are there in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the capital of the largest state", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many major cities are there in texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what state has highest elevation", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many rivers are in the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t2.river_name) FROM river as t2 JOIN state as t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states have rivers running through them", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the rio grande river", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "name the rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest capital", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the largest area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of states that have cities named durham", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN city as t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states have cities named springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest city of the smallest state in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities are there in usa", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what wyoming city has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers run through states bordering alabama", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the city with the most population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states have a major city named austin", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "where is the ohio river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states are next to the ohio", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the smallest state that borders texas", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state that borders oklahoma has the highest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states contain at least one major rivers", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  >  750;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what rivers run through the state with the lowest point in the usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the size of the capital of texas", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the highest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest capital city in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "states bordering kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what city has the most people", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major rivers in the us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many major cities are there", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE population  >  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the cities in states through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT t2.highest_point FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states have rivers named ohio", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is rio grande", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest elevation in the united states", "output": "```gerenated SQL\n-- SQL: SELECT MAX(highest_elevation) FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border the mississippi river", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT border) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers are in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the largest capital", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what cities in wyoming have the highest populations", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the city with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in texas", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the largest density in usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in the state with the most major cities", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT(city_name) DESC LIMIT 1 ) ORDER BY length DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of states through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which is the shortest river", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state capital has the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the state with capital des moines", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what state contains the highest point in the us", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of states through which the mississippi run", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the capital of the state with the highest elevation", "output": "```gerenated SQL\n-- SQL: SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what states have a capital that is the highest point in the state", "output": "```gerenated SQL\n-- SQL: SELECT t1.state_name FROM state as t1 JOIN highlow as t2 ON t1.capital  =  t2.highest_point;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the states through which the longest river runs", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people are there in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the sparsest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the lowest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities in the states through which the major river in virginia runs", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"virginia\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point in iowa in meters", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what are the highest points of all the states", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what city in the united states has the highest population density", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the capital salem", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE capital  =  \"salem\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the least population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the city springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "name the major rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point of the usa", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the longest river in the largest state", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state is the city springfield located in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "number of people in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which capitals are in the states that border texas", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in america", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the longest river", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT traverse FROM river WHERE length  =  ( SELECT MAX(DISTINCT length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the state with the most inhabitants", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities does the usa have", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states does not border texas", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the largest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many square kilometers in the us", "output": "```gerenated SQL\n-- SQL: SELECT SUM(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which river traverses most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the lowest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the names of the major cities in kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "name the states which have no surrounding states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in the us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the smallest city in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is the highest mountain of the united states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states border the state with the smallest area", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what states high point are higher than that of colorado", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest state bordering california", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the smallest area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many major cities are in states bordering nebraska", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the populations of states which border texas", "output": "```gerenated SQL\n-- SQL: SELECT t2.population FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the highest peak in the country", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the most dense state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the total length of all rivers in the usa", "output": "```gerenated SQL\n-- SQL: SELECT SUM(length) FROM river;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the city with the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest elevation in delaware", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point in the state of iowa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest state that borders the state with the highest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "give me the cities in usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people live in the united states", "output": "```gerenated SQL\n-- SQL: SELECT SUM(population) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states does the ohio river run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point of the state with the smallest population density", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how much population does california have", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river runs through the most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest state that borders california", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\n", "input": "name all the lakes of us", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many citizens in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border the most populous state", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where are mountains", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the ohio river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the state texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which is the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population of boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest american city in a state with a river", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.city_name FROM city as t1 JOIN river as t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX(t1.population) FROM river as t2 JOIN city as t1 ON t2.traverse  =  t1.state_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the capitals of states that border texas", "output": "```gerenated SQL\n-- SQL: SELECT t2.capital FROM state as t2 JOIN border_info as t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people live in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density of wyoming", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states does the ohio river go through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest city in wyoming", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "people in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "can you tell me the capital of texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which is the density of the state that the largest river in the united states runs through", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the country", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the greatest density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the us", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the shortest river in the us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "count the states which have elevations lower than what alabama has", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states does the longest river cross", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what cities in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border texas and have a major river", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE length  >  750 );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the biggest state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states border no other states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the maximum elevation of guadalupe peak", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point of iowa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers does idaho have", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the length of the longest river that runs through texas", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what city has the least population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the high points of states surrounding mississippi", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many capitals does rhode island have", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(capital) FROM state WHERE state_name  =  \"rhode island\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the populations of all the major cities in wisconsin", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest river in texas state", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which state has the lowest elevation", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest state in the us", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river runs through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers run through states that border the state with the capital atlanta", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the shortest river in the united states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states does usa have", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the biggest capital city in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river that runs through a state that borders tennessee", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers are called colorado", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE river_name  =  \"colorado\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people live in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the largest state", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the population of california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the shortest river in texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities are there in the us", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "through which states does the ohio flow", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the total area of the usa", "output": "```gerenated SQL\n-- SQL: SELECT SUM(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states in the united states have a city of springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states border the longest river in the usa", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the smallest city in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the most people", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states are there in the usa", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how many rivers are in the state with the highest point.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t1.river_name) FROM highlow as t2 JOIN river as t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the lowest point that borders idaho", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what cities are located in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the length of the longest river in the usa", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the state with the capital albany", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE capital  =  \"albany\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities does texas have", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border the largest state", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest state capital in population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states surround kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river that flows through a state that borders tennessee", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the highest point in the states bordering colorado", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states border kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states which the mississippi runs through", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers flow through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many big cities are in texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "could you tell me what is the highest point in the state of texas", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the united states", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the density of the wyoming", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "name all the rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border on the state whose capital is boston", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the largest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers are in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "give me the states that border kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states does the longest river run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river is the longest one in the united states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "springfield is in what state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states adjoin kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the rivers in the state of illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "show major cities in kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state which the mississippi runs through has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "state the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is largest capital", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river that flows through texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density of the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the combined population of all 50 states", "output": "```gerenated SQL\n-- SQL: SELECT SUM(population) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the smallest average urban population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city GROUP BY state_name ORDER BY AVG(population) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how tall is the highest point in delaware", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many major rivers cross ohio", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE length  >  750 AND traverse  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state is the biggest", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the state with the largest population density", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the shortest river in the usa", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high is guadalupe peak", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people live in the state with the largest population density", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the largest state", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the shortest river", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MIN(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states do ohio river flow through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the most populous state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the most populous state through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the least population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in the state with the capital des moines", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\n", "input": "what are the major lakes in united states", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake WHERE area  >  750;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high are the highest points of all the states", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "where is massachusetts", "output": "```gerenated SQL\n-- SQL: SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the major cities in the largest state", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many citizens live in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which city in wyoming has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the tallest mountain in america", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people reside in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states have a city named springfield", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the highest mountain in the us", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border the state with the smallest area", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest state that borders the state with the lowest point in the usa", "output": "```gerenated SQL\n-- SQL: SELECT t1.state_name FROM highlow as t3 JOIN border_info as t1 ON t3.state_name  =  t1.border JOIN state as t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how tall is guadalupe peak", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states have cities named springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the rio grande", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states that border colorado", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "tell me what cities are in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states in the us does the shortest river run through", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT traverse) FROM river WHERE length  =  ( SELECT MIN(DISTINCT length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the states that the ohio run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state is springfield in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the major cities in kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "through which states does the longest river in texas run", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the state with the highest population density", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which rivers run through the state with the lowest elevation in the usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states have a river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states are there", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the biggest state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are all the rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the lakes in states bordering texas", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "whats the largest city", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest state through which the longest river runs", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers do not run through usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE country_name != \"usa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point of the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT t2.highest_point FROM state as t1 JOIN highlow as t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the populations of the major cities of wisconsin", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how big is new mexico", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the greatest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest city in wyoming by population", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the new mexico state", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states have cities or towns named springfield", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the cities in texas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population of boulder city", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which river runs through the most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers are there in us", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state is mount whitney in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which rivers run through the state with the largest city in the us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "give me the largest state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states do not have rivers", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT state_name) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which us city has the highest population density", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers run through the states that border the state with the capital atlanta", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the longest river in the usa", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the capital of the state with the highest point", "output": "```gerenated SQL\n-- SQL: SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many residents live in california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the capital city in texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\n", "input": "give me the lakes in california", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is mount whitney", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers are in states that border alabama", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "list the states", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the states", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what state has the highest elevation", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how large is new mexico", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the states that border the state with the greatest population", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities in kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is mount whitney located", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is capital of texas", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states have a city called springfield", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the major cities in the smallest state in the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state is salem the capital of", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE capital  =  \"salem\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density in the state with capital austin", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE capital  =  \"austin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high is the highest point in the largest state", "output": "```gerenated SQL\n-- SQL: SELECT t2.highest_elevation FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which of the states bordering oklahoma has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the name of the state with the lowest point", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the largest city in the state with the largest area", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many rivers do not traverse the state with the capital albany", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the largest urban population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city GROUP BY state_name ORDER BY SUM(population) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the largest city in a state that borders california", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the highest points of states surrounding mississippi", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population of the largest state that borders texas", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the highest mountain in us", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which state is the largest city in montana in", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are the rivers of illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in each state whose lowest point is sea level", "output": "```gerenated SQL\n-- SQL: SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the average population per square km in pennsylvania", "output": "```gerenated SQL\n-- SQL: SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\n", "input": "show me all the major lakes in the us", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake WHERE area  >  750;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is capital of the state with the lowest point", "output": "```gerenated SQL\n-- SQL: SELECT t1.capital FROM highlow as t2 JOIN state as t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow ) ;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the sparsest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of the states through which the mississippi run", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people live in the smallest state bordering wyoming", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE population  =  ( SELECT MAX(population) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the smallest state bordering texas", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which state has the highest point", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which river goes through the most states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT(DISTINCT traverse) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the longest river in the state with the highest point", "output": "```gerenated SQL\n-- SQL: SELECT t1.river_name FROM highlow as t2 JOIN river as t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states border the ohio river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point in iowa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "in what state is mount whitney", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many colorado rivers are there", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE river_name  =  \"colorado\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the highest point in delaware in meters", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states are in the united states", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states that border the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT t1.border FROM border_info as t2 JOIN border_info as t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the longest river in texas", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers run through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many people live in the capital of texas", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what state contains the highest point of those the colorado river traverses", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population density of the state with the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT density FROM state WHERE population  =  ( SELECT MIN(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the state with the smallest population density", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities in the state of kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border at least one other state", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT state_name) FROM border_info;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities are there in the united states", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what states border the ohio river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers are in idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers flow through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what river flows through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "in which state is springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the smallest state", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest city in smallest state through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what major rivers run through illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "how many states are there in united states", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what can you tell me about the population of california", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name  =  \"california\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how long is the rio grande river in miles", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"rio grande\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the neighboring states for kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "where is the lowest spot in iowa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state bordering oklahoma has the largest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of the states through which the mississippi river run", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the state that contains the highest point", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the smallest city in alaska", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states have cities named springfield", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(state_name) FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population of seattle washington", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states does the missouri river run through", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(traverse) FROM river WHERE river_name  =  \"missouri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the size of the largest state in the usa", "output": "```gerenated SQL\n-- SQL: SELECT MAX(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states does the missouri run through", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(traverse) FROM river WHERE river_name  =  \"missouri\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest city in the usa", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "which states have points that are higher than the highest point in colorado", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "how high is the highest point in delaware", "output": "```gerenated SQL\n-- SQL: SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "where is the smallest city", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of new mexico in square kilometers", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the state with the lowest point", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state borders kentucky", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many states border colorado and border new mexico", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many cities are there in us", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(city_name) FROM city;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state that borders california is the largest", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers flow through states that border the state with the largest population", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point of all states through which the mississippi river runs through", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what are the populations of the states through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state has the largest city", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point of the us", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of new mexico", "output": "```gerenated SQL\n-- SQL: SELECT area FROM state WHERE state_name  =  \"new mexico\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the biggest river in texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the least populous state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the area of the largest state", "output": "```gerenated SQL\n-- SQL: SELECT MAX(area) FROM state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the smallest state by area", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `lake` (\r\n  lake_name TEXT,\r\n  area double,\r\n  country_name varchar(3),\r\n  state_name TEXT\r\n);\n\n", "input": "name the major lakes in michigan", "output": "```gerenated SQL\n-- SQL: SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which states does the ohio river run through", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in the united states", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the population of the major cities in wisconsin", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "give me the longest river that passes through the us", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities of the us", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the capital of the texas state", "output": "```gerenated SQL\n-- SQL: SELECT capital FROM state WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "where is the lowest point in the us", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the most populated state bordering oklahoma", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the population of the capital of the largest state through which the mississippi runs", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX(t1.area) FROM state as t1 JOIN river as t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which is the longest river in usa", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the length of the colorado river in texas", "output": "```gerenated SQL\n-- SQL: SELECT length FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states border states that the mississippi runs through", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what are the major cities of kansas", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "give me the number of rivers in idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "where is the highest point in texas", "output": "```gerenated SQL\n-- SQL: SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river in the states that border tennessee", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which states border states through which the mississippi traverses", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest state traversed by the rio grande river", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the largest state", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what is the longest river flowing through texas", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what states have towns named springfield", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM city WHERE city_name  =  \"springfield\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "where is the lowest point in iowa", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people live in the biggest city in alaska state", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what is the state with the lowest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MIN(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers run through the states bordering colorado", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how many people lived in boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the highest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "through which states does the ohio run", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE river_name  =  \"ohio\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `highlow` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  highest_elevation TEXT,\r\n  lowest_point TEXT,\r\n  highest_point TEXT,\r\n  lowest_elevation TEXT\r\n);\n\n", "input": "what is the lowest point in the united states", "output": "```gerenated SQL\n-- SQL: SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what state borders the state with the smallest population", "output": "```gerenated SQL\n-- SQL: SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state ) );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "which state has the longest river", "output": "```gerenated SQL\n-- SQL: SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "which state has the biggest population", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\nCREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what rivers flow through states that alabama borders", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mountain` (\r\n  mountain_name TEXT PRIMARY KEY,\r\n  mountain_altitude INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "which is the highest peak not in alaska", "output": "```gerenated SQL\n-- SQL: SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain WHERE state_name != \"alaska\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many rivers are there in idaho", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "how many states are next to major rivers", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT traverse) FROM river WHERE length  >  750;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what cities in wyoming have the highest number of citizens", "output": "```gerenated SQL\n-- SQL: SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `state` (\r\n  state_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  area double,\r\n  country_name varchar(3),\r\n  capital TEXT,\r\n  density double\r\n);\n\n", "input": "what state has the greatest population density", "output": "```gerenated SQL\n-- SQL: SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `river` (\r\n  river_name TEXT PRIMARY KEY,\r\n  length INTEGER,\r\n  country_name varchar(3),\r\n  traverse TEXT REFERENCES state(state_name)\r\n);\n\n", "input": "what are major rivers in illinois", "output": "```gerenated SQL\n-- SQL: SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `border_info` (\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name),\r\n  border TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "what is the number of neighboring states for kentucky", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(border) FROM border_info WHERE state_name  =  \"kentucky\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `city` (\r\n  city_name TEXT PRIMARY KEY,\r\n  population INTEGER,\r\n  country_name varchar(3),\r\n  state_name TEXT PRIMARY KEY REFERENCES state(state_name)\r\n);\n\n", "input": "how big is the city of boulder", "output": "```gerenated SQL\n-- SQL: SELECT population FROM city WHERE city_name  =  \"boulder\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Give the names of wrestlers and their elimination moves.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT reign FROM wrestler WHERE location != \"Tokyo , Japan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Please show the most common reigns of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "output": "```gerenated SQL\n-- SQL: SELECT elimination_move FROM elimination WHERE team  =  \"team Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show times of elimination of wrestlers with days held more than 50.", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What is the number of distinct teams that suffer elimination?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT team) FROM elimination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Return the elimination movies of wrestlers on Team Orton.", "output": "```gerenated SQL\n-- SQL: SELECT elimination_move FROM elimination WHERE team  =  \"team Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the names of wrestlers and the elimination moves?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show teams that have suffered more than three eliminations.", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the names of wrestlers who have never been eliminated?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show the times of elimination by \"Punk\" or \"Orton\".", "output": "```gerenated SQL\n-- SQL: SELECT time FROM elimination WHERE eliminated_by  =  \"Punk\" OR eliminated_by  =  \"Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Count the number of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "List the names of wrestlers and the teams in elimination in descending order of days held.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "List the time of elimination of the wrestlers with largest days held.", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "output": "```gerenated SQL\n-- SQL: SELECT time FROM elimination WHERE eliminated_by  =  \"Punk\" OR eliminated_by  =  \"Orton\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "How many different teams have had eliminated wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT team) FROM elimination;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "How many wrestlers are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination WHERE eliminated_by  =  \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  \"Benjamin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of the wrestlers, ordered descending by days held?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the reigns and days held of all wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT reign ,  days_held FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Which teams had more than 3 eliminations?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What is the time of elimination for the wrestler with the most days held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Which reign is the most common among wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Return the name of the wrestler who had the lowest number of days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Show the reign and days held of wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT reign ,  days_held FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "What are the names of wrestlers days held less than 100?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE days_held  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the times of elimination for wrestlers with over 50 days held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id WHERE t2.days_held  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "Show different teams in eliminations and the number of eliminations from each team.", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM elimination GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "List the names of wrestlers in descending order of days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler ORDER BY days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT reign FROM wrestler WHERE location != \"Tokyo , Japan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Give the names and locations of all wrestlers.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM wrestler;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Which locations are shared by more than two wrestlers?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "List the names of wrestlers that have not been eliminated.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "How many eliminations did each team have?", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM elimination GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\n", "input": "Return the names of wrestlers with fewer than 100 days held.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wrestler WHERE days_held  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wrestler` (\r\n  Wrestler_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Reign TEXT,\r\n  Days_held TEXT,\r\n  Location TEXT,\r\n  Event TEXT\r\n);\n\nCREATE TABLE `Elimination` (\r\n  Elimination_ID TEXT PRIMARY KEY,\r\n  Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID),\r\n  Team TEXT,\r\n  Eliminated_By TEXT,\r\n  Elimination_Move TEXT,\r\n  Time TEXT\r\n);\n\n", "input": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.team FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the business with the most number of reviews in April", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.text) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many reviews has Adrienne written ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all breweries in Los Angeles", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "What is the average rating of reviews written in year 2014 ?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) FROM review WHERE year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find all the restaurant in Pennsylvania", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Give me all the Moroccan restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many reviews does \" Acacia Cafe \" have ?", "output": "```gerenated SQL\n-- SQL: SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all reviews for businesses rated 2.5", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "What is the total likes on tips from Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.likes) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find the users who have given tips on Pet Groomers", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN tip as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all Italian restaurant in the Meadowood neighbourhood of Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN category as t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all reviews about \" Kabob Palace \" in year 2014", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "How many tips have been written in 2015", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text) FROM tip WHERE year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find the business which has the most number of categories", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT(DISTINCT t2.category_name) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of escape games in \" Madison \" ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find all cities which has a \" Taj Mahal \" restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Return me the number of tips that are written by Michelle .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find the number of users called Michelle", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM user WHERE name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many businesses has Michelle reviewed in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the total checkins in \" Brighton Heights \" neighbourhood", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t3.count) FROM checkin as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant Seafood in Los Angeles", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "list all the businesses which Niloofar rated 5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many tips has Michelle written in April", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the cities of businesses rated below 1.5", "output": "```gerenated SQL\n-- SQL: SELECT city FROM business WHERE rating  <  1.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all tips for \" Cafe Zinho \" in Texas .", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "what is the average rating given in Michelle reviews", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.rating) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant reviewed by Patrick in \" Dallas \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM neighbourhood as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many users have reviewed Irish Pub in Dallas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find the number of escape games in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many escape games exist in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Dallas restaurant with a rating above 4.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Return me the number of cities that has \" Panda Express \" .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM business WHERE name  =  \"Panda Express\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all users who reviewed businesses that are restaurant .", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all states in which there is a Whataburger", "output": "```gerenated SQL\n-- SQL: SELECT state FROM business WHERE name  =  \"Whataburger\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "find the total checkins in Italian Delis in each state on Sunday", "output": "```gerenated SQL\n-- SQL: SELECT t1.state  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Return me the number of tips that are written by Michelle in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "List all user ids with name Michelle", "output": "```gerenated SQL\n-- SQL: SELECT user_id FROM user WHERE name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.text) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many Target are there in \" Los Angeles \" ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Bars reviewed by Patrick", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "find the number of restaurant rated more than 3.5", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all breweries in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.text) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id JOIN review as t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the number of tips written in each month", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text)  ,  month FROM tip GROUP BY month;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many reviews has Niloofar written in 2015", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all the businesses with more than 4.5 stars", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  >  4.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Mexican restaurant in Dallas with at least 3.5 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all the restaurant rated more than 3.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all cities which has a \" Taj Mahal \" .", "output": "```gerenated SQL\n-- SQL: SELECT city FROM business WHERE name  =  \"Taj Mahal\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all users who have written tips about businesses in Dallas", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all reviews by Patrick with a rating above 4", "output": "```gerenated SQL\n-- SQL: SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Bars in Dallas have a rating above 3.5 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List the addresses of all Walmart in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all Apple Store in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Mexican restaurant in Dallas with a rating above 3.5", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "list all the businesses which have a review by Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all the reviews by Michelle for Italian restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t4.text FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN review as t4 ON t4.business_id  =  t1.business_id JOIN user as t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many escape games are there in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all the neighbourhoods with Italian restaurant in Madison", "output": "```gerenated SQL\n-- SQL: SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Return me the number of businesses that are restaurant .", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all 5 star Italian restaurant", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.count)  ,  t3.day FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN checkin as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all businesses with rating 3.5", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  =  3.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "what is the number of restaurant in Texas", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Egyptian restaurant are there in Edinburgh ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of restaurant in Pittsburgh rated 4.5", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many restaurant are there in the Hazelwood district of Dallas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t3 JOIN business as t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood as t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "What is the number of escape games in Madison", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day", "output": "```gerenated SQL\n-- SQL: SELECT t4.day  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find all the tips from a user who has written a review in 2012", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM user as t3 JOIN review as t1 ON t3.user_id  =  t1.user_id JOIN tip as t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t3.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many Starbucks are there in Dallas Texas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all tips about \" Vintner Grill \" that received more than 9 likes", "output": "```gerenated SQL\n-- SQL: SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.city FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `neighbourhood` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  neighbourhood_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many neighbourhoods have a business with rating 5 in Madison ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.neighbourhood_name) FROM neighbourhood as t1 JOIN business as t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "List all the reviews which rated a business less than 1", "output": "```gerenated SQL\n-- SQL: SELECT text FROM review WHERE rating  <  1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant with Valet Service in Dallas Texas", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "Find users whose average review rating is below 3", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG(t1.rating)  <  3;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `checkin` (\r\n  cid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  count INT,\r\n  day TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "find the total checkins in Moroccan restaurant in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all users who have written tips for \" Barrio Cafe \" in 2015", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN user as t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "Find all businesses in Texas with a rating below 2", "output": "```gerenated SQL\n-- SQL: SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all users who reviewed restaurant \" Mesa Grill \"", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "How many tips has Michelle written in 2010", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tip` (\r\n  tip_id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  text TEXT,\r\n  user_id TEXT REFERENCES user(user_id),\r\n  likes INT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "What is the total likes on tips about \" Cafe Zinho \"", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.likes) FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Find all restaurant that serve Seafood in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all users who reviewed businesses that are restaurant in 2010 .", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\n", "input": "list all the reviews by Niloofar", "output": "```gerenated SQL\n-- SQL: SELECT t1.text FROM user as t2 JOIN review as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "How many Bars in \" Dallas \" have a rating above 3.5 ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\nCREATE TABLE `user` (\r\n  uid INT PRIMARY KEY,\r\n  user_id TEXT,\r\n  name TEXT\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "Which restaurant in Dallas were reviewed by user Patrick ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all businesses that are restaurant in Pennsylvania .", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\n", "input": "List all the Seafood restaurant in \" Los Angeles \"", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `review` (\r\n  rid INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  user_id TEXT REFERENCES user(user_id),\r\n  rating REAL,\r\n  text TEXT,\r\n  year INT,\r\n  month TEXT\r\n);\n\n", "input": "Find the total number of reviews written in March", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT text) FROM review WHERE month  =  \"March\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Which directors had a movie in either 1999 or 2000?", "output": "```gerenated SQL\n-- SQL: SELECT director FROM movie WHERE year  =  1999 OR year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM movie WHERE year  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM movie WHERE year  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Which directors had a movie both in the year 1999 and 2000?", "output": "```gerenated SQL\n-- SQL: SELECT director FROM movie WHERE year  =  2000 INTERSECT SELECT director FROM movie WHERE year  =  1999;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Show all director names who have a movie in the year 1999 or 2000.", "output": "```gerenated SQL\n-- SQL: SELECT director FROM movie WHERE year  =  1999 OR year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "How many movie directors are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT director) FROM movie;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(budget_million) ,  MAX(budget_million) ,  MIN(budget_million) FROM movie WHERE year  <  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show all publishers and the number of books for each publisher.", "output": "```gerenated SQL\n-- SQL: SELECT publisher ,  COUNT(*) FROM book_club GROUP BY publisher;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "What are the titles, years, and directors of all movies, ordered by budget in millions?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  year ,  director FROM movie ORDER BY budget_million;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many books are there for each publisher?", "output": "```gerenated SQL\n-- SQL: SELECT publisher ,  COUNT(*) FROM book_club GROUP BY publisher;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\nCREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Show all company names with a movie directed in year 1999.", "output": "```gerenated SQL\n-- SQL: SELECT t2.company_name FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id WHERE t1.year  =  1999;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\nCREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\n", "input": "Show the movie titles and book titles for all companies in China.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t3.book_title FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id JOIN book_club as t3 ON t3.book_club_id  =  t2.book_club_id WHERE t2.incorporated_in  =  'China';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Which publishers did not publish a book in 1989?", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE year  =  1989;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Show all director names who have a movie in both year 1999 and 2000.", "output": "```gerenated SQL\n-- SQL: SELECT director FROM movie WHERE year  =  2000 INTERSECT SELECT director FROM movie WHERE year  =  1999;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the years, titles, and publishers for all books, ordered by year descending?", "output": "```gerenated SQL\n-- SQL: SELECT year ,  book_title ,  publisher FROM book_club ORDER BY year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many books fall into each category?", "output": "```gerenated SQL\n-- SQL: SELECT category ,  COUNT(*) FROM book_club GROUP BY category;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\nCREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\nCREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\n", "input": "What are the titles of movies and books corresponding to companies incorporated in China?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t3.book_title FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id JOIN book_club as t3 ON t3.book_club_id  =  t2.book_club_id WHERE t2.incorporated_in  =  'China';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show all distinct publishers for books.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT publisher FROM book_club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many book clubs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM book_club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "Show all movie titles, years, and directors, ordered by budget.", "output": "```gerenated SQL\n-- SQL: SELECT title ,  year ,  director FROM movie ORDER BY budget_million;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\nCREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are all the company names that have a book published by Alyson?", "output": "```gerenated SQL\n-- SQL: SELECT t1.company_name FROM culture_company as t1 JOIN book_club as t2 ON t1.book_club_id  =  t2.book_club_id WHERE t2.publisher  =  'Alyson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What categories have two or more corresponding books that were made after 1989?", "output": "```gerenated SQL\n-- SQL: SELECT category FROM book_club WHERE year  >  1989 GROUP BY category HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Count the number of book clubs.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM book_club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Return the publisher that has published the most books.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\nCREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "What are all company names that have a corresponding movie directed in the year 1999?", "output": "```gerenated SQL\n-- SQL: SELECT t2.company_name FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id WHERE t1.year  =  1999;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What is the publisher with most number of books?", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show publishers with a book published in 1989 and a book in 1990.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club WHERE year  =  1989 INTERSECT SELECT publisher FROM book_club WHERE year  =  1990;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `culture_company` (\r\n  Company_name TEXT PRIMARY KEY,\r\n  Type TEXT,\r\n  Incorporated_in TEXT,\r\n  Group_Equity_Shareholding REAL,\r\n  book_club_id TEXT REFERENCES book_club(book_club_id),\r\n  movie_id TEXT REFERENCES movie(movie_id)\r\n);\n\nCREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "List all company names with a book published by Alyson.", "output": "```gerenated SQL\n-- SQL: SELECT t1.company_name FROM culture_company as t1 JOIN book_club as t2 ON t1.book_club_id  =  t2.book_club_id WHERE t2.publisher  =  'Alyson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "show the titles, and authors or editors for all books made after the year 1989.", "output": "```gerenated SQL\n-- SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE year  >  1989;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the titles and authors or editors that correspond to books made after 1989?", "output": "```gerenated SQL\n-- SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE year  >  1989;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are all the different book publishers?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT publisher FROM book_club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "What are the publishers who have published a book in both 1989 and 1990?", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club WHERE year  =  1989 INTERSECT SELECT publisher FROM book_club WHERE year  =  1990;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `movie` (\r\n  movie_id INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Year INT,\r\n  Director TEXT,\r\n  Budget_million REAL,\r\n  Gross_worldwide INT\r\n);\n\n", "input": "What is the average, maximum, and minimum budget for all movies before 2000.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(budget_million) ,  MAX(budget_million) ,  MIN(budget_million) FROM movie WHERE year  <  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show the years, book titles, and publishers for all books, in descending order by year.", "output": "```gerenated SQL\n-- SQL: SELECT year ,  book_title ,  publisher FROM book_club ORDER BY year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "Show all publishers which do not have a book in 1989.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE year  =  1989;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Detention_Type` (\r\n  detention_type_code VARCHAR(10) PRIMARY KEY,\r\n  detention_type_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Ref_Detention_Type` (\r\n  detention_type_code VARCHAR(10) PRIMARY KEY,\r\n  detention_type_description VARCHAR(80)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the code and description of the least frequent detention type ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.detention_type_code ,  t2.detention_type_description FROM detention as t1 JOIN Ref_detention_Type as t2 ON t1.detention_type_code  =  t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT(*) asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the first names of teachers whose email address contains the word \"man\".", "output": "```gerenated SQL\n-- SQL: SELECT first_name FROM teachers WHERE email_address LIKE '%man%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "output": "```gerenated SQL\n-- SQL: SELECT t1.zip_postcode FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t2.first_name  =  \"Lyla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and city of the student address with the highest average monthly rental.", "output": "```gerenated SQL\n-- SQL: SELECT t2.address_id ,  t1.city FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.first_name FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Return all distinct detention type codes.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT detention_type_code FROM detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "output": "```gerenated SQL\n-- SQL: SELECT email_address FROM students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the monthly rentals of student addresses in Texas state?", "output": "```gerenated SQL\n-- SQL: SELECT t2.monthly_rental FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  \"Texas\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What are the line 1 of addresses shared by some students and some teachers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.line_1 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id INTERSECT SELECT t1.line_1 FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "Find the dates of assessment notes for students with first name \"Fanny\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.date_of_notes FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.first_name  =  \"Fanny\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and first name of the student that has the most number of assessment notes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.first_name FROM assessment_notes as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What is the cell phone number of the student whose address has the lowest monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t2.cell_mobile_number FROM student_addresses as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id ORDER BY t1.monthly_rental asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many students are not involved in any behavior incident?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What is the gender of the teacher with last name \"Medhurst\"?", "output": "```gerenated SQL\n-- SQL: SELECT gender FROM teachers WHERE last_name  =  \"Medhurst\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "What are the email addresses of teachers whose address has zip code \"918\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.email_address FROM addresses as t1 JOIN teachers as t2 ON t1.address_id  =  t2.address_id WHERE t1.zip_postcode  =  \"918\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the first names and last names of teachers in alphabetical order of last name.", "output": "```gerenated SQL\n-- SQL: SELECT first_name ,  last_name FROM teachers ORDER BY last_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Return all detention summaries.", "output": "```gerenated SQL\n-- SQL: SELECT detention_summary FROM detention;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "List all information about the assessment notes sorted by date in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM assessment_notes ORDER BY date_of_notes ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the maximum and minimum monthly rental for all student addresses.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(monthly_rental) ,  MIN(monthly_rental) FROM student_addresses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the line 1 and average monthly rentals of all student addresses?", "output": "```gerenated SQL\n-- SQL: SELECT t1.line_1 ,  AVG(t2.monthly_rental) FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.address_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and last name of the student that has the most behavior incidents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.student_id ,  t2.last_name FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find all information about student addresses, and sort by monthly rental in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM student_addresses ORDER BY monthly_rental DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Incident_Type` (\r\n  incident_type_code VARCHAR(10) PRIMARY KEY,\r\n  incident_type_description VARCHAR(80)\r\n);\n\n", "input": "What are the code and description of the most frequent behavior incident type?", "output": "```gerenated SQL\n-- SQL: SELECT t1.incident_type_code ,  t2.incident_type_description FROM behavior_incident as t1 JOIN ref_incident_type as t2 ON t1.incident_type_code  =  t2.incident_type_code GROUP BY t1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.text_of_notes FROM assessment_notes as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  \"Schuster\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "List all cities of addresses in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM addresses ORDER BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.teacher_id ,  t2.last_name FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t1.detention_type_code  =  \"AFTER\" GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Assessment_Notes` (\r\n  notes_id INTEGER,\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  date_of_notes DATETIME,\r\n  text_of_notes VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many assessment notes are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM assessment_notes;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "output": "```gerenated SQL\n-- SQL: SELECT date_incident_start ,  date_incident_end FROM behavior_incident WHERE incident_type_code  =  \"NOISE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "Return the cell phone number and email address for all students.", "output": "```gerenated SQL\n-- SQL: SELECT cell_mobile_number ,  email_address FROM students;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Incident_Type` (\r\n  incident_type_code VARCHAR(10) PRIMARY KEY,\r\n  incident_type_description VARCHAR(80)\r\n);\n\n", "input": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "output": "```gerenated SQL\n-- SQL: SELECT incident_type_description FROM ref_incident_type WHERE incident_type_code  =  \"VIOLENCE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\n", "input": "How many addresses have zip code 197?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM addresses WHERE zip_postcode  =  \"197\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Teachers` (\r\n  teacher_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(80),\r\n  last_name VARCHAR(80),\r\n  gender VARCHAR(1),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Detention` (\r\n  detention_id INTEGER,\r\n  detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code),\r\n  teacher_id INTEGER REFERENCES Teachers(teacher_id),\r\n  datetime_detention_start DATETIME,\r\n  datetime_detention_end DATETIME,\r\n  detention_summary VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.datetime_detention_start ,  datetime_detention_end FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t2.last_name  =  \"Schultz\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many distinct incident type codes are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT incident_type_code) FROM behavior_incident;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\n", "input": "What are the first names and last names of students with address in Wisconsin state?", "output": "```gerenated SQL\n-- SQL: SELECT t2.first_name ,  t2.last_name FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_province_county  =  \"Wisconsin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Students` (\r\n  student_id INTEGER,\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  first_name VARCHAR(80),\r\n  middle_name VARCHAR(40),\r\n  last_name VARCHAR(40),\r\n  cell_mobile_number VARCHAR(40),\r\n  email_address VARCHAR(40),\r\n  date_first_rental DATETIME,\r\n  date_left_university DATETIME,\r\n  other_student_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Behavior_Incident` (\r\n  incident_id INTEGER,\r\n  incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code),\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  date_incident_start DATETIME,\r\n  date_incident_end DATETIME,\r\n  incident_summary VARCHAR(255),\r\n  recommendations VARCHAR(255),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.date_incident_start ,  date_incident_end FROM behavior_incident as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.last_name  =  \"Fahey\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Addresses` (\r\n  address_id INTEGER,\r\n  line_1 VARCHAR(120),\r\n  line_2 VARCHAR(120),\r\n  line_3 VARCHAR(120),\r\n  city VARCHAR(80),\r\n  zip_postcode VARCHAR(20),\r\n  state_province_county VARCHAR(50),\r\n  country VARCHAR(50),\r\n  other_address_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Student_Addresses` (\r\n  student_id INTEGER REFERENCES Students(student_id),\r\n  address_id INTEGER REFERENCES Addresses(address_id),\r\n  date_address_from DATETIME,\r\n  date_address_to DATETIME,\r\n  monthly_rental DECIMAL(19,4),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the id and zip code of the address with the highest monthly rental?", "output": "```gerenated SQL\n-- SQL: SELECT t2.address_id ,  t1.zip_postcode FROM addresses as t1 JOIN Student_addresses as t2 ON t1.address_id  =  t2.address_id ORDER BY monthly_rental DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the countries that participated in both friendly and tournament type competitions?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "What are the names of all the clubs starting with the oldest?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club ORDER BY start_year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What is the total number of points for all players?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(points) FROM player;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "For each position, what is the average number of points for players in that position?", "output": "```gerenated SQL\n-- SQL: SELECT position ,  AVG(points) FROM player GROUP BY position;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the positions of players whose average number of points scored by that position is larger than 20?", "output": "```gerenated SQL\n-- SQL: SELECT position FROM player GROUP BY name HAVING AVG(points)  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "List the types of competition and the number of competitions of each type.", "output": "```gerenated SQL\n-- SQL: SELECT competition_type ,  COUNT(*) FROM competition GROUP BY competition_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the types of competition and number of competitions for that type?", "output": "```gerenated SQL\n-- SQL: SELECT competition_type ,  COUNT(*) FROM competition GROUP BY competition_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the types of every competition and in which countries are they located?", "output": "```gerenated SQL\n-- SQL: SELECT competition_type ,  country FROM competition;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "Show total points of all players.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(points) FROM player;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "What are the maximum and minimum number of silver medals for clubs.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(silver) ,  MIN(silver) FROM club_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What is the average points of players from club with name \"AIB\".", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.points) FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t1.name  =  \"AIB\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the names and players of all the clubs?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.player_id FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What is the most common competition type?", "output": "```gerenated SQL\n-- SQL: SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the positions with both players having more than 20 points and less than 10 points.", "output": "```gerenated SQL\n-- SQL: SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the names of all clubs that do not have any players?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "How many clubs are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the different years for all competitions that are not of type equal to tournament?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT year FROM competition WHERE competition_type != \"Tournament\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "How many clubs have total medals less than 10?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM club_rank WHERE total  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the countries that have never participated in any friendly-type competitions?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "List the distinct region of clubs in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region FROM club ORDER BY region ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What is the average number of points for players from the \"AIB\" club?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.points) FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t1.name  =  \"AIB\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "List the types of competition that have at most five competitions of that type.", "output": "```gerenated SQL\n-- SQL: SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT(*)  <=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "How many different position for players are listed?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT position) FROM player;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "List the position of players and the average number of points of players of each position.", "output": "```gerenated SQL\n-- SQL: SELECT position ,  AVG(points) FROM player GROUP BY position;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the distinct years in which the competitions type is not \"Tournament\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT year FROM competition WHERE competition_type != \"Tournament\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the names of all players that got more than the average number of points?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM player WHERE points  >  (SELECT AVG(points) FROM player);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the types of competition that have most 5 competitions for that type?", "output": "```gerenated SQL\n-- SQL: SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT(*)  <=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "What is the total number of clubs that have less than 10 medals in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM club_rank WHERE total  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "Show the names of clubs that have players with position \"Right Wing\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t2.position  =  \"Right Wing\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "What are the maximum and minimum number of silver medals for all the clubs?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(silver) ,  MIN(silver) FROM club_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "What is the average number of gold medals for clubs?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gold) FROM club_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "which countries did participated in both Friendly and Tournament type competitions.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club_rank` (\r\n  Rank REAL PRIMARY KEY,\r\n  Club_ID INT PRIMARY KEY REFERENCES club(Club_ID),\r\n  Gold REAL,\r\n  Silver REAL,\r\n  Bronze REAL,\r\n  Total REAL\r\n);\n\n", "input": "What is the average number of gold medals for a club?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gold) FROM club_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the names of the clubs that have players in the position of \"Right Wing\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM club as t1 JOIN player as t2 ON t1.club_id  =  t2.club_id WHERE t2.position  =  \"Right Wing\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\nCREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "List the names of clubs that do not have any players.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "how many different positions are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT position) FROM player;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "What are the different regions of clubs in ascending alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region FROM club ORDER BY region ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What are the positions of both players that have more than 20 20 points and less than 10 points?", "output": "```gerenated SQL\n-- SQL: SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "What are the types and countries of competitions?", "output": "```gerenated SQL\n-- SQL: SELECT competition_type ,  country FROM competition;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "Find the countries that have never participated in any competition with Friendly type.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "find the number of players whose points are lower than 30 in each position.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  position FROM player WHERE points  <  30 GROUP BY position;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "List the most common type of competition.", "output": "```gerenated SQL\n-- SQL: SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "What are the names of all the clubs ordered in descending alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM club ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "which country did participated in the most number of Tournament competitions?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `club` (\r\n  Club_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Region TEXT,\r\n  Start_year TEXT\r\n);\n\n", "input": "What is the total number of clubs?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM club;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `competition` (\r\n  Competition_ID INT PRIMARY KEY,\r\n  Year REAL,\r\n  Competition_type TEXT,\r\n  Country TEXT\r\n);\n\n", "input": "what is the name of the country that participated in the most tournament competitions?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `player` (\r\n  Player_ID INT PRIMARY KEY,\r\n  name TEXT,\r\n  Position TEXT,\r\n  Club_ID INT REFERENCES club(Club_ID),\r\n  Apps REAL,\r\n  Tries REAL,\r\n  Goals TEXT,\r\n  Points REAL\r\n);\n\n", "input": "What is the number of players who have points less than 30 for each position?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  position FROM player WHERE points  <  30 GROUP BY position;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What is the name, location and seating for the most recently opened track?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location ,  seating FROM track ORDER BY year_opened DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What is the name of the track that has had the greatest number of races?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are distinct locations where tracks are located?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the names, classes, and dates for all races?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class ,  date FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What is the race class with most number of races.", "output": "```gerenated SQL\n-- SQL: SELECT class FROM race GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the different classes of races, and how many races correspond to each?", "output": "```gerenated SQL\n-- SQL: SELECT class ,  COUNT(*) FROM race GROUP BY class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show name, class, and date for all races.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class ,  date FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Give the names of tracks that do not have a race in the class 'GT'.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM track EXCEPT SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id WHERE t1.class  =  'GT';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the names and locations of all tracks?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What is the minimum, maximum, and average seating for all tracks.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(seating) ,  MAX(seating) ,  AVG(seating) FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show the race class and number of races in each class.", "output": "```gerenated SQL\n-- SQL: SELECT class ,  COUNT(*) FROM race GROUP BY class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "List the race class with at least two races.", "output": "```gerenated SQL\n-- SQL: SELECT class FROM race GROUP BY class HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "output": "```gerenated SQL\n-- SQL: SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the names, locations, and years of opening for tracks with seating higher than average?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location ,  year_opened FROM track WHERE seating  >  (SELECT AVG(seating) FROM track);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the classes of races that have two or more corresponding races?", "output": "```gerenated SQL\n-- SQL: SELECT class FROM race GROUP BY class HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show the name of track and the number of races in each track.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM track WHERE seating  >  90000 INTERSECT SELECT location FROM track WHERE seating  <  70000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "What are the years of opening for tracks with seating between 4000 and 5000?", "output": "```gerenated SQL\n-- SQL: SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the names and locations of tracks that have had exactly 1 race?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.location FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show all track names that have had no races.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "How many tracks do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Give the class of races that is most common.", "output": "```gerenated SQL\n-- SQL: SELECT class FROM race GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Show the name, location, open year for all tracks with a seating higher than the average.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location ,  year_opened FROM track WHERE seating  >  (SELECT AVG(seating) FROM track);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Return the different classes of races.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT class FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Give the different locations of tracks.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT location FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Count the number of races.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM track WHERE seating  >  90000 INTERSECT SELECT location FROM track WHERE seating  <  70000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the names for tracks without a race in class 'GT'.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM track EXCEPT SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id WHERE t1.class  =  'GT';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tracks` (\r\n  id INTEGER PRIMARY KEY,\r\n  name VARCHAR(200),\r\n  album_id INTEGER PRIMARY KEY REFERENCES albums(id),\r\n  media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id),\r\n  genre_id INTEGER PRIMARY KEY REFERENCES genres(id),\r\n  composer VARCHAR(220),\r\n  milliseconds INTEGER,\r\n  bytes INTEGER,\r\n  unit_price NUMERIC(10,2)\r\n);\n\nCREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Count the number of tracks.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "How many races are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Return the names of tracks that have no had any races.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "What are the distinct classes that races can have?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT class FROM race;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show the name and date for each race and its track name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.date ,  t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show the name of track with most number of races.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Show the name and location for all tracks.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM track;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\nCREATE TABLE `race` (\r\n  Race_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Class TEXT,\r\n  Date TEXT,\r\n  Track_ID TEXT REFERENCES track(Track_ID)\r\n);\n\n", "input": "Show the name and location of track with 1 race.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.location FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id GROUP BY t1.track_id HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `track` (\r\n  Track_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Location TEXT,\r\n  Seating REAL,\r\n  Year_Opened REAL\r\n);\n\n", "input": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\nCREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Return the titles and directors of films that were never in the market of China.", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the title of the film that has the highest high market estimation.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Who are the different directors of films which had market estimation in 1995?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Count the number of films.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "output": "```gerenated SQL\n-- SQL: SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  \"Japan\" ORDER BY t1.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries for each market ordered by decreasing number of cities?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY number_cities DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles of films and corresponding types of market estimations?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the studios which average gross is above 4500000.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Which studios have never worked with the director Walter Hill?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Return the maximum and minimum number of cities across all markets.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(number_cities) ,  MIN(number_cities) FROM market;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "Return the types of film market estimations in 1995.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM film_market_estimation WHERE year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the countries for each market, ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY country ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles of films that do not have a film market estimation?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  studio FROM film WHERE studio LIKE \"%Universal%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "How many markets have number of cities smaller than 300?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM market WHERE number_cities  <  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Count the number of markets that have a number of cities lower than 300.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM market WHERE number_cities  <  300;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the titles and directors of the films were never presented in China?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE country  =  'China');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film WHERE director  =  \"Nicholas Meyer\" INTERSECT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "What are the types of film market estimations in year 1995?", "output": "```gerenated SQL\n-- SQL: SELECT type FROM film_market_estimation WHERE year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What are the maximum and minimum number of cities in all markets.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(number_cities) ,  MIN(number_cities) FROM market;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the studios that have not produced films with director \"Walter Hill\".", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "List all countries of markets in descending order of number of cities.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY number_cities DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "List all countries of markets in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM market ORDER BY country ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "How films are produced by each studio?", "output": "```gerenated SQL\n-- SQL: SELECT studio ,  COUNT(*) FROM film GROUP BY studio;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the name of film studio that have the most number of films.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Which studios have an average gross of over 4500000?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the different film Directors?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT director FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Please show the titles of films and the types of market estimations.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.type FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "What are the low and high estimates of film markets?", "output": "```gerenated SQL\n-- SQL: SELECT low_estimate ,  high_estimate FROM film_market_estimation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\n", "input": "Return the low and high estimates for all film markets.", "output": "```gerenated SQL\n-- SQL: SELECT low_estimate ,  high_estimate FROM film_market_estimation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `market` (\r\n  Market_ID INT PRIMARY KEY,\r\n  Country TEXT,\r\n  Number_cities INT\r\n);\n\n", "input": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  \"Japan\" ORDER BY t1.year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film WHERE director  =  \"Nicholas Meyer\" INTERSECT SELECT studio FROM film WHERE director  =  \"Walter Hill\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "How many film are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the title of films that do not have any market estimation.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Return the title of the film with the highest high estimate?", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM film as t1 JOIN film_market_estimation as t2  ON t1.film_id  =  t2.film_id ORDER BY high_estimate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film_market_estimation` (\r\n  Estimation_ID INT PRIMARY KEY,\r\n  Low_Estimate REAL,\r\n  High_Estimate REAL,\r\n  Film_ID INT REFERENCES film(Film_ID),\r\n  Type TEXT,\r\n  Market_ID INT REFERENCES market(Market_ID),\r\n  Year INT\r\n);\n\nCREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Show the distinct director of films with market estimation in the year of 1995.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the distinct director of all films.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT director FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What are the names of studios that have made two or more films?", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the studios of each film and the number of films produced by that studio.", "output": "```gerenated SQL\n-- SQL: SELECT studio ,  COUNT(*) FROM film GROUP BY studio;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "List the names of studios that have at least two films.", "output": "```gerenated SQL\n-- SQL: SELECT studio FROM film GROUP BY studio HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "What is the average ticket sales gross in dollars of films?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gross_in_dollar) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `film` (\r\n  Film_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Studio TEXT,\r\n  Director TEXT,\r\n  Gross_in_dollar INT\r\n);\n\n", "input": "Return the average gross sales in dollars across all films.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(gross_in_dollar) FROM film;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the total number of catalog contents.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of catalog entries with level number 8.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "What is the level name of the cheapest catalog (in USD)?", "output": "```gerenated SQL\n-- SQL: SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the entry name of the catalog with the highest price (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the catalog entry names of the products with next entry ID above 8?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the name and capacity of products with price greater than 700 (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Name all the products with next entry ID greater than 8.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "What are the attribute data types with more than 3 attribute definitions?", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find the dates on which more than one revisions were made.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog content has the highest height? Give me the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What is the product with the highest height? Give me the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of all the catalog entries.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_entry_name) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\nCREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\n", "input": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Give me the average and minimum price (in Euro) of the products.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog content has the smallest capacity? Return the catalog entry name.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of all the products whose stock number starts with \"2\".", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "What are the name and publication date of the catalogs with catalog level number above 5?", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs as t1 JOIN catalog_structure as t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What is the entry name of the most expensive catalog (in USD)?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "What are the name and level of catalog structure with level number between 5 and 10", "output": "```gerenated SQL\n-- SQL: SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "On which days more than one revisions were made on catalogs.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\nCREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\n", "input": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "output": "```gerenated SQL\n-- SQL: SELECT t1.attribute_name ,  t1.attribute_id FROM attribute_definitions as t1 JOIN catalog_contents_additional_attributes as t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the average and minimum price (in Euro) of all products?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price_in_euros) ,  MIN(price_in_euros) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are the entry names of catalog with the attribute possessed by most entries.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Which catalog publishers have substring \"Murray\" in their names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the name of the product that has the smallest capacity.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\nCREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "Find the level name of the catalog with the lowest price (in USD).", "output": "```gerenated SQL\n-- SQL: SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents_Additional_Attributes` (\r\n  catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id),\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  attribute_id INTEGER,\r\n  attribute_value VARCHAR(255)\r\n);\n\nCREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the entry names of the catalog with the attribute that have the most entries.", "output": "```gerenated SQL\n-- SQL: SELECT t1.catalog_entry_name FROM catalog_contents as t1 JOIN catalog_contents_Additional_Attributes as t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM catalog_contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Which catalog publisher has published the most catalogs?", "output": "```gerenated SQL\n-- SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "Find the names of the products with length smaller than 3 or height greater than 5.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Structure` (\r\n  catalog_level_number INTEGER,\r\n  catalog_id INTEGER REFERENCES Catalogs(catalog_id),\r\n  catalog_level_name VARCHAR(50)\r\n);\n\n", "input": "Find the name and level of catalog structure with level between 5 and 10.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_level_name ,  catalog_level_number FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalog_Contents` (\r\n  catalog_entry_id INTEGER,\r\n  catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number),\r\n  parent_entry_id INTEGER,\r\n  previous_entry_id INTEGER,\r\n  next_entry_id INTEGER,\r\n  catalog_entry_name VARCHAR(80),\r\n  product_stock_number VARCHAR(50),\r\n  price_in_dollars DOUBLE,\r\n  price_in_euros DOUBLE,\r\n  price_in_pounds DOUBLE,\r\n  capacity VARCHAR(20),\r\n  length VARCHAR(20),\r\n  height VARCHAR(20),\r\n  width VARCHAR(20)\r\n);\n\n", "input": "What are all the catalog entry names?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT(catalog_entry_name) FROM catalog_contents;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Attribute_Definitions` (\r\n  attribute_id INTEGER,\r\n  attribute_name VARCHAR(30),\r\n  attribute_data_type VARCHAR(10)\r\n);\n\n", "input": "Find the attribute data type for the attribute named \"Green\".", "output": "```gerenated SQL\n-- SQL: SELECT attribute_data_type FROM attribute_definitions WHERE attribute_name  =  \"Green\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Catalogs` (\r\n  catalog_id INTEGER,\r\n  catalog_name VARCHAR(50),\r\n  catalog_publisher VARCHAR(80),\r\n  date_of_publication DATETIME,\r\n  date_of_latest_revision DATETIME\r\n);\n\n", "input": "Find the catalog publisher that has the most catalogs.", "output": "```gerenated SQL\n-- SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "How many routes go from the United States to Canada?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the names of the top 10 airlines that operate the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the number of airlines based in Russia?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines WHERE country  =  'Russia';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "For each country, what is the average elevation of that country's airports?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(elevation) ,  country FROM airports GROUP BY country;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per country? Order the countries by decreasing number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name, city, country, and elevation for every airport in the city of New York?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of the airport in the city of Goroka.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE city  =  'Goroka';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes with destination airports in Italy.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the country of the airlines whose name starts with 'Orbit'.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the total number of airlines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of the airports located in Cuba or Argentina.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "List the cities which have more than 2 airports sorted by the number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the busiest source airport that runs most number of routes in China.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "List all countries and their number of airlines in the descending order of number of airlines.", "output": "```gerenated SQL\n-- SQL: SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines does Russia has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines WHERE country  =  'Russia';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Which country is the airport that has the highest altitude located in?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the number of different airports which are the destinations of the American Airlines.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the highest elevation of an airport in the country of Iceland?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name of the airport that is the destination of the most number of routes that start in China?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the id of routes whose source and destination airports are in the United States.", "output": "```gerenated SQL\n-- SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Return the cities with more than 3 airports in the United States.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name of the airport with the most number of routes that start in China?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the cities which have exactly two airports.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the count of cities with more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "In how many cities are there airports in the country of Greenland?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the average elevation of all airports for each country.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(elevation) ,  country FROM airports GROUP BY country;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports are there per city in the US ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of routes whose destination airports are in Canada.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name and city of the airport which is the source for the most number of flight routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.src_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Which countries has the most number of airlines whose active status is 'Y'?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the cities with exactly two airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  =  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What are the countries of all airlines whose names start with Orbit?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the name and city of the airport that the most routes end at?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the name of the airline with the most routes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of airports whose name contain the word 'International'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports WHERE name LIKE '%International%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "For the airline ids with the top 10 most routes operated, what are their names?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of routes for each source airport and the airport name.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.src_apid GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the busiest destination airport that runs most number of routes in China.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.country  =  'China' GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "List the cities which have more than one airport and number of airports.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of routes that end at John F Kennedy International Airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What are the countries with the most airlines whose active status is Y?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, and country of the airport that has the lowest altitude.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name and city of the airport which is the destination of the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of airports per country, ordered from most to least?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the cities that have more than 2 airports sorted by number of airports?", "output": "```gerenated SQL\n-- SQL: SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  2 ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the id of the routes whose source and destination airports are in the United States?", "output": "```gerenated SQL\n-- SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name, city, and country of the airport that has the highest latitude.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all airports in Cuba or Argentina?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of all airports whose elevation is between -50 and 50?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the number of routes that have destination John F Kennedy International Airport.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE t1.name  =  'John F Kennedy International Airport';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the maximum elevation of all airports in the country of Iceland?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(elevation) FROM airports WHERE country  =  'Iceland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many routes end in a Canadian airport?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid WHERE country  =  'Canada';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "For each country and airline name, how many routes are there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "Find the number of routes from the United States to Canada.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\n", "input": "What is the number of routes whose destinations are Italian airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid WHERE t2.country  =  'Italy';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the number of routes operated by American Airlines.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Which countries has the most number of airlines?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What is the country of the airport with the highest elevation?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many airlines operate out of each country in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT country ,  COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the number of different different airports that are destinations for American Airlines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT dst_apid) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many cities are there that have more than 3 airports?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*)  >  3);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many airports' names have the word Interanation in them?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airports WHERE name LIKE '%International%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "What is the name of the country with the most number of home airlines?", "output": "```gerenated SQL\n-- SQL: SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "How many different cities do have some airport in the country of Greenland?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM airports WHERE country  =  'Greenland';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "Find the name of airline which runs the most number of routes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\nCREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "What are the names of the airports in the city of Goroka?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE city  =  'Goroka';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `airports` (\r\n  apid INTEGER,\r\n  name TEXT,\r\n  city TEXT,\r\n  country TEXT,\r\n  x REAL,\r\n  y REAL,\r\n  elevation bigint,\r\n  iata character varchar(3),\r\n  icao character varchar(4)\r\n);\n\n", "input": "Find the name of airports whose altitude is between -50 and 50.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `routes` (\r\n  rid INTEGER,\r\n  dst_apid INTEGER REFERENCES airports(apid),\r\n  dst_ap varchar(4),\r\n  src_apid bigint REFERENCES airports(apid),\r\n  src_ap varchar(4),\r\n  alid bigint REFERENCES airlines(alid),\r\n  airline varchar(4),\r\n  codeshare TEXT\r\n);\n\nCREATE TABLE `airlines` (\r\n  alid INTEGER,\r\n  name TEXT,\r\n  iata varchar(2),\r\n  icao varchar(3),\r\n  callsign TEXT,\r\n  country TEXT,\r\n  active varchar(2)\r\n);\n\n", "input": "How many routes does American Airlines operate?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid WHERE t1.name  =  'American Airlines';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What countries are the female artists who sung in the language Bangla from?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\" AND t2.languages  =  \"bangla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the different names for all songs that have a higher resolution than English songs?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT MIN(resolution) FROM song WHERE languages  =  \"english\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "Return the names of songs for which format is mp3 and resolution is below 1000.", "output": "```gerenated SQL\n-- SQL: SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "List the name and country of origin for all singers who have produced songs with rating above 9.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.rating  >  9;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What is the country of origin of the artist who is female and produced a song in Bangla?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\" AND t2.languages  =  \"bangla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the name of the artist who produced the shortest song?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name FROM song as t1 JOIN files as t2 ON t1.f_id  =  t2.f_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "List the file size and format for all songs that have resolution lower than 800.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.resolution  <  800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT MAX(resolution) FROM song WHERE rating  <  8);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of the songs that have a lower rating than at least one blues song?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE rating  <  (SELECT MAX(rating) FROM song WHERE genre_is  =  \"blues\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.resolution  >  900 GROUP BY t2.artist_name HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of artists who are Male and are from UK?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "Find the distinct names of all songs that have a higher resolution than some songs in English.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT MIN(resolution) FROM song WHERE languages  =  \"english\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the languages that are used most often in songs?", "output": "```gerenated SQL\n-- SQL: SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the id of the longest song?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the id of all the files in mp3 format?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp3\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  \"modern\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the average rating of songs for each language?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) ,  languages FROM song GROUP BY languages;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of all singers that are from the UK and released a song in English?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.duration) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  \"mp3\" AND t2.resolution   <  800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the top 3 artists with the largest number of songs in the language Bangla?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"bangla\" GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?", "output": "```gerenated SQL\n-- SQL: SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the id of songs whose format is mp3.", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp3\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the names of all songs that are approximately 4 minutes long or are in English?", "output": "```gerenated SQL\n-- SQL: SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(t1.duration) ,  MIN(t2.rating) ,  t2.genre_is FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the file sizes and formats for all songs with a resolution lower than 800?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.resolution  <  800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT t1.duration ,  t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.genre_is  =  \"pop\" ORDER BY t2.song_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of the artists that are from the UK and sang songs in English?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the names of the artists who are from UK and have produced English songs.", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "How many Bangladeshi artists are listed?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM artist WHERE country  =  \"Bangladesh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "Find the file format that is used by the most files.", "output": "```gerenated SQL\n-- SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "Find the names of songs whose genre is modern or language is English.", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t2.resolution) ,  MIN(t2.resolution) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE \"3:%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.resolution  >  900 GROUP BY t2.artist_name HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t1.duration) ,  MAX(t2.resolution) ,  t2.languages FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.languages ORDER BY t2.languages;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the names and number of works of the three artists who have produced the most songs.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the different names and countries of origins for all artists whose song ratings are above 9?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.rating  >  9;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genre` (\r\n  g_name varchar2(20) PRIMARY KEY,\r\n  rating varchar2(10),\r\n  most_popular_in varchar2(50)\r\n);\n\n", "input": "List the names of all genres in alphabetical oder, together with its ratings.", "output": "```gerenated SQL\n-- SQL: SELECT g_name ,  rating FROM genre ORDER BY g_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the names of the artists who sang the shortest song?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name FROM song as t1 JOIN files as t2 ON t1.f_id  =  t2.f_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "How many artists are from Bangladesh?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM artist WHERE country  =  \"Bangladesh\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of the songs that are modern or sung in English?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the country of origin for the artist who made the least number of songs?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE rating  <   (SELECT MIN(rating) FROM song WHERE languages  =  'english');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What country is the artist who made the fewest songs from?", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "How many songs were released for each format?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  formats FROM files GROUP BY formats;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the language that was used most often in songs with resolution above 500?", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the maximum duration and resolution of songs grouped and ordered by languages?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t1.duration) ,  MAX(t2.resolution) ,  t2.languages FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.languages ORDER BY t2.languages;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the name of the song that was released in the most recent year?", "output": "```gerenated SQL\n-- SQL: SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"bangla\" GROUP BY t2.artist_name ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names and countries of origin for the artists who produced the top three highly rated songs.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.rating DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "List the duration, file size and format of songs whose genre is pop, ordered by title?", "output": "```gerenated SQL\n-- SQL: SELECT t1.duration ,  t1.file_size ,  t1.formats FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t2.genre_is  =  \"pop\" ORDER BY t2.song_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "How many artists are male and how many are female?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM artist GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t2.resolution) ,  MIN(t2.resolution) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE \"3:%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  \"modern\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the language used most often in the songs?", "output": "```gerenated SQL\n-- SQL: SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `genre` (\r\n  g_name varchar2(20) PRIMARY KEY,\r\n  rating varchar2(10),\r\n  most_popular_in varchar2(50)\r\n);\n\n", "input": "What are the names of all genres in alphabetical order, combined with its ratings?", "output": "```gerenated SQL\n-- SQL: SELECT g_name ,  rating FROM genre ORDER BY g_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.song_name LIKE \"%love%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of all songs that have a lower rating than some song of blues genre?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE rating  <  (SELECT MAX(rating) FROM song WHERE genre_is  =  \"blues\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.rating DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Return the names of singers who are from UK and released an English song.", "output": "```gerenated SQL\n-- SQL: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "How many songs have 4 minute duration?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM files WHERE duration LIKE \"4:%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "How many songs, on average, are sung by a female artist?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Return the gender and name of artist who produced the song with the lowest resolution.", "output": "```gerenated SQL\n-- SQL: SELECT t1.gender ,  t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.resolution LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names and genders of all artists who released songs in the month of March?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.gender FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.releasedate LIKE \"%Mar%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "Find the names of the artists who have produced English songs but have never received rating higher than 8.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(t1.duration) ,  MIN(t2.rating) ,  t2.genre_is FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.song_name LIKE \"%love%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the names and number of works of all artists who have at least one English songs.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "Find the names of all English songs.", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT MAX(resolution) FROM song WHERE rating  <  8);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the name of the song that was released most recently?", "output": "```gerenated SQL\n-- SQL: SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the average rating and resolution of songs that are in Bangla?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) ,  AVG(resolution) FROM song WHERE languages  =  \"bangla\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "List the name and gender for all artists who released songs in March.", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  t1.gender FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.releasedate LIKE \"%Mar%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What is the number of artists for each gender?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM artist GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What is the gender and name of the artist who sang the song with the smallest resolution?", "output": "```gerenated SQL\n-- SQL: SELECT t1.gender ,  t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.resolution LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What are the names of all songs in English?", "output": "```gerenated SQL\n-- SQL: SELECT song_name FROM song WHERE languages  =  \"english\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the average song rating for each language?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(rating) ,  languages FROM song GROUP BY languages;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the average duration of songs that have mp3 format and resolution below 800?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.duration) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  \"mp3\" AND t2.resolution   <  800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What are the ids of songs that are available in either mp4 format or have resolution above 720?", "output": "```gerenated SQL\n-- SQL: SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "output": "```gerenated SQL\n-- SQL: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `files` (\r\n  f_id number(10) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  file_size varchar2(20),\r\n  duration varchar2(20),\r\n  formats varchar2(20)\r\n);\n\n", "input": "What is the most popular file format?", "output": "```gerenated SQL\n-- SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\nCREATE TABLE `artist` (\r\n  artist_name varchar2(50) PRIMARY KEY,\r\n  country varchar2(20),\r\n  gender varchar2(20),\r\n  preferred_genre varchar2(50) REFERENCES genre(g_name)\r\n);\n\n", "input": "What are the names and number of works for all artists who have sung at least one song in English?", "output": "```gerenated SQL\n-- SQL: SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `song` (\r\n  song_name varchar2(50) PRIMARY KEY,\r\n  artist_name varchar2(50) REFERENCES artist(artist_name),\r\n  country varchar2(20),\r\n  f_id number(10) REFERENCES files(f_id),\r\n  genre_is varchar2(20) REFERENCES genre(g_name),\r\n  rating number(10),\r\n  languages varchar2(20),\r\n  releasedate Date,\r\n  resolution number(10)\r\n);\n\n", "input": "List the id, genre and artist name of English songs ordered by rating.", "output": "```gerenated SQL\n-- SQL: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many different kinds of information sources are there for injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT source) FROM injury_accident;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "List the season, home team, away team of all the games.", "output": "```gerenated SQL\n-- SQL: SELECT season ,  home_team ,  away_team FROM game;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Walter Samuel' INTERSECT SELECT t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.player  =  'Thiago Motta';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "output": "```gerenated SQL\n-- SQL: SELECT t1.season FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id WHERE t2.player  =  'Walter Samuel';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT t2.name ,  t2.average_attendance ,  t2.total_attendance FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "List the dates of games by the home team name in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT date FROM game ORDER BY home_team DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\n", "input": "How many games are held after season 2007?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM game WHERE season  >  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "output": "```gerenated SQL\n-- SQL: SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the id and name of the stadium where the most injury accidents happened?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.season ,  t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.injury  =  'Foot injury' OR t3.injury  =  'Knee problem';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.score ,  t1.date FROM game as t1 JOIN injury_accident as t2 ON t2.game_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "output": "```gerenated SQL\n-- SQL: SELECT t1.date ,  t2.player FROM game as t1 JOIN injury_accident as t2 ON t1.id  =  t2.game_id ORDER BY t1.season DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many distinct kinds of injuries happened after season 2010?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.injury) FROM injury_accident as t1 JOIN game as t2 ON t1.game_id  =  t2.id WHERE t2.season  >  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "output": "```gerenated SQL\n-- SQL: SELECT player ,  number_of_matches ,  source FROM injury_accident WHERE injury != 'Knee problem';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "How many games has each stadium held?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  COUNT(*) FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id GROUP BY t1.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stadium` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Home_Games INT,\r\n  Average_Attendance REAL,\r\n  Total_Attendance REAL,\r\n  Capacity_Percentage REAL\r\n);\n\n", "input": "Which stadium name contains the substring \"Bank\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM stadium WHERE name LIKE \"%Bank%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `game` (\r\n  stadium_id INT REFERENCES stadium(id),\r\n  id INT PRIMARY KEY,\r\n  Season INT,\r\n  Date TEXT,\r\n  Home_team TEXT,\r\n  Away_team TEXT,\r\n  Score TEXT,\r\n  Competition TEXT\r\n);\n\nCREATE TABLE `injury_accident` (\r\n  game_id INT REFERENCES game(id),\r\n  id INT PRIMARY KEY,\r\n  Player TEXT,\r\n  Injury TEXT,\r\n  Number_of_matches TEXT,\r\n  Source TEXT\r\n);\n\n", "input": "How many games are free of injury accidents?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Which physicians have never taken any appointment? Find their names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the names of patients who are not using the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Find the name of the nurse who has the largest number of appointments.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What procedures cost less than 5000 and have John Wen as a trained physician?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\n", "input": "Find the patient who has the most recent undergoing treatment?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Which department has the largest number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "How many patients stay in room 112?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(patient) FROM stay WHERE room  =  112;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name of physicians whose position title contains the word 'senior'.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician WHERE position LIKE '%senior%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What is the average cost of procedures that physician John Wen was trained in?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "What are the unique block codes that have available rooms?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Find the name of the patient who made the appointment with the most recent start date.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM patient as t1 JOIN appointment as t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the physicians who are trained in a procedure that costs more than 5000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Which physician was trained in the procedure that costs the most.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the physician who prescribed the highest dose. What is his or her name?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the name of medication used on the patient who stays in room 111?", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What are the names of patients who are not taking the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Find the names of all physicians and their primary affiliated departments' names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "List the name of physicians who took some appointment.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Tell me the distinct block codes where some rooms are available.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "List the names of all distinct nurses ordered by alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM nurse ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "Count how many appointments have been made in total.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appointment;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the distinct names of nurses on call?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "List the names of patients who have made appointments.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the names of the physicians who prescribe medication Thesisin?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  \"Thesisin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the names of procedures which physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' INTERSECT SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "List the names of departments where some physicians are primarily affiliated with.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "What is the id of the patient who stayed in room 111 most recently?", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Return the name of each physician and the number of patients he or she treats.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "What is the name of the medication used for the patient staying in room 111?", "output": "```gerenated SQL\n-- SQL: SELECT t4.name FROM stay as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn JOIN prescribes as t3 ON t3.patient  =  t2.ssn JOIN medication as t4 ON t3.medication  =  t4.code WHERE room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What are the names of all the physicians who took appointments.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are each physician's employee id and department id primarily affiliated.", "output": "```gerenated SQL\n-- SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "How many appointments are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appointment;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What is the name of the nurse has the most appointments?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What is the alphabetically ordered list of all the distinct names of nurses?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM nurse ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of nurses who are on call.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM nurse as t1 JOIN on_call as t2 ON t1.employeeid  =  t2.nurse;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name of physicians who are in charge of more than one patient.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "List the physicians' employee ids together with their primary affiliation departments' ids.", "output": "```gerenated SQL\n-- SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the number of medications prescribed for each brand.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "How many different types of rooms are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT roomtype) FROM room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the names of procedures physician John Wen was trained in?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "How many medications are prescribed for each brand?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM medication as t1 JOIN prescribes as t2 ON t1.code = t2.medication GROUP BY t1.brand;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  \"X\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Tell me the employee id of the head of the department with the least employees.", "output": "```gerenated SQL\n-- SQL: SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the names of the physician who prescribed the highest dose?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What are names of patients who made an appointment?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "Find the patient who most recently stayed in room 111.", "output": "```gerenated SQL\n-- SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Find the number of rooms located on each block floor.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\nCREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN patient as t2 ON t1.patient = t2.ssn JOIN stay as t3 ON t1.stay  =  t3.stayID WHERE t3.room  =  111;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "How many rooms does each block floor have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Find the number of distinct room types available.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT roomtype) FROM room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "List the name of physicians who never took any appointment.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the names of nurses who are nursing an undergoing treatment.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Sort the list of names and costs of all procedures in the descending order of cost.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the physician who was trained in the most expensive procedure?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment ORDER BY t3.cost DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are the names of departments that have primarily affiliated physicians.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM affiliated_with as t1 JOIN department as t2 ON t1.department = t2.departmentid WHERE primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "List the names of all the physicians who prescribe Thesisin as medication.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.name  =  \"Thesisin\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the three most costly procedures?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Find the name and position of the head of the department with the least employees.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "What are the name and primarily affiliated department name of each physician?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t3.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t2.primaryaffiliation  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Appointment` (\r\n  AppointmentID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  PrepNurse INTEGER REFERENCES Nurse(EmployeeID),\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  Start DATETIME,\r\n  End DATETIME,\r\n  ExaminationRoom TEXT\r\n);\n\n", "input": "What is the id of the appointment that started most recently?", "output": "```gerenated SQL\n-- SQL: SELECT appointmentid FROM appointment ORDER BY start DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the name and position of physicians who prescribe some medication whose brand is X?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.position FROM physician as t1 JOIN prescribes as t2 ON t1.employeeid = t2.physician JOIN medication as t3 ON t3.code = t2.medication WHERE t3.brand  =  \"X\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "output": "```gerenated SQL\n-- SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\n", "input": "How many patients' prescriptions are made by physician John Dorian?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = \"John Dorian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `On_Call` (\r\n  Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID),\r\n  BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode),\r\n  OnCallStart DATETIME PRIMARY KEY,\r\n  OnCallEnd DATETIME PRIMARY KEY\r\n);\n\n", "input": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "output": "```gerenated SQL\n-- SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Tell me the highest, lowest, and average cost of procedures.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\nCREATE TABLE `Medication` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Brand VARCHAR(30),\r\n  Description VARCHAR(30)\r\n);\n\n", "input": "Find the number of patients who are not using the medication of Procrastin-X.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "What are the highest cost, lowest cost and average cost of procedures?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "What are the names of the physicians who have 'senior' in their titles.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM physician WHERE position LIKE '%senior%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Stay` (\r\n  StayID INTEGER,\r\n  Patient INTEGER REFERENCES Patient(SSN),\r\n  Room INTEGER REFERENCES Room(RoomNumber),\r\n  StayStart DATETIME,\r\n  StayEnd DATETIME\r\n);\n\n", "input": "Count the number of patients who stayed in room 112.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(patient) FROM stay WHERE room  =  112;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "Find the number of rooms for different block code?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Compute the mean price of procedures physician John Wen was trained in.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t3.cost) FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Block` (\r\n  BlockFloor INTEGER PRIMARY KEY,\r\n  BlockCode INTEGER PRIMARY KEY\r\n);\n\nCREATE TABLE `Room` (\r\n  RoomNumber INTEGER,\r\n  RoomType VARCHAR(30),\r\n  BlockFloor INTEGER REFERENCES Block(BlockFloor),\r\n  BlockCode INTEGER REFERENCES Block(BlockCode),\r\n  Unavailable BOOLEAN\r\n);\n\n", "input": "How many rooms are located for each block code?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Undergoes` (\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID),\r\n  DateUndergoes DATETIME PRIMARY KEY,\r\n  Physician INTEGER REFERENCES Physician(EmployeeID),\r\n  AssistingNurse INTEGER REFERENCES Nurse(EmployeeID)\r\n);\n\nCREATE TABLE `Nurse` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  Registered BOOLEAN,\r\n  SSN INTEGER\r\n);\n\n", "input": "Which nurses are in charge of patients undergoing treatments?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM undergoes as t1 JOIN nurse as t2 ON t1.assistingnurse  =  t2.employeeid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "What is the employee id of the head whose department has the least number of employees?", "output": "```gerenated SQL\n-- SQL: SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\n", "input": "Find the department with the most employees.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\n", "input": "Which physicians are in charge of more than one patient? Give me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Department` (\r\n  DepartmentID INTEGER,\r\n  Name VARCHAR(30),\r\n  Head INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Affiliated_With` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID),\r\n  PrimaryAffiliation BOOLEAN\r\n);\n\n", "input": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Patient` (\r\n  SSN INTEGER,\r\n  Name VARCHAR(30),\r\n  Address VARCHAR(30),\r\n  Phone VARCHAR(30),\r\n  InsuranceID INTEGER,\r\n  PCP INTEGER REFERENCES Physician(EmployeeID)\r\n);\n\nCREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Prescribes` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN),\r\n  Medication INTEGER PRIMARY KEY REFERENCES Medication(Code),\r\n  Date DATETIME PRIMARY KEY,\r\n  Appointment INTEGER REFERENCES Appointment(AppointmentID),\r\n  Dose VARCHAR(30)\r\n);\n\n", "input": "Find the number of patients' prescriptions physician John Dorian made.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = \"John Dorian\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Find the three most expensive procedures.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Physician` (\r\n  EmployeeID INTEGER,\r\n  Name VARCHAR(30),\r\n  Position VARCHAR(30),\r\n  SSN INTEGER\r\n);\n\nCREATE TABLE `Trained_In` (\r\n  Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID),\r\n  Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code),\r\n  CertificationDate DATETIME,\r\n  CertificationExpires DATETIME\r\n);\n\nCREATE TABLE `Procedures` (\r\n  Code INTEGER,\r\n  Name VARCHAR(30),\r\n  Cost REAL\r\n);\n\n", "input": "Which physicians are trained in procedures that are more expensive than 5000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t3.cost  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "Give the color of the grape whose wine products have the highest average price?", "output": "```gerenated SQL\n-- SQL: SELECT t1.color FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape GROUP BY t2.grape ORDER BY AVG(price) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the names of all distinct wines that have scores higher than 90.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE score  >  90;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the wineries that have at least four wines.", "output": "```gerenated SQL\n-- SQL: SELECT winery FROM wine GROUP BY winery HAVING COUNT(*)  >=  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  AVG(cases) FROM wine WHERE year  =  2009 AND grape  =  \"Zinfandel\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the average price of wines produced in appelations in Sonoma County?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  \"Sonoma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "Find the white grape used to produce wines with scores above 90.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.grape FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\" AND t2.score  >  90;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the maximum price and score of wines in each year?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(price) ,  MAX(score) ,  year FROM wine GROUP BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "What are the names and scores of wines that are made of white color grapes?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,   t2.score FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "output": "```gerenated SQL\n-- SQL: SELECT appelation FROM wine WHERE year  >  2008 EXCEPT SELECT appelation FROM appellations WHERE area  =  \"Central Coast\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "How many wines are produced at Robert Biale winery?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wine WHERE winery  =  \"Robert Biale\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the country of all appelations who have at most three wines.", "output": "```gerenated SQL\n-- SQL: SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING COUNT(*)  <=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the average price and score of wines for each appelation?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  AVG(score) ,  appelation FROM wine GROUP BY appelation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  \"Central Coast\" AND t2.year  <  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Which wineries produce at least four wines?", "output": "```gerenated SQL\n-- SQL: SELECT winery FROM wine GROUP BY winery HAVING COUNT(*)  >=  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE year  <  (SELECT MIN(year) FROM wine WHERE winery  =  \"Brander\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What is the winery at which the wine with the highest score was made?", "output": "```gerenated SQL\n-- SQL: SELECT winery FROM wine ORDER BY score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine WHERE price  >  (SELECT MIN(price) FROM wine WHERE winery  =  \"John Anthony\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the maximum price and score of wines produced by St. Helena appelation?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(price) ,  MAX(score) FROM wine WHERE appelation  =  \"St. Helena\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the average prices of wines for different years?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  year FROM wine GROUP BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Which winery is the wine that has the highest score from?", "output": "```gerenated SQL\n-- SQL: SELECT winery FROM wine ORDER BY score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Give the distinct names of wines made before 2000 or after 2010.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine WHERE year  <  2000 OR year  >  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "What are the names of wines made from red grapes and with prices above 50?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"Red\" AND t2.price  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "output": "```gerenated SQL\n-- SQL: SELECT appelation FROM wine WHERE year  >  2008 EXCEPT SELECT appelation FROM appellations WHERE area  =  \"Central Coast\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Count the number of appelations in Napa County.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appellations WHERE county  =  \"Napa\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  appelation ,  name FROM wine WHERE score  >  93 ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines, sorted in alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Count the number of wines produced at Robert Biale winery.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM wine WHERE winery  =  \"Robert Biale\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Return the prices of wines produced before 2010.", "output": "```gerenated SQL\n-- SQL: SELECT price FROM wine WHERE year  <  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "output": "```gerenated SQL\n-- SQL: SELECT t1.area FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING t2.year  <  2010 ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Give the names of wines with prices above any wine produced in 2006.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE price  >  (SELECT MAX(price) FROM wine WHERE year  =  2006);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the grapes and appelations of each wine?", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  appelation FROM wine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Give the maximum price and score for wines produced in the appelation St. Helena.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(price) ,  MAX(score) FROM wine WHERE appelation  =  \"St. Helena\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "List the area and county of all appelations.", "output": "```gerenated SQL\n-- SQL: SELECT area ,  county FROM appellations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the names of all wines produced in 2008.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE year  =  \"2008\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "What is the color of the grape whose wine products has the highest average price?", "output": "```gerenated SQL\n-- SQL: SELECT t1.color FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape GROUP BY t2.grape ORDER BY AVG(price) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of all wines produced in 2008?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE year  =  \"2008\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Find the distinct winery of wines having price between 50 and 100.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT winery FROM wine WHERE price BETWEEN 50 AND 100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines that are more expensive then all wines made in the year 2006?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE price  >  (SELECT MAX(price) FROM wine WHERE year  =  2006);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the area for the appelation which produced the most wines prior to 2010?", "output": "```gerenated SQL\n-- SQL: SELECT t1.area FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING t2.year  <  2010 ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What is the average prices of wines for each each?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  year FROM wine GROUP BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "Give the names and scores of wines made from white grapes.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,   t2.score FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the county where produces the most number of wines with score higher than 90.", "output": "```gerenated SQL\n-- SQL: SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t2.score  >  90 GROUP BY t1.county ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  AVG(cases) FROM wine WHERE year  =  2009 AND grape  =  \"Zinfandel\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What is the name of the highest rated wine?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine ORDER BY score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines, sorted by price ascending?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine ORDER BY price;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the average price of wines that are not produced from Sonoma county.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) FROM wine WHERE appelation NOT IN (SELECT t1.appelation FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  'Sonoma');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  \"Monterey\" AND t2.price  <  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "What are the names of wines made from red grapes?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"Red\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "Which 3 wineries produce the most wines made from white grapes?", "output": "```gerenated SQL\n-- SQL: SELECT t2.winery FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\" GROUP BY t2.winery ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the numbers of wines for different grapes?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  grape FROM wine GROUP BY grape;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the names of all distinct wines in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  appelation ,  name FROM wine WHERE score  >  93 ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What are the areas and counties for all appelations?", "output": "```gerenated SQL\n-- SQL: SELECT area ,  county FROM appellations;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the grapes and appelations of all wines.", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  appelation FROM wine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.grape FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"White\" AND t2.score  >  90;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the prices of wines produced before the year of 2010?", "output": "```gerenated SQL\n-- SQL: SELECT price FROM wine WHERE year  <  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names and scores of all wines?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  score FROM wine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the average price and score of wines grouped by appelation?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(price) ,  AVG(score) ,  appelation FROM wine GROUP BY appelation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  winery ,  year FROM wine WHERE price  >   100 ORDER BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t2.price) FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  \"Sonoma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the names and scores of all wines.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  score FROM wine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the maximum price and score of wines for each year?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(price) ,  MAX(score) ,  year FROM wine GROUP BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "How many appelations are in Napa Country?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM appellations WHERE county  =  \"Napa\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "How many wines are there for each grape?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  grape FROM wine GROUP BY grape;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What are the distinct names of wines that have appellations in the North Coast area?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  \"North Coast\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What are the countries for appelations with at most 3 wines?", "output": "```gerenated SQL\n-- SQL: SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation GROUP BY t2.appelation HAVING COUNT(*)  <=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "Give the name of the wine with the highest score.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine ORDER BY score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "What is the county that produces the most wines scoring higher than 90?", "output": "```gerenated SQL\n-- SQL: SELECT t1.county FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t2.score  >  90 GROUP BY t1.county ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "output": "```gerenated SQL\n-- SQL: SELECT grape ,  winery ,  year FROM wine WHERE price  >   100 ORDER BY year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `grapes` (\r\n  ID INTEGER,\r\n  Grape TEXT PRIMARY KEY,\r\n  Color TEXT\r\n);\n\n", "input": "What are the wines that have prices higher than 50 and made of Red color grapes?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM grapes as t1 JOIN wine as t2 ON t1.grape  =  t2.grape WHERE t1.color  =  \"Red\" AND t2.price  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the names of wines produced before any wine from the Brander winery?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM wine WHERE year  <  (SELECT MIN(year) FROM wine WHERE winery  =  \"Brander\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "What are the distinct wineries which produce wines costing between 50 and 100?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT winery FROM wine WHERE price BETWEEN 50 AND 100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\n", "input": "List the names of all distinct wines ordered by price.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT name FROM wine ORDER BY price;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `wine` (\r\n  No INTEGER,\r\n  Grape TEXT REFERENCES grapes(Grape),\r\n  Winery TEXT,\r\n  Appelation TEXT REFERENCES appellations(Appelation),\r\n  State TEXT,\r\n  Name TEXT,\r\n  Year INTEGER,\r\n  Price INTEGER,\r\n  Score INTEGER,\r\n  Cases INTEGER,\r\n  Drink TEXT\r\n);\n\nCREATE TABLE `appellations` (\r\n  No INTEGER,\r\n  Appelation TEXT PRIMARY KEY,\r\n  County TEXT,\r\n  State TEXT,\r\n  Area TEXT,\r\n  isAVA TEXT\r\n);\n\n", "input": "Find the names of all distinct wines that have appellations in North Coast area.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  \"North Coast\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Count the number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE status  =  \"on-hold\" ORDER BY stories ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the names of the buildings that have more than one company offices.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies WHERE headquarters  =  \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters  =  \"China\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != \"Banking\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Compute the average profits companies make.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(profits_billion) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Which building has the largest number of company offices? Give me the building name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Please show the industries of companies in descending order of the number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "List the names of buildings in descending order of building height.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings ORDER BY height DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Sort all the industries in descending order of the count of companies in each industry", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which headquarter locations are used by more than 2 companies?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Sort the company names in descending order of the company's market value.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies ORDER BY market_value_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies WHERE industry  =  \"Banking\" OR industry  =  \"Conglomerate\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Find the stories of the building with the largest height.", "output": "```gerenated SQL\n-- SQL: SELECT stories FROM buildings ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "What is the stories of highest building?", "output": "```gerenated SQL\n-- SQL: SELECT stories FROM buildings ORDER BY height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the name and assets of each company, sorted in ascending order of company name?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  assets_billion FROM companies ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many different industries are the companies in?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT industry) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies WHERE industry  =  \"Banking\" OR industry  =  \"Conglomerate\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the names of companies whose headquarters are not \"USA\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Which buildings do not have any company office? Give me the building names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Whah are the name of each industry and the number of companies in that industry?", "output": "```gerenated SQL\n-- SQL: SELECT industry ,  COUNT(*) FROM companies GROUP BY industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the names of companies in descending order of market value.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies ORDER BY market_value_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Show the headquarters shared by more than two companies.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "output": "```gerenated SQL\n-- SQL: SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != \"Banking\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the name of the building that has the most company offices.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "List the name and assets of each company in ascending order of company name.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  assets_billion FROM companies ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "For each company, return the company name and the name of the building its office is located in.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "What are the average profits of companies?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(profits_billion) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM buildings WHERE status  =  \"on-hold\" ORDER BY stories ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Please show each industry and the corresponding number of companies in that industry.", "output": "```gerenated SQL\n-- SQL: SELECT industry ,  COUNT(*) FROM companies GROUP BY industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Find the names of the companies whose headquarters are not located in \"USA\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM companies WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "List the name of a building along with the name of a company whose office is in the building.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Which industry has the most companies?", "output": "```gerenated SQL\n-- SQL: SELECT industry FROM companies GROUP BY industry ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "Count the number of distinct company industries.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT industry) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\n", "input": "How many companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM companies;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `Office_locations` (\r\n  building_id INT PRIMARY KEY REFERENCES buildings(id),\r\n  company_id INT PRIMARY KEY REFERENCES Companies(id),\r\n  move_in_year INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Which buildings have more than one company offices? Give me the building names.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM office_locations as t1 JOIN buildings as t2 ON t1.building_id  =  t2.id JOIN companies as t3 ON t1.company_id  =  t3.id GROUP BY t1.building_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "What is the name of party with most number of members?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show the minister who took office after 1961 or before 1959.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Which ministers are not a part of the Progress Party?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE party_name != 'Progress Party';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "How many events are there for each party?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.event_name  =  \"Annaual Meeting\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Return the minister who left office at the latest time.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Which member names are shared among members in the party with the id 3 and the party with the id 1?", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Which member names corresponding to members who are not in the Progress Party?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != \"Progress Party\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "How many party events do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM party_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Show party names and the number of events for each party.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show all party names and the number of members in each party.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Count the number of party events.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM party_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Return the name of the party with the most members.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "What is the name of member in charge of greatest number of events?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "List member names and their party names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Which minister left office the latest?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "What are the different region names, ordered by labels?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region_name FROM region ORDER BY label;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "What are the names of parties that have no members?", "output": "```gerenated SQL\n-- SQL: SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "Return the names of parties that have two or more events.", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "What are the names of parties and their respective regions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Show all party names and their region names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show the ministers and the time they took and left office, listed by the time they left office.", "output": "```gerenated SQL\n-- SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "Show all distinct region names ordered by their labels.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT region_name FROM region ORDER BY label;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Return the name of the member who is in charge of the most events.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Who are the ministers who took office after 1961 or before 1959?", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show all member names who are not in charge of any event.", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show member names that are not in the Progress Party.", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id WHERE t2.party_name != \"Progress Party\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\n", "input": "What are the names of parties with at least 2 events?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name FROM party_events as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "How many members are in each party?", "output": "```gerenated SQL\n-- SQL: SELECT t2.party_name ,  COUNT(*) FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id GROUP BY t1.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show names of parties that does not have any members.", "output": "```gerenated SQL\n-- SQL: SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Show all ministers who do not belong to Progress Party.", "output": "```gerenated SQL\n-- SQL: SELECT minister FROM party WHERE party_name != 'Progress Party';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "What are the names of members and their corresponding parties?", "output": "```gerenated SQL\n-- SQL: SELECT t1.member_name ,  t2.party_name FROM member as t1 JOIN party as t2 ON t1.party_id  =  t2.party_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "How many regions do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "Show the member names which are in both the party with id 3 and the party with id 1.", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "How many parties do we have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT party_name) FROM party;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\nCREATE TABLE `region` (\r\n  Region_ID INT PRIMARY KEY,\r\n  Region_name TEXT,\r\n  Date TEXT,\r\n  Label TEXT,\r\n  Format TEXT,\r\n  Catalogue TEXT\r\n);\n\n", "input": "How many Annual Meeting events happened in the United Kingdom region?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM region as t1 JOIN party as t2 ON t1.region_id  =  t2.region_id JOIN party_events as t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.event_name  =  \"Annaual Meeting\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party` (\r\n  Party_ID INT PRIMARY KEY,\r\n  Minister TEXT,\r\n  Took_office TEXT,\r\n  Left_office TEXT,\r\n  Region_ID INT REFERENCES region(Region_ID),\r\n  Party_name TEXT\r\n);\n\n", "input": "Count the number of different parties.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT party_name) FROM party;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `party_events` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Event_Name TEXT,\r\n  Party_ID INT REFERENCES party(Party_ID),\r\n  Member_in_charge_ID INT REFERENCES member(Member_ID)\r\n);\n\nCREATE TABLE `member` (\r\n  Member_ID INT PRIMARY KEY,\r\n  Member_Name TEXT,\r\n  Party_ID TEXT REFERENCES party(Party_ID),\r\n  In_office TEXT\r\n);\n\n", "input": "What are the names of members who are not in charge of any events?", "output": "```gerenated SQL\n-- SQL: SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "How many different kinds of clients are supported by the web clients accelerators?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT client) FROM web_client_accelerator;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the maximum, minimum and average market share of the listed browsers?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(market_share) ,  MIN(market_share) ,  AVG(market_share) FROM browser;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  operating_system FROM web_client_accelerator WHERE connection != 'Broadband';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the id and name of the browser that is compatible with the most web accelerators?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM browser as t1 JOIN accelerator_compatible_browser as t2 ON t1.id  =  t2.browser_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the name of browsers in descending order by market share.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM browser ORDER BY market_share DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "How many accelerators are not compatible with the browsers listed ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "Find the number of web accelerators used for each Operating system.", "output": "```gerenated SQL\n-- SQL: SELECT operating_system ,  COUNT(*) FROM web_client_accelerator GROUP BY operating_system;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "Which accelerator name contains substring \"Opera\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t3.name FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id ORDER BY t1.compatible_since_year DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "output": "```gerenated SQL\n-- SQL: SELECT t1.compatible_since_year FROM accelerator_compatible_browser as t1 JOIN browser as t2 ON t1.browser_id  =  t2.id JOIN web_client_accelerator as t3 ON t1.accelerator_id  =  t3.id WHERE t3.name  =  'CACHEbox' AND t2.name  =  'Internet Explorer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT t1.name ,  t1.operating_system FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.name  =  'Opera';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'Fasterfox';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "How many main stream browsers whose market share is at least 5 exist?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM browser WHERE market_share  >=  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What is the id and market share of the browser Safari?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  market_share FROM browser WHERE name  =  'Safari';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "List the ids, names and market shares of all browsers.", "output": "```gerenated SQL\n-- SQL: SELECT id ,  name ,  market_share FROM browser;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\nCREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `browser` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  market_share REAL\r\n);\n\n", "input": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t3.market_share  >  15;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `accelerator_compatible_browser` (\r\n  accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id),\r\n  browser_id INT PRIMARY KEY REFERENCES browser(id),\r\n  compatible_since_year INT\r\n);\n\nCREATE TABLE `Web_client_accelerator` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Operating_system TEXT,\r\n  Client TEXT,\r\n  Connection TEXT\r\n);\n\n", "input": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Sales` (\r\n  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  sales_details VARCHAR(255)\r\n);\n\n", "input": "What are the sale details and dates of transactions with amount smaller than 3000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.sales_details ,  t2.date_of_transaction FROM sales as t1 JOIN transactions as t2 ON t1.sales_transaction_id  =  t2.transaction_id WHERE t2.amount_of_transaction  <  3000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\n", "input": "Return the lot details and investor ids.", "output": "```gerenated SQL\n-- SQL: SELECT lot_details ,  investor_id FROM lots;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show the ids of the investors who have at least two transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and details for the investors who have the top 3 number of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  COUNT(*) FROM transactions WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "What are the details of the lots which are not used in any transactions?", "output": "```gerenated SQL\n-- SQL: SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.lot_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum share count of transactions where the amount is smaller than 10000", "output": "```gerenated SQL\n-- SQL: SELECT MAX(share_count) FROM transactions WHERE amount_of_transaction  <  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show details of all investors if they make any transaction with share count greater than 100.", "output": "```gerenated SQL\n-- SQL: SELECT t1.investor_details FROM  investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.share_count  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "How many distinct transaction types are used in the transactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT transaction_type_code) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average share count of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average transaction amount for different transaction types.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code ,  AVG(amount_of_transaction) FROM transactions GROUP BY transaction_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average amount of transactions with type code \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT AVG(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  \"SALE\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the number of transactions for different investors.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  COUNT(*) FROM transactions GROUP BY investor_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What is the total share of transactions?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_count) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "output": "```gerenated SQL\n-- SQL: SELECT t1.transaction_type_description ,  t2.date_of_transaction FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code WHERE t2.share_count  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "Show the average amount of transactions for different lots.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\n", "input": "Show all distinct lot details.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT lot_details FROM lots;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the transaction type code that occurs the fewest times.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the description of the transaction type that occurs most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT t1.transaction_type_description FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE share_count  >  100 OR amount_of_transaction  >  1000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Return the lot details of lots that belong to investors with details \"l\"?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_details FROM investors as t1 JOIN lots as t2 ON  t1.investor_id  =  t2.investor_id WHERE t1.investor_details  =  \"l\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the average share count of transactions each each investor, ordered by average share count.", "output": "```gerenated SQL\n-- SQL: SELECT investor_id ,  AVG(share_count) FROM transactions GROUP BY investor_id ORDER BY AVG(share_count);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the transaction type code that occurs the most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Find the number of investors in total.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM investors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id WHERE t2.transaction_type_code  =  \"SALE\" GROUP BY t2.investor_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum amount of transaction.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(amount_of_transaction) FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction FROM transactions WHERE share_count  >=  100 OR amount_of_transaction  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show the id and details of the investor that has the largest number of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.investor_id ,  t1.investor_details FROM investors as t1 JOIN transactions as t2 ON t1.investor_id  =  t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Investors` (\r\n  investor_id INTEGER,\r\n  Investor_details VARCHAR(255)\r\n);\n\n", "input": "Show all investor details.", "output": "```gerenated SQL\n-- SQL: SELECT investor_details FROM investors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Lots` (\r\n  lot_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  lot_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "What are the lot details of lots associated with transactions with share count smaller than 50?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.transaction_id JOIN transactions as t3 ON t2.transaction_id  =  t3.transaction_id WHERE t3.share_count  <  50;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Transactions_Lots` (\r\n  transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  lot_id INTEGER REFERENCES Lots(lot_id)\r\n);\n\n", "input": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.lot_id ,  AVG(amount_of_transaction) FROM transactions as t1 JOIN transactions_lots as t2 ON t1.transaction_id  =  t2.transaction_id GROUP BY t2.lot_id ORDER BY AVG(amount_of_transaction);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ref_Transaction_Types` (\r\n  transaction_type_code VARCHAR(10) PRIMARY KEY,\r\n  transaction_type_description VARCHAR(80)\r\n);\n\n", "input": "Show the description of transaction type with code \"PUR\".", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code\t  =  \"PUR\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show the maximum and minimum share count of different transaction types.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_type_code ,  MAX(share_count) ,  MIN(share_count) FROM transactions GROUP BY transaction_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all transaction ids with transaction code 'PUR'.", "output": "```gerenated SQL\n-- SQL: SELECT transaction_id FROM transactions WHERE transaction_type_code  =  'PUR';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Transactions` (\r\n  transaction_id INTEGER,\r\n  investor_id INTEGER REFERENCES Investors(investor_id),\r\n  transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code),\r\n  date_of_transaction DATETIME,\r\n  amount_of_transaction DECIMAL(19,4),\r\n  share_count VARCHAR(40),\r\n  other_details VARCHAR(255)\r\n);\n\n", "input": "Show all date and share count of transactions.", "output": "```gerenated SQL\n-- SQL: SELECT date_of_transaction ,  share_count FROM transactions;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Purchases` (\r\n  purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  purchase_details VARCHAR(255)\r\n);\n\nCREATE TABLE `Sales` (\r\n  sales_transaction_id INTEGER REFERENCES Transactions(transaction_id),\r\n  sales_details VARCHAR(255)\r\n);\n\n", "input": "What are the details of all sales and purchases?", "output": "```gerenated SQL\n-- SQL: SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Count the number of universities that do not participate in the baketball match.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the total and minimum enrollments across all schools.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  MIN(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT team_name FROM basketball_match ORDER BY all_home DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "List all public schools and their locations.", "output": "```gerenated SQL\n-- SQL: SELECT school ,  location FROM university WHERE affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Count the number of schools that have had basketball matches.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT school_id) FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "List all schools and their nicknames in the order of founded year.", "output": "```gerenated SQL\n-- SQL: SELECT school ,  nickname FROM university ORDER BY founded;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "How many schools are in the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT school_id) FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the founded year for the school with the largest enrollment.", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is the team name and acc regular season score of the school that was founded for the longest time?", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What are the all games score and location of the school called Clemson?", "output": "```gerenated SQL\n-- SQL: SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the average enrollment of universities founded before 1850.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(enrollment) FROM university WHERE founded  <  1850;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Return the primary conference of the school with the lowest acc percentage score.", "output": "```gerenated SQL\n-- SQL: SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "output": "```gerenated SQL\n-- SQL: SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the schools that were either founded after 1850 or public.", "output": "```gerenated SQL\n-- SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What are the names of teams from universities that have a below average enrollment?", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "List all information regarding the basketball match.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "output": "```gerenated SQL\n-- SQL: SELECT t2.team_name FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT AVG(enrollment) FROM university);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\nCREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Find the location and all games score of the school that has Clemson as its team name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.all_games ,  t1.location FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different schools and their nicknames, ordered by their founding years?", "output": "```gerenated SQL\n-- SQL: SELECT school ,  nickname FROM university ORDER BY founded;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Show the enrollment and primary_conference of the oldest college.", "output": "```gerenated SQL\n-- SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "Return the highest acc percent across all basketball matches.", "output": "```gerenated SQL\n-- SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is the highest acc percent score in the competition?", "output": "```gerenated SQL\n-- SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the public schools and what are their locations?", "output": "```gerenated SQL\n-- SQL: SELECT school ,  location FROM university WHERE affiliation  =  'Public';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Return the maximum enrollment across all schools.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "How many universities have a location that contains NY?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE location LIKE \"%NY%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the total and minimum enrollment of all schools?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  MIN(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Count the number of different affiliation types.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT affiliation) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "When was the school with the largest enrollment founded?", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the total enrollments of universities of each affiliation type?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "What is all the information about the basketball match?", "output": "```gerenated SQL\n-- SQL: SELECT * FROM basketball_match;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the maximum enrollment across all schools?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(enrollment) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the enrollment and primary conference for the university which was founded the earliest?", "output": "```gerenated SQL\n-- SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find how many different affiliation types there are.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT affiliation) FROM university;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What is the founded year of the non public school that was founded most recently?", "output": "```gerenated SQL\n-- SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `basketball_match` (\r\n  Team_ID INT PRIMARY KEY,\r\n  School_ID INT REFERENCES university(School_ID),\r\n  Team_Name TEXT,\r\n  ACC_Regular_Season TEXT,\r\n  ACC_Percent TEXT,\r\n  ACC_Home TEXT,\r\n  ACC_Road TEXT,\r\n  All_Games TEXT,\r\n  All_Games_Percent INT,\r\n  All_Home TEXT,\r\n  All_Road TEXT,\r\n  All_Neutral TEXT\r\n);\n\n", "input": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT team_name FROM basketball_match ORDER BY all_home DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find the total student enrollment for different affiliation type schools.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(enrollment) ,  affiliation FROM university GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `university` (\r\n  School_ID INT PRIMARY KEY,\r\n  School TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Affiliation TEXT,\r\n  Enrollment REAL,\r\n  Nickname TEXT,\r\n  Primary_conference TEXT\r\n);\n\n", "input": "Find how many school locations have the word 'NY'.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM university WHERE location LIKE \"%NY%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a restaurant in mountain view that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many jamerican cuisine are there in santa cruz county ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can we find a restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what is a good restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good arabics on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can we find some restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "how many buttercup kitchen are there in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for chinese are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what is the best american restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some restaurants good for arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what are some good places in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where can i eat french food in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where are some restaurants good for french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is a good restaurant in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best place in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what is the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where can i find a restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Where is the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a good restaurant in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good place in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where can we find some restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good places for arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many italian restaurants are in the yolo county ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good place in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good arabic restaurants in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `category` (\r\n  id INT PRIMARY KEY,\r\n  business_id TEXT REFERENCES business(business_id),\r\n  category_name TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\n", "input": "how many french restaurants are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can we find some restaurants in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a restaurant on buchanan in san francisco that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i find a jamerican cuisine in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is a good french restaurant in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is jamerican cuisine ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some good arabics in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "show me a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "What is the best place in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Where is the best french in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a restaurant in mountain view that serves good arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some good arabic restaurants in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good places on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is the best restaurant in bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what are some good restaurants in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat some good arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a good restaurant in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good restaurants on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Give me the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good places for arabic in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a arabic restaurant on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good place on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what are some good restaurants in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat some good arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many chinese places are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many denny are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is denny in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good restaurants on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some restaurants good for arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "what is the best american in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many chinese restaurants are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is a good restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where is the best restaurant in the bay area for american food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good restaurant in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some restaurants good for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is the best french restaurant in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what is a good restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good place on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for arabic food on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a restaurant in alameda ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where can i eat french food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\nCREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\n", "input": "how many places for chinese food are there in the bay area ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "Where is the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "where can i eat some good french food in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good arabic restaurant in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some good arabics in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "how many places for french food are there in palo alto ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a good place in the yosemite and mono lake area for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me some restaurants good for arabic food in mountain view ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\nCREATE TABLE `GEOGRAPHIC` (\r\n  CITY_NAME TEXT PRIMARY KEY,\r\n  COUNTY TEXT,\r\n  REGION TEXT\r\n);\n\n", "input": "give me a good french restaurant in the yosemite and mono lake area ?", "output": "```gerenated SQL\n-- SQL: SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where are some good arabics on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good restaurant on bethel island rd in bethel island ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "What is the best restaurant in san francisco for french food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "where is a good restaurant on buchanan in san francisco for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "what are some good places in mountain view for arabic food ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `RESTAURANT` (\r\n  ID INT PRIMARY KEY,\r\n  NAME TEXT,\r\n  FOOD_TYPE TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME),\r\n  RATING REAL\r\n);\n\nCREATE TABLE `LOCATION` (\r\n  RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID),\r\n  HOUSE_NUMBER INT,\r\n  STREET_NAME TEXT,\r\n  CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME)\r\n);\n\n", "input": "give me a good arabic on buchanan in san francisco ?", "output": "```gerenated SQL\n-- SQL: SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the name and email for the users who have more than one follower.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.email FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the number of tweets in record.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM tweets;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the names of users whose emails contain 鈥榮uperstar鈥?or 鈥榚du鈥?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and partition id for users who tweeted less than twice.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.partitionid FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  <  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 GROUP BY t2.f1 HAVING COUNT(*)  >  (SELECT COUNT(*) FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f1 WHERE t1.name  =  'Tyler Swift');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Find the number of users who posted some tweets.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT uid) FROM tweets;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the average number of followers for the users who do not have any tweet.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(followers) FROM user_profiles WHERE uid NOT IN (SELECT uid FROM tweets);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "How many users are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM user_profiles;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the maximum and total number of followers of all users.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(followers) ,  SUM(followers) FROM user_profiles;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "How many followers does each user have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM follows;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  followers FROM user_profiles ORDER BY followers DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the names of users who have more than one tweet.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the user whose name contains the word 鈥楽wift鈥?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\n", "input": "Find the emails of the user named \"Mary\".", "output": "```gerenated SQL\n-- SQL: SELECT email FROM user_profiles WHERE name  =  'Mary';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the average number of followers for the users who had some tweets.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(followers) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "Return the text of tweets about the topic 'intern'.", "output": "```gerenated SQL\n-- SQL: SELECT text FROM tweets WHERE text LIKE '%intern%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\n", "input": "List the text of all tweets in the order of date.", "output": "```gerenated SQL\n-- SQL: SELECT text FROM tweets ORDER BY createdate;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `tweets` (\r\n  id bigint(20) PRIMARY KEY,\r\n  uid int(11) REFERENCES user_profiles(uid),\r\n  text char(140),\r\n  createdate datetime\r\n);\n\nCREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name of each user and number of tweets tweeted by each of them.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  COUNT(*) FROM user_profiles as t1 JOIN tweets as t2 ON t1.uid  =  t2.uid GROUP BY t2.uid;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name of the user who has the largest number of followers.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "Find the name and email of the user followed by the least number of people.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the id of users who are followed by Mary or Susan.", "output": "```gerenated SQL\n-- SQL: SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Mary\" OR t1.name  =  \"Susan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the number of followers for each user.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM follows GROUP BY f1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\nCREATE TABLE `follows` (\r\n  f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid),\r\n  f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid)\r\n);\n\n", "input": "Find the id of users who are followed by Mary and Susan.", "output": "```gerenated SQL\n-- SQL: SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Mary\" INTERSECT SELECT t2.f1 FROM user_profiles as t1 JOIN follows as t2 ON t1.uid  =  t2.f2 WHERE t1.name  =  \"Susan\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `user_profiles` (\r\n  uid int(11) PRIMARY KEY,\r\n  name varchar(255),\r\n  email varchar(255),\r\n  partitionid int(11),\r\n  followers int(11)\r\n);\n\n", "input": "What is the partition id of the user named \"Iron Man\".", "output": "```gerenated SQL\n-- SQL: SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE zip_code  =  94107 AND events != \"Fog\" AND events != \"Rain\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "List the name and the number of stations for all the cities that have at least 15 stations.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "Which trip started from the station with the largest dock count? Give me the trip id.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the zip code in which the average mean sea level pressure is the lowest?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "When and in what zip code did max temperature reach 80?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the 3 most common cloud covers in the zip code of 94107?", "output": "```gerenated SQL\n-- SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude of stations located in San Jose city?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the ids and names of stations from which at least 200 trips started.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the shortest trip?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip ORDER BY duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of stations that have latitude lower than 37.5?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE lat  <  37.5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the latitude, longitude, city of the station from which the shortest trip started?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many different bike ids are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bike_id) FROM trip;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids of the trips that lasted the longest and how long did they last?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, select all those that have an average mean visiblity below 10.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, list their names in decreasing order by their highest station latitude.", "output": "```gerenated SQL\n-- SQL: SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the bike that traveled the most in 94002?", "output": "```gerenated SQL\n-- SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each start station id, what is its name, longitude and average duration of trips started there?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the start station's name and id for the one that had the most start trips in August?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude of the starting points of all trips?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the number of distinct cities the stations are located at?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM station;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many different cities have these stations?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM station;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the zip code that has the lowest average mean sea level pressure?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the station station and end station for the trips with the three smallest ids?", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the installation date for each ending station on all the trips?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t2.installation_date FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that have an average sea level pressure between 30.3 and 31?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many trips did not end in San Francisco?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city != \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, what is the highest latitude for its stations?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  MAX(lat) FROM station GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the dates when the max temperature was higher than 85.", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE max_temperature_f  >  85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the zip code in which the average mean visibility is lower than 10.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids and durations of the trips with the top 3 durations?", "output": "```gerenated SQL\n-- SQL: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the different ids and names of the stations that have had more than 12 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "From the trip record, find the number of unique bikes.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bike_id) FROM trip;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "On which day has it neither been foggy nor rained in the zip code of 94107?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE zip_code  =  94107 AND events != \"Fog\" AND events != \"Rain\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the total and maximum duration for all trips with the bike id 636?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the different names for each station that has ever had 7 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the start station and end station for the trips with the three oldest id.", "output": "```gerenated SQL\n-- SQL: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Which bike traveled the most often in zip code 94002?", "output": "```gerenated SQL\n-- SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of all stations with a latitude smaller than 37.5?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE lat  <  37.5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "List all the distinct stations from which a trip of duration below 100 started.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average bike availability in stations that are not located in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.lat ,  MIN(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.end_station_id GROUP BY t2.end_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the name, latitude, and city of the station with the lowest latitude?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are all the different zip codes that have a maximum dew point that was always below 70?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "How many days had both mean humidity above 50 and mean visibility above 8?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average longitude of stations that never had bike availability more than 10?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available)  >  10);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Find all the zip codes in which the max dew point have never reached 70.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each city, return the highest latitude among its stations.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  MAX(lat) FROM station GROUP BY city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "Return the unique name for stations that have ever had 7 bikes available.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  =  7;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many stations does Mountain View city has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available)  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the id of the trip that started from the station with the highest dock count?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code  =  94107);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are all the different start station names for a trip that lasted less than 100?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many trips started from Mountain View city and ended at Palo Alto city?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  \"Mountain View\" AND t3.city  =  \"Palo Alto\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "Count the number of trips that did not end in San Francisco city.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city !=  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the total and maximum duration of trips with bike id 636?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(duration) ,  MAX(duration) FROM trip WHERE bike_id  =  636;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the name of every city that has at least 15 stations and how many stations does it have?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, return how many times max wind speed reached 25?", "output": "```gerenated SQL\n-- SQL: SELECT zip_code , COUNT(*) FROM weather WHERE max_wind_speed_mph  >=  25 GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "output": "```gerenated SQL\n-- SQL: SELECT t1.id FROM trip as t1 JOIN weather as t2 ON t1.zip_code  =  t2.zip_code GROUP BY t2.zip_code HAVING AVG(t2.mean_temperature_f)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "For each zip code, return the average mean temperature of August there.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.id FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(t2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*)  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the days that had the smallest temperature range, and what was that range?", "output": "```gerenated SQL\n-- SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `status` (\r\n  station_id INTEGER REFERENCES station(id),\r\n  bikes_available INTEGER,\r\n  docks_available INTEGER,\r\n  time TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average bike availablility for stations not in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "For each station, return its longitude and the average duration of trips that started from the station.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "output": "```gerenated SQL\n-- SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*)  >=  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM station as t1 JOIN trip as t2 JOIN station as t3 JOIN trip as t4 ON t1.id  =  t2.start_station_id AND t2.id  =  t4.id AND t3.id  =  t4.end_station_id WHERE t1.city  =  \"Mountain View\" AND t3.city  =  \"Palo Alto\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What is the id of the trip that has the shortest duration?", "output": "```gerenated SQL\n-- SQL: SELECT id FROM trip ORDER BY duration LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `trip` (\r\n  id INTEGER,\r\n  duration INTEGER,\r\n  start_date TEXT,\r\n  start_station_name TEXT,\r\n  start_station_id INTEGER,\r\n  end_date TEXT,\r\n  end_station_name TEXT,\r\n  end_station_id INTEGER,\r\n  bike_id INTEGER,\r\n  subscription_type TEXT,\r\n  zip_code INTEGER\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude of all starting stations for the trips?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.lat) ,  AVG(t1.long) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `business` (\r\n  bid INT PRIMARY KEY,\r\n  business_id TEXT,\r\n  name TEXT,\r\n  full_address TEXT,\r\n  city TEXT,\r\n  latitude TEXT,\r\n  longitude TEXT,\r\n  review_count INT,\r\n  is_open INT,\r\n  rating REAL,\r\n  state TEXT\r\n);\n\nCREATE TABLE `station` (\r\n  id INTEGER,\r\n  name TEXT,\r\n  lat NUMERIC,\r\n  long NUMERIC,\r\n  dock_count INTEGER,\r\n  city TEXT,\r\n  installation_date TEXT\r\n);\n\n", "input": "What is the average latitude and longitude in San Jose?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(lat) ,  AVG(long) FROM station WHERE city  =  \"San Jose\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `weather` (\r\n  date TEXT,\r\n  max_temperature_f INTEGER,\r\n  mean_temperature_f INTEGER,\r\n  min_temperature_f INTEGER,\r\n  max_dew_point_f INTEGER,\r\n  mean_dew_point_f INTEGER,\r\n  min_dew_point_f INTEGER,\r\n  max_humidity INTEGER,\r\n  mean_humidity INTEGER,\r\n  min_humidity INTEGER,\r\n  max_sea_level_pressure_inches NUMERIC,\r\n  mean_sea_level_pressure_inches NUMERIC,\r\n  min_sea_level_pressure_inches NUMERIC,\r\n  max_visibility_miles INTEGER,\r\n  mean_visibility_miles INTEGER,\r\n  min_visibility_miles INTEGER,\r\n  max_wind_Speed_mph INTEGER,\r\n  mean_wind_speed_mph INTEGER,\r\n  max_gust_speed_mph INTEGER,\r\n  precipitation_inches INTEGER,\r\n  cloud_cover INTEGER,\r\n  events TEXT,\r\n  wind_dir_degrees INTEGER,\r\n  zip_code INTEGER\r\n);\n\n", "input": "What are the dates with a maximum temperature higher than 85?", "output": "```gerenated SQL\n-- SQL: SELECT date FROM weather WHERE max_temperature_f  >  85;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus has the most degrees  conferrred over its entire existence?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are in Los Angeles county?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "How many faculty members are at the university that gave the least number of degrees in 2001?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many people graduated from San Francisco State University in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  \"Orange\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus has the most degrees conferred in all times?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the total number of campuses?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "how many degrees were conferred between 1998 and 2002?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus has the most faculties in 2003?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in the county of Los Angeles?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Los Angeles county and opened after 1950?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  >  1950;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\n", "input": "How many faculty is there in total in the year of 2002?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(faculty) FROM faculty WHERE year  =  2002;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the number of faculty at Long Beach State University in 2002?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  \"Long Beach State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "List the campuses in Los Angeles county.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the count of universities whose campus fee is greater than the average campus fee.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which campus has the most faculties in year 2003?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2003 ORDER BY t2.faculty DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "Which year has the most degrees conferred?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses opened before 1800?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  <  1800;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many undergraduates are there at San Jose State", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many degrees were conferred at San Jose State University in 2000?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "In what year was the most degrees conferred?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM degrees GROUP BY year ORDER BY SUM(degrees) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "How many universities have a campus fee greater than the average?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "How many faculty members did the university that conferred the most degrees in 2002 have?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "In the year 2000, what is the campus fee for San Francisco State University?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "For each Orange county campus, report the number of degrees granted after 2000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  \"Orange\" AND t2.year  >=  2000 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2002 AND t2.campus  =  \"Long Beach State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Year INTEGER PRIMARY KEY,\r\n  TotalEnrollment_AY INTEGER,\r\n  FTE_AY INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "report the total number of degrees granted between 1998 and 2002.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t2.year  >=  1998 AND t2.year  <=  2002 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the names of all campuses located at Chico?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Chico\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the campuses that opened in 1958?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  =  1958;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many faculty lines are there at San Francisco State University in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many CSU campuses are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses opened between 1935 and 1939?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  >=  1935 AND year  <=  1939;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many degrees were conferred in \"San Jose State University\" in 2000?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Report the name of all campuses in Los Angeles county.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the average fee on a CSU campus in 1996", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Jose State University\" in year 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Francisco State University\" in year 2000?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the campus fee of \"San Francisco State University\" in year 1996?", "output": "```gerenated SQL\n-- SQL: SELECT campusfee FROM campuses as t1 JOIN csu_fees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find all the campuses opened in 1958.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE year  =  1958;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\nCREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\n", "input": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "output": "```gerenated SQL\n-- SQL: SELECT t2.faculty FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus JOIN degrees as t3 ON t1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Which university is in Los Angeles county and opened after 1950?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  >  1950;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee for a CSU campus in the year of 1996?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  1996;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "How many campuses are there in Los Angeles county?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM campuses WHERE county  =  \"Los Angeles\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "What is the average fee for a CSU campus in the year of 2005?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(campusfee) FROM csu_fees WHERE year  =  2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Chico?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Chico\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the campus fee of \"San Jose State University\" in year 2000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What degrees were conferred in San Francisco State University in the year 2001?", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Year INTEGER PRIMARY KEY,\r\n  TotalEnrollment_AY INTEGER,\r\n  FTE_AY INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN enrollments as t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND fte_ay  >  200;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE location  =  \"San Francisco\" AND county  =  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND faculty  >  (SELECT MAX(faculty) FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.year  =  2002 AND t1.county  =  \"Orange\");\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "How many universities have a campus fee higher than average?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the campus fee in the year 2000 for San Jose State University?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campusfee FROM csu_fees as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "output": "```gerenated SQL\n-- SQL: SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `degrees` (\r\n  Year INTEGER PRIMARY KEY,\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Degrees INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the total number of degrees granted after 2000 for each Orange county campus?", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  \"Orange\" AND t2.year  >=  2000 GROUP BY t1.campus;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "output": "```gerenated SQL\n-- SQL: SELECT campus FROM campuses WHERE location  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE location  =  \"San Francisco\" AND county  =  \"San Francisco\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `csu_fees` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  CampusFee INTEGER\r\n);\n\n", "input": "Find the count of universities whose campus fee is greater than the average campus fee.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `discipline_enrollments` (\r\n  Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id),\r\n  Discipline INTEGER PRIMARY KEY,\r\n  Year INTEGER,\r\n  Undergraduate INTEGER,\r\n  Graduate INTEGER\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t1.graduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `faculty` (\r\n  Campus INTEGER REFERENCES Campuses(Id),\r\n  Year INTEGER,\r\n  Faculty REAL\r\n);\n\nCREATE TABLE `Campuses` (\r\n  Id INTEGER,\r\n  Campus TEXT,\r\n  Location TEXT,\r\n  County TEXT,\r\n  Year INTEGER\r\n);\n\n", "input": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "output": "```gerenated SQL\n-- SQL: SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the most common nationality for journalists.", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists and the names of the events they reported in ascending order", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id ORDER BY t2.event_attendance asC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists and the dates of the events they reported.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.date FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "How many journalists are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the different nationalities and the number of journalists of each nationality.", "output": "```gerenated SQL\n-- SQL: SELECT nationality ,  COUNT(*) FROM journalist GROUP BY nationality;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists from \"England\" or \"Wales\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist WHERE nationality  =  \"England\" OR nationality  =  \"Wales\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "List the names of journalists who have not reported any event.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "what are the average and maximum attendances of all events?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(event_attendance) ,  MAX(event_attendance) FROM event;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists and the number of events they reported.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  COUNT(*) FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "List the event venues and names that have the top 2 most number of people attended.", "output": "```gerenated SQL\n-- SQL: SELECT venue ,  name FROM event ORDER BY event_attendance DESC LIMIT 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the names of journalists that have reported more than one event.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `news_report` (\r\n  journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID),\r\n  Event_ID INT PRIMARY KEY REFERENCES event(Event_ID),\r\n  Work_Type TEXT\r\n);\n\nCREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Find the average age and experience working length of journalists working on different role type.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.age) ,  AVG(years_working) ,  t2.work_type FROM journalist as t1 JOIN news_report as t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist WHERE years_working  >  10 INTERSECT SELECT nationality FROM journalist WHERE years_working  <  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What is the average number of years spent working as a journalist?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(years_working) FROM journalist;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "What is the nationality of the journalist with the largest number of years working?", "output": "```gerenated SQL\n-- SQL: SELECT nationality FROM journalist ORDER BY years_working DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `event` (\r\n  Event_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT,\r\n  Event_Attendance INT\r\n);\n\n", "input": "Show the dates, places, and names of events in descending order of the attendance.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  name ,  venue FROM event ORDER BY event_attendance DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `journalist` (\r\n  journalist_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Nationality TEXT,\r\n  Age TEXT,\r\n  Years_working INT\r\n);\n\n", "input": "List the names of journalists in ascending order of years working.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM journalist ORDER BY years_working ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many king beds are there?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(beds) FROM rooms WHERE bedtype  =  'King';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the name of rooms whose price is higher than the average price.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice  >  ( SELECT AVG(baseprice) FROM rooms );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Which room has the highest base price?", "output": "```gerenated SQL\n-- SQL: SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "output": "```gerenated SQL\n-- SQL: SELECT adults FROM reservations WHERE checkin  =  \"2010-10-23\" AND firstname  =  \"CONRAD\" AND lastname  =  \"SELBIG\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the name of rooms whose base price is between 120 and 150.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Sort all the rooms according to the price. Just report the room names.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms ORDER BY baseprice;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many rooms are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "How many times does ROY SWEAZY has reserved a room.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM reservations WHERE firstname = \"ROY\" AND lastname  =  \"SWEAZY\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the names of rooms that have been reserved for more than 60 times.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room HAVING COUNT(*)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE firstname LIKE '%ROY%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the total number of king beds available.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(beds) FROM rooms WHERE bedtype  =  'King';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "List the type of bed and name of all traditional rooms.", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  bedtype FROM rooms WHERE decor = \"traditional\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "output": "```gerenated SQL\n-- SQL: SELECT kids FROM reservations WHERE checkin  =  \"2010-09-21\" AND firstname  =  \"DAMIEN\" AND lastname  =  \"TRACHSEL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Which room has the largest number of reservations?", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY COUNT(*) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "How many kids stay in the rooms reserved by ROY SWEAZY?", "output": "```gerenated SQL\n-- SQL: SELECT kids FROM reservations WHERE firstname = \"ROY\" AND lastname  =  \"SWEAZY\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What kind of decor has the least number of reservations?", "output": "```gerenated SQL\n-- SQL: SELECT t2.decor FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t2.decor ORDER BY COUNT(t2.decor) asC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the number of rooms with a king bed.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms WHERE bedtype  =  \"King\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "output": "```gerenated SQL\n-- SQL: SELECT adults FROM reservations WHERE checkin  =  \"2010-10-23\" AND firstname  =  \"CONRAD\" AND lastname  =  \"SELBIG\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many different types of beds are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bedtype) FROM rooms;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname ,  t1.rate ,  t1.checkin ,  t1.checkout FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY t1.rate DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the least popular kind of decor?", "output": "```gerenated SQL\n-- SQL: SELECT t2.decor FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t2.decor ORDER BY COUNT(t2.decor) asC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "For each room, find its name and the number of times reservations were made for it.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname ,  COUNT(*) ,  t1.room FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the first and last names of people who payed more than the rooms' base prices.", "output": "```gerenated SQL\n-- SQL: SELECT t1.firstname ,  t1.lastname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t1.rate - t2.baseprice  >  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the number of rooms for each bed type.", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  COUNT(*) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the names of rooms whose reservation frequency exceeds 60 times?", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room HAVING COUNT(*)  >  60;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the total number of people who could stay in the modern rooms in this inn?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(maxoccupancy) FROM rooms WHERE decor  =  'modern';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many rooms have a king bed?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms WHERE bedtype  =  \"King\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  roomid FROM rooms WHERE baseprice  >  160 AND maxoccupancy  >  2;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the names of rooms that have either king or queen bed?", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE bedtype  =  \"King\" OR bedtype  =  \"Queen\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Return the decor of the room named \"Recluse and defiance\".", "output": "```gerenated SQL\n-- SQL: SELECT decor FROM rooms WHERE roomname  =  \"Recluse and defiance\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the number of rooms with price higher than 120 for different decor.", "output": "```gerenated SQL\n-- SQL: SELECT decor , COUNT(*) FROM rooms WHERE baseprice  >  120 GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "For each bed type, find the average base price of different bed type.", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t2.maxoccupancy  =  t1.adults + t1.kids;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the total number of rooms available in this inn?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the bed type and name of all the rooms with traditional decor?", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  bedtype FROM rooms WHERE decor = \"traditional\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Which rooms cost between 120 and 150? Give me the room names.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "output": "```gerenated SQL\n-- SQL: SELECT kids FROM reservations WHERE checkin  =  \"2010-09-21\" AND firstname  =  \"DAMIEN\" AND lastname  =  \"TRACHSEL\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Return the name and number of reservations made for each of the rooms.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname ,  COUNT(*) ,  t1.room FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many rooms have not had any reservation yet?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many rooms cost more than 120, for each different decor?", "output": "```gerenated SQL\n-- SQL: SELECT decor , COUNT(*) FROM rooms WHERE baseprice  >  120 GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  decor FROM rooms WHERE bedtype  =  'King' ORDER BY baseprice;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the name of the room with the maximum occupancy.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the name and id of the top 3 expensive rooms.", "output": "```gerenated SQL\n-- SQL: SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the name and id of the three highest priced rooms?", "output": "```gerenated SQL\n-- SQL: SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Return the name, rate, check in and check out date for the room with the highest rate.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname ,  t1.rate ,  t1.checkin ,  t1.checkout FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY t1.rate DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "output": "```gerenated SQL\n-- SQL: SELECT t2.roomname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId GROUP BY t1.room ORDER BY COUNT(*) DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\nCREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the first and last names of people who payed more than the rooms' base prices?", "output": "```gerenated SQL\n-- SQL: SELECT t1.firstname ,  t1.lastname FROM reservations as t1 JOIN rooms as t2 ON t1.room  =  t2.roomId WHERE t1.rate - t2.baseprice  >  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the decor of room Recluse and defiance?", "output": "```gerenated SQL\n-- SQL: SELECT decor FROM rooms WHERE roomname  =  \"Recluse and defiance\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "Find the number of times ROY SWEAZY has reserved a room.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM reservations WHERE firstname = \"ROY\" AND lastname  =  \"SWEAZY\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the id and name of the most expensive base price room.", "output": "```gerenated SQL\n-- SQL: SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "For each bed type, find the average room price.", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the average base price of different bed type? List bed type and average base price.", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the names and decor of rooms with a king bed? Sort them by their price", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  decor FROM rooms WHERE bedtype  =  'King' ORDER BY baseprice;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Reservations` (\r\n  Code INTEGER,\r\n  Room TEXT REFERENCES Rooms(RoomId),\r\n  CheckIn TEXT,\r\n  CheckOut TEXT,\r\n  Rate REAL,\r\n  LastName TEXT,\r\n  FirstName TEXT,\r\n  Adults INTEGER,\r\n  Kids INTEGER\r\n);\n\n", "input": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "output": "```gerenated SQL\n-- SQL: SELECT kids FROM reservations WHERE firstname = \"ROY\" AND lastname  =  \"SWEAZY\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the number of rooms for each bed type?", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  COUNT(*) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  roomid FROM rooms WHERE baseprice  >  160 AND maxoccupancy  >  2;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many people in total can stay in the modern rooms of this inn?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(maxoccupancy) FROM rooms WHERE decor  =  'modern';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the average minimum and price of the rooms for each different decor.", "output": "```gerenated SQL\n-- SQL: SELECT decor , AVG(baseprice) ,  MIN(baseprice) FROM rooms GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What is the average base price of rooms, for each bed type?", "output": "```gerenated SQL\n-- SQL: SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the name of rooms that cost more than the average.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice  >  ( SELECT AVG(baseprice) FROM rooms );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Which room has cheapest base price? List the room's name and the base price.", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  baseprice FROM rooms ORDER BY baseprice ASC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "List the name of all rooms sorted by their prices.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms ORDER BY baseprice;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice  <  160 AND beds =  2 AND decor  =  'modern';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "How many rooms have king beds? Report the number for each decor type.", "output": "```gerenated SQL\n-- SQL: SELECT decor ,  COUNT(*) FROM rooms WHERE bedtype = \"King\" GROUP BY decor;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the number of distinct bed types available in this inn.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT bedtype) FROM rooms;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "What are the room name and base price of the room with the lowest base price?", "output": "```gerenated SQL\n-- SQL: SELECT roomname ,  baseprice FROM rooms ORDER BY baseprice ASC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rooms` (\r\n  RoomId TEXT PRIMARY KEY,\r\n  roomName TEXT,\r\n  beds INTEGER,\r\n  bedType TEXT,\r\n  maxOccupancy INTEGER,\r\n  basePrice INTEGER,\r\n  decor TEXT\r\n);\n\n", "input": "Find the names of all modern rooms with a base price below $160 and two beds.", "output": "```gerenated SQL\n-- SQL: SELECT roomname FROM rooms WHERE baseprice  <  160 AND beds =  2 AND decor  =  'modern';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which author has written the most papers? Find his or her last name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which institution does \"Katsuhiro Ueno\" belong to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What are the last names of the author of the paper titled \"Binders Unbound\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "How many papers are published in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM papers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the titles of all the papers written by \"Jeremy Gibbons\"", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the last name of the author with first name \"Amal\".", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors WHERE fname  =  \"Amal\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Count the number of institutions.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM inst;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Count the number of total papers.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM papers;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find all the papers published by \"Aaron Turon\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%Database%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors belong to the institution \"Google\"? Show the first names and last names.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What is the last name of the author that has published the most papers?", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the first names of all the authors ordered in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors ORDER BY fname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Find the name of the organization that has published the largest number of papers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Which papers were written by authors from the institution \"Google\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "How many papers are published by the institution \"Tokohu University\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Find the titles of the papers that contain the word \"ML\".", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%ML%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Sort the first names of all the authors in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors ORDER BY fname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What is the name of the institution that \"Matthias Blume\" belongs to?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Find all the papers published by the institution \"Google\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors have first name \"Amal\"? List their last names.", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors WHERE fname  =  \"Amal\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "How many authors are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What is the first name of the author with last name \"Ueno\"?", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors WHERE lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Retrieve the country that has published the most papers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which papers have \"Stephanie Weirich\" as an author?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Count the number of authors.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "List the titles of the papers whose authors are from the institution \"Indiana University\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "What are the papers published under the institution \"Indiana University\"?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Which institution has the most papers? Find the name of the institution.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Give me a list of all the last names of authors sorted in alphabetical order", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Retrieve all the last names of authors in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the titles of all the papers written by \"Aaron Turon\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Retrieve the title of the paper that has the largest number of authors.", "output": "```gerenated SQL\n-- SQL: SELECT t2.title FROM authorship as t1 JOIN papers as t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT MAX(authorder) FROM authorship);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Which authors have last name \"Ueno\"? List their first names.", "output": "```gerenated SQL\n-- SQL: SELECT fname FROM authors WHERE lname  =  \"Ueno\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "What are the titles of papers published by \"Jeremy Gibbons\"?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "How many institutions are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM inst;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Find the number of papers published by authors from the institution \"Tokohu University\".", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "Find the country that the most papers are affiliated with.", "output": "```gerenated SQL\n-- SQL: SELECT t1.country FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "How many papers have \"Atsushi Ohori\" published?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\n", "input": "How many papers are written by authors from the institution \"University of Pennsylvania\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `writes` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  authorId INTEGER PRIMARY KEY REFERENCES author(authorId)\r\n);\n\nCREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Find the papers which have \"Olin Shivers\" as an author.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authorship` (\r\n  authID INTEGER PRIMARY KEY REFERENCES Authors(authID),\r\n  instID INTEGER PRIMARY KEY REFERENCES Inst(instID),\r\n  paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID),\r\n  authOrder INTEGER\r\n);\n\nCREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\nCREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\nCREATE TABLE `Inst` (\r\n  instID INTEGER,\r\n  name TEXT,\r\n  country TEXT\r\n);\n\n", "input": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "output": "```gerenated SQL\n-- SQL: SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid JOIN inst as t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Authors` (\r\n  authID INTEGER,\r\n  lname TEXT,\r\n  fname TEXT\r\n);\n\n", "input": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "output": "```gerenated SQL\n-- SQL: SELECT fname ,  lname FROM authors ORDER BY lname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Papers` (\r\n  paperID INTEGER,\r\n  title TEXT\r\n);\n\n", "input": "Which paper's title contains the word \"Database\"?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM papers WHERE title LIKE \"%Database%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(num_of_shops) ,  AVG(num_of_factories) FROM manufacturer WHERE open_year  <  1990;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "How many furniture components are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(num_of_component) FROM furniture;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Find the average number of factories for the manufacturers that have more than 20 shops.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(num_of_factories) FROM manufacturer WHERE num_of_shops  >  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\nCREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Find the number of funiture types produced by each manufacturer as well as the company names.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  t1.name FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Give me the names and prices of furnitures which some companies are manufacturing.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t2.price_in_dollar FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "List all manufacturer names and ids ordered by their opening year.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the market shares and names of furnitures which no any company is producing in our records.", "output": "```gerenated SQL\n-- SQL: SELECT market_rate ,  name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\nCREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\n", "input": "Find the names of furnitures whose prices are lower than the highest price.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id WHERE t2.price_in_dollar  <  (SELECT MAX(price_in_dollar) FROM furniture_manufacte);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Which manufacturer has the most number of shops? List its name and year of opening.", "output": "```gerenated SQL\n-- SQL: SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Return the name and id of the furniture with the highest market rate.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture_manufacte` (\r\n  Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID),\r\n  Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID),\r\n  Price_in_Dollar REAL\r\n);\n\nCREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Find the id and number of shops for the company that produces the most expensive furniture.", "output": "```gerenated SQL\n-- SQL: SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer as t1 JOIN furniture_manufacte as t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manufacturer` (\r\n  Manufacturer_ID INT PRIMARY KEY,\r\n  Open_Year REAL,\r\n  Name TEXT,\r\n  Num_of_Factories INT,\r\n  Num_of_Shops INT\r\n);\n\n", "input": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR num_of_factories  <  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "Find the component amounts and names of all furnitures that have more than 10 components.", "output": "```gerenated SQL\n-- SQL: SELECT num_of_component ,  name FROM furniture WHERE num_of_component  >  10;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `furniture` (\r\n  Furniture_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Num_of_Component INT,\r\n  Market_Rate REAL\r\n);\n\n", "input": "find the total market rate of the furnitures that have the top 2 market shares.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who has friends that are older than the average age? Print their friends and their ages as well", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the person who has exactly one friend.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend GROUP BY name HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of all the people who are older than at least one engineer? Order them by age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the age of the friend of Zach with longest year relationship?", "output": "```gerenated SQL\n-- SQL: SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names and ages of every person who is a friend of both Dan and Alice?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for all person?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the female friends of Alice.", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of everybody sorted by age in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name and age of all males in order of their age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many friends does Dan have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the age of the doctor named Zach?", "output": "```gerenated SQL\n-- SQL: SELECT age FROM person WHERE job  =  'doctor' AND name  =  'Zach';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the number of people who is under 40 for each gender.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the youngest person for each job?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people are older than every engineer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  (SELECT MAX(age) FROM person WHERE job  =  'engineer');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Which person whose friends have the oldest average age?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the different names and ages of every friend of either Dan or alice?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the total number of people who has no friend living in the city of Austin.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of persons who are friends with Bob.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of the person who has friends with age above 40 and under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is average age of male for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different cities do people originate from?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different cities are they from?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "list the name, job title of all people ordered by their names.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  job FROM person ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of the people who are older 40 but no friends under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of all friends who are from New York?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the names of females who are friends with Zach", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find Alice's friends of friends.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are all the friends of Alice who are female?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of the person who has no student friends.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is each gender, on average?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  gender FROM person GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Find the name of persons who are friends with Alice for the shortest years.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for a male in each job?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person WHERE gender  =  'male' GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for all people in the table?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many type of jobs do they have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT job) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who are Bob's friends?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of every person who has a friend over 40 and under 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) INTERSECT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Which friend of Zach has the longest-lasting friendship?", "output": "```gerenated SQL\n-- SQL: SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many different jobs are listed?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT job) FROM person;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is minimum age for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of all females who are friends with Zach?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of the person who has friends with age above 40 but not under age 30?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many females does this network has?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How old is the average person for each job?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the youngest male?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name and age of the person who is a friend of Dan or Alice.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  AVG(t1.age) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend GROUP BY t2.name ORDER BY AVG(t1.age) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people are under 40 for each gender?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  gender FROM person WHERE age  <  40 GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the total number of people who have no friends living in Austin?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who are the friends of Alice that are doctors?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name of people whose age is greater than any engineer sorted by their age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  >  (SELECT MIN(age) FROM person WHERE job  =  'engineer') ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the names of all person sorted in the descending order using age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the ages of all of Zach's friends who are in the longest relationship?", "output": "```gerenated SQL\n-- SQL: SELECT t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name =  'Zach' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of all people who do not have friends?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT name FROM personfriend;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many friends does Dan have?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(t2.friend) FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Dan';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the person whose age is below 30?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  <  30;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who has friends that are younger than the average age?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name and age of every male? Order the results by age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE gender  =  'male' ORDER BY age;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the oldest person?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many females are in the network?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the oldest student?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who is the person that has no friend?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person EXCEPT SELECT name FROM personfriend;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names and job titles of every person ordered alphabetically by name?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  job FROM person ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the male friend of Alice whose job is a doctor?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the average age for each gender?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  gender FROM person GROUP BY gender;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the person whose age is below 30?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  <  30;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is average age for different job title?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  job FROM person GROUP BY job;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name ,  t2.friend ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  >  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who has a friend that is from new york city?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.city  =  'new york city';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the names of all of Alice's friends of friends?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t4.name FROM personfriend as t1 JOIN person as t2 ON t1.name  =  t2.name JOIN personfriend as t3 ON t1.friend  =  t3.name JOIN personfriend as t4 ON t3.friend  =  t4.name WHERE t2.name  =  'Alice' AND t4.name != 'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What is the name of the person who is the oldest?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM person WHERE age  =  (SELECT MAX(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Find the name and age of the person who is a friend of both Dan and Alice.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "What are the different names of friends who are younger than the average age for a friend?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.age  <  (SELECT AVG(age) FROM person);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "What are the names of all people who are friends with Alice for the shortest amount of time?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM personfriend WHERE friend =  'Alice' AND year  =  (SELECT MIN(year) FROM personfriend WHERE friend =  'Alice');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "HOw many engineers are older than 30?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "How many people whose age is greater 30 and job is engineer?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM person WHERE age  >  30 AND job  =  'engineer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\nCREATE TABLE `Person` (\r\n  name varchar(20) PRIMARY KEY,\r\n  age INTEGER,\r\n  city TEXT,\r\n  gender TEXT,\r\n  job TEXT\r\n);\n\n", "input": "Who are the friends of Bob?", "output": "```gerenated SQL\n-- SQL: SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t1.name  =  'Bob';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `PersonFriend` (\r\n  name varchar(20) REFERENCES Person(name),\r\n  friend varchar(20) REFERENCES Person(name),\r\n  year INTEGER\r\n);\n\n", "input": "Who is the friend of Zach with longest year relationship?", "output": "```gerenated SQL\n-- SQL: SELECT friend FROM personfriend WHERE name =  'Zach' AND year  =  (SELECT MAX(year) FROM personfriend WHERE name =  'Zach');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "Which enzyme names have the substring \"ALA\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the count of enzymes without any interactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids and names of the medicine that can interact with two or more enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.location ,  t1.product FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t2.enzyme_id  =  t1.id WHERE t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines are offered by each trade name?", "output": "```gerenated SQL\n-- SQL: SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.interaction_type FROM medicine_enzyme_interaction as t1 JOIN medicine as t2 ON t1.medicine_id  =  t2.id JOIN enzyme as t3 ON t1.enzyme_id  =  t3.id WHERE t3.name  =  'ALA synthase' AND t2.name  =  'Aripiprazole';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines were not approved by the FDA?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "How many kinds of enzymes are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "find the number of medicines offered by each trade.", "output": "```gerenated SQL\n-- SQL: SELECT trade_name ,  COUNT(*) FROM medicine GROUP BY trade_name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "output": "```gerenated SQL\n-- SQL: SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `paperKeyphrase` (\r\n  paperId INTEGER PRIMARY KEY REFERENCES paper(paperId),\r\n  keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId)\r\n);\n\nCREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `keyphrase` (\r\n  keyphraseId INTEGER,\r\n  keyphraseName varchar(50)\r\n);\n\n", "input": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "output": "```gerenated SQL\n-- SQL: SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names and locations of all enzymes listed?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many distinct FDA approval statuses are there for the medicines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT fda_approved) FROM medicine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes who does not produce 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE product != 'Heme';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "output": "```gerenated SQL\n-- SQL: SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE location  =  'Cytosol';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\n", "input": "What is the most common interaction type between enzymes and medicine? And how many are there?", "output": "```gerenated SQL\n-- SQL: SELECT interaction_type ,  COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id WHERE t2.interaction_type  =  'activitor' GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id WHERE interaction_type  =  'activitor';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(omim) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "List the names and the locations that the enzymes can make an effect.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  location FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many medicines have the FDA approval status 'No' ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM medicine WHERE fda_approved  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes in descending order?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme ORDER BY name DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "How many enzymes do not have any interactions?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes whose product is not 'Heme'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE product != 'Heme';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine_enzyme_interaction` (\r\n  enzyme_id INT PRIMARY KEY REFERENCES enzyme(id),\r\n  medicine_id INT PRIMARY KEY REFERENCES medicine(id),\r\n  interaction_type TEXT\r\n);\n\nCREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the total count of enzymes?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What is the maximum OMIM value in the database?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(omim) FROM enzyme;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "What are the names and trade names of the medcines that are FDA approved?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `enzyme` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Location TEXT,\r\n  Product TEXT,\r\n  Chromosome TEXT,\r\n  OMIM INT,\r\n  Porphyria TEXT\r\n);\n\n", "input": "What are the names of enzymes that include the string 'ALA'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `medicine` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Trade_Name TEXT,\r\n  FDA_approved TEXT\r\n);\n\n", "input": "How many different FDA approval statuses exist for medicines?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT fda_approved) FROM medicine;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment number and the number of rooms for each apartment.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number ,  room_count FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "What are the building full names that contain the word \"court\"?", "output": "```gerenated SQL\n-- SQL: SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show all distinct building descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT building_description FROM apartment_buildings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the facility codes of the apartments with more than four bedrooms?", "output": "```gerenated SQL\n-- SQL: SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "Find the number of apartments that have no facility.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "What are the address and phone number of the buildings managed by \"Brenden\"?", "output": "```gerenated SQL\n-- SQL: SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager\t =  \"Brenden\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the apartment number and the room count of each apartment?", "output": "```gerenated SQL\n-- SQL: SELECT apt_number ,  room_count FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the average number of bedrooms of all the apartments.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bedroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  \"Kyle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `View_Unit_Status` (\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),\r\n  status_date DATETIME PRIMARY KEY,\r\n  available_yn BIT\r\n);\n\n", "input": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type code is the most common among apartments with more than one bathroom?", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return all the apartment numbers sorted by the room count in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY room_count ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average number of bedrooms of all apartments?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(bedroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the booking status code and the corresponding number of bookings.", "output": "```gerenated SQL\n-- SQL: SELECT \tbooking_status_code ,  COUNT(*) FROM apartment_bookings GROUP BY booking_status_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the facility codes of apartments with more than 4 bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.facility_code FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  4;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the average number of rooms of apartments with type code \"Studio\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  \"Studio\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the average room count of the apartments that have the \"Studio\" type code.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  \"Studio\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "output": "```gerenated SQL\n-- SQL: SELECT building_short_name FROM apartment_buildings WHERE building_manager\t =  \"Emma\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.guest_first_name ,  t2.guest_last_name FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  \"Columbus Square\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment numbers of the apartments with type code \"Flat\".", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments WHERE apt_type_code  =  \"Flat\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the apartment number with the largest number of bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  \"Gym\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are dates of birth of all the guests whose gender is \"Male\"?", "output": "```gerenated SQL\n-- SQL: SELECT date_of_birth FROM guests WHERE gender_code  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the top three apartment types in terms of the average room count? Give me the", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Find all the building full names containing the word \"court\".", "output": "```gerenated SQL\n-- SQL: SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Return the date of birth for all the guests with gender code \"Male\".", "output": "```gerenated SQL\n-- SQL: SELECT date_of_birth FROM guests WHERE gender_code  =  \"Male\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the minimum and maximum number of bathrooms of all the apartments?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the most common apartment type code.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "output": "```gerenated SQL\n-- SQL: SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  \"Duplex\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "How many apartment bookings are there in total?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments WHERE apt_type_code  =  \"Flat\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Give me a list of all the distinct building descriptions.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT building_description FROM apartment_buildings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "output": "```gerenated SQL\n-- SQL: SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  \"Suite 634\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  COUNT(*) FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN guests as t2 ON t1.guest_id  =  t2.guest_id WHERE t2.gender_code  =  \"Female\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_type_code ,  t2.apt_number FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_manager  =  \"Kyle\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `View_Unit_Status` (\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id),\r\n  status_date DATETIME PRIMARY KEY,\r\n  available_yn BIT\r\n);\n\n", "input": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "output": "```gerenated SQL\n-- SQL: SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  0 INTERSECT SELECT t1.apt_number FROM apartments as t1 JOIN view_unit_status as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.available_yn  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Show the start dates and end dates of all the apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT booking_start_date ,  booking_end_date FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "What are the start date and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT booking_start_date ,  booking_end_date FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "Return the first names and last names of all guests", "output": "```gerenated SQL\n-- SQL: SELECT guest_first_name ,  guest_last_name FROM guests;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\n", "input": "Count the total number of apartment bookings.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartment_bookings;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_type_code  =  \"Duplex\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the most common apartment type code among apartments with more than 1 bathroom.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Guests` (\r\n  guest_id INTEGER PRIMARY KEY,\r\n  gender_code CHAR(1),\r\n  guest_first_name VARCHAR(80),\r\n  guest_last_name VARCHAR(80),\r\n  date_of_birth DATETIME\r\n);\n\n", "input": "What are the first names and last names of all the guests?", "output": "```gerenated SQL\n-- SQL: SELECT guest_first_name ,  guest_last_name FROM guests;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What is the apartment number of the apartment with the most beds?", "output": "```gerenated SQL\n-- SQL: SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the average room count of the apartments that have booking status code \"Provisional\".", "output": "```gerenated SQL\n-- SQL: SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t1.building_short_name  =  \"Columbus Square\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "What are the apartment number, start date, and end date of each apartment booking?", "output": "```gerenated SQL\n-- SQL: SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code ,  MAX(room_count) ,  MIN(room_count) FROM apartments GROUP BY apt_type_code;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Bookings` (\r\n  apt_booking_id INTEGER PRIMARY KEY,\r\n  apt_id INTEGER REFERENCES Apartments(apt_id),\r\n  guest_id INTEGER REFERENCES Guests(guest_id),\r\n  booking_status_code CHAR(15),\r\n  booking_start_date DATETIME,\r\n  booking_end_date DATETIME\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Tell me the booking status code for the apartment with number \"Suite 634\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  \"Suite 634\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\nCREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\n", "input": "How many apartments do not have any facility?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Buildings` (\r\n  building_id INTEGER PRIMARY KEY,\r\n  building_short_name CHAR(15),\r\n  building_full_name VARCHAR(80),\r\n  building_description VARCHAR(255),\r\n  building_address VARCHAR(255),\r\n  building_manager VARCHAR(50),\r\n  building_phone VARCHAR(80)\r\n);\n\n", "input": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "output": "```gerenated SQL\n-- SQL: SELECT building_address ,  building_phone FROM apartment_buildings WHERE building_manager\t =  \"Brenden\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Which apartment type code appears the most often?", "output": "```gerenated SQL\n-- SQL: SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartment_Facilities` (\r\n  apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id),\r\n  facility_code CHAR(15) PRIMARY KEY\r\n);\n\nCREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Show the total number of rooms of all apartments with facility code \"Gym\".", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  \"Gym\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Apartments` (\r\n  apt_id INTEGER PRIMARY KEY,\r\n  building_id INTEGER REFERENCES Apartment_Buildings(building_id),\r\n  apt_type_code CHAR(15),\r\n  apt_number CHAR(10),\r\n  bathroom_count INTEGER,\r\n  bedroom_count INTEGER,\r\n  room_count CHAR(5)\r\n);\n\n", "input": "Give me the minimum and maximum bathroom count among all the apartments.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(bathroom_count) ,  MAX(bathroom_count) FROM apartments;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "output": "```gerenated SQL\n-- SQL: SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100 GROUP BY t2.bname ORDER BY SUM(t1.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of banks that have loaned money to customers with credit scores below 100?", "output": "```gerenated SQL\n-- SQL: SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Count the number of different account types.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT acc_type) FROM customer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "How many distinct types of accounts are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT acc_type) FROM customer;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the branch name of the bank that has the most number of customers.", "output": "```gerenated SQL\n-- SQL: SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "output": "```gerenated SQL\n-- SQL: SELECT t2.bname FROM loan as t1 JOIN bank as t2 ON t1.branch_id  =  t2.branch_id JOIN customer as t3 ON t1.cust_id  =  t3.cust_id WHERE t3.credit_score  <  100 GROUP BY t2.bname ORDER BY SUM(t1.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names and cities of bank branches that offer loans for business?", "output": "```gerenated SQL\n-- SQL: SELECT t1.bname ,  t1.city FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t2.loan_type  =  'Business';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the average number of customers across banks in the state of Utah?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(no_of_customers) FROM bank WHERE state  =  'Utah';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of customers with credit score less than the average credit score across customers?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT AVG(credit_score) FROM customer);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the average number of customers in all banks of Utah state.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(no_of_customers) FROM bank WHERE state  =  'Utah';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the name of the bank branch with the greatest number of customers?", "output": "```gerenated SQL\n-- SQL: SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of customer who has the lowest credit score.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the city and name of bank branches that provide business loans.", "output": "```gerenated SQL\n-- SQL: SELECT t1.bname ,  t1.city FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t2.loan_type  =  'Business';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the average number of customers cross all banks.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(no_of_customers) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the total number of customers across banks?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(no_of_customers) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name ,  t1.acc_type FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING SUM(t2.amount)  >  5000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names of customers who have not taken a Mortage loan?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE t2.loan_type  =  'Mortgages';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the average number of bank customers?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(no_of_customers) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of the different banks that have provided loans?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "List the name of all customers sorted by their account balance in ascending order.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer ORDER BY acc_bal;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of customers who do not have saving accounts?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of all customers, ordered by account balance?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer ORDER BY acc_bal;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the total number of customers who use banks in New York City?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(no_of_customers) FROM bank WHERE city  =  'New York City';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "In how many different cities are banks located?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "List the name of all different customers who have some loan sorted by their total loan amount.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name and account balance of the customer whose name includes the letter 鈥榓鈥?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "How many customers are there?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(no_of_customers) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Which state has the greatest total number of bank customers?", "output": "```gerenated SQL\n-- SQL: SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name of customer who has the highest amount of loans.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the number of different states which banks are located at.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT state) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the states, account types, and credit scores for customers who have 0 loans?", "output": "```gerenated SQL\n-- SQL: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name of customers who do not have a loan with a type of Mortgages.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE t2.loan_type  =  'Mortgages';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What city and state is the bank with the name morningside in?", "output": "```gerenated SQL\n-- SQL: SELECT city ,  state FROM bank WHERE bname  =  'morningside';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the number of customers in the banks at New York City.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(no_of_customers) FROM bank WHERE city  =  'New York City';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names of the different bank branches, and what are their total loan amounts?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(amount) ,  t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the the name of the customers who have a loan with amount more than 3000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE amount  >  3000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names of customers who have a loan of more than 3000 in amount?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE amount  >  3000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the average credit score of the customers who do not have any loan.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name of customers who have more than one loan.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name of customers who have loans of both Mortgages and Auto.", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Auto';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the name of the bank branch that has lent the greatest amount?", "output": "```gerenated SQL\n-- SQL: SELECT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname ORDER BY SUM(t2.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the total account balance for customers with a credit score of above 100 for the different states?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the names and account balances of customers with the letter a in their names?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name, account type, and account balance of the customer who has the highest credit score.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the number of different cities which banks are located at.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT city) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the total amount of loans provided by bank branches in the state of New York.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.amount) FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t1.state  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the city and state of the bank branch named morningside.", "output": "```gerenated SQL\n-- SQL: SELECT city ,  state FROM bank WHERE bname  =  'morningside';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the different names and credit scores of customers who have taken a loan?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.cust_name ,  t1.credit_score FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What is the average credit score for customers who have taken a loan?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the state, account type, and credit score of the customer whose number of loan is 0.", "output": "```gerenated SQL\n-- SQL: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "In how many different states are banks located?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT state) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of customers whose credit score is below the average credit scores of all customers.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT AVG(credit_score) FROM customer);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names of customers who have taken both Mortgage and Auto loans?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id WHERE loan_type  =  'Auto';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names of customers who have taken out more than one loan?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the name and credit score of the customers who have some loans.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.cust_name ,  t1.credit_score FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the total amount of money loaned by banks in New York state?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(t2.amount) FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t1.state  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the branch names of banks in the New York state.", "output": "```gerenated SQL\n-- SQL: SELECT bname FROM bank WHERE state  =  'New York';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What are the total account balances for each customer from Utah or Texas?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of customers who have both saving and checking account types.", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "Find the average credit score of the customers who have some loan.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customers` (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR(40),\r\n  last_name VARCHAR(20),\r\n  company VARCHAR(80),\r\n  address VARCHAR(70),\r\n  city VARCHAR(40),\r\n  state VARCHAR(40),\r\n  country VARCHAR(40),\r\n  postal_code VARCHAR(10),\r\n  phone VARCHAR(24),\r\n  fax VARCHAR(24),\r\n  email VARCHAR(60),\r\n  support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id)\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the state which has the most number of customers.", "output": "```gerenated SQL\n-- SQL: SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of bank branches that provided some loans.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\nCREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the name of bank branch that provided the greatest total amount of loans.", "output": "```gerenated SQL\n-- SQL: SELECT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname ORDER BY SUM(t2.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "Find the total account balance of each customer from Utah or Texas.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "For each state, find the total account balance of customers whose credit score is above 100.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bank` (\r\n  branch_ID INT PRIMARY KEY,\r\n  bname varchar(20),\r\n  no_of_customers INT,\r\n  city varchar(10),\r\n  state varchar(20)\r\n);\n\n", "input": "Count the number of bank branches.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM bank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the name of the customer with the worst credit score?", "output": "```gerenated SQL\n-- SQL: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What is the average credit score for customers who have never taken a loan?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\n", "input": "What is the average account balance of customers with credit score below 50 for the different account types?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `customer` (\r\n  cust_ID varchar(3) PRIMARY KEY,\r\n  cust_name varchar(20),\r\n  acc_type char(1),\r\n  acc_bal INT,\r\n  no_of_loans INT,\r\n  credit_score INT,\r\n  branch_ID INT REFERENCES bank(branch_ID),\r\n  state varchar(20)\r\n);\n\nCREATE TABLE `loan` (\r\n  loan_ID varchar(3) PRIMARY KEY,\r\n  loan_type varchar(15),\r\n  cust_ID varchar(3) REFERENCES customer(Cust_ID),\r\n  branch_ID varchar(3) REFERENCES bank(branch_ID),\r\n  amount INT\r\n);\n\n", "input": "What is the name of the customer who has greatest total loan amount?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Show names of shops and the carriers of devices they have in stock.", "output": "```gerenated SQL\n-- SQL: SELECT t3.shop_name ,  t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id JOIN shop as t3 ON t1.shop_id  =  t3.shop_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "List the name of the shop with the latest open year.", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "List the carriers of devices that have no devices in stock.", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device WHERE device_id NOT IN (SELECT device_id FROM stock);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What are the names of device shops, and what are the carriers that they carry devices in stock for?", "output": "```gerenated SQL\n-- SQL: SELECT t3.shop_name ,  t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id JOIN shop as t3 ON t1.shop_id  =  t3.shop_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What is the name of the shop that has the greatest quantity of devices in stock?", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY SUM(t1.quantity) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "Please show the software platforms of devices in descending order of the count.", "output": "```gerenated SQL\n-- SQL: SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM shop WHERE open_year  >  2012 INTERSECT SELECT location FROM shop WHERE open_year  <  2008;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "Count the number of different software platforms.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT software_platform) FROM device;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "How many devices are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM device;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What is the software platform that is most common amongst all devices?", "output": "```gerenated SQL\n-- SQL: SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What are the carriers of devices that are not in stock anywhere?", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device WHERE device_id NOT IN (SELECT device_id FROM stock);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What are the names of shops that have more than a single kind of device in stock?", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "Count the number of devices.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM device;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Give the average quantity of stocks.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(quantity) FROM stock;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Show the name of the shop that have the largest quantity of devices in stock.", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY SUM(t1.quantity) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "What are the open dates and years for the shop named Apple?", "output": "```gerenated SQL\n-- SQL: SELECT open_date ,  open_year FROM shop WHERE shop_name  =  \"Apple\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Show the name of the shop that has the most kind of devices in stock.", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "How many different software platforms are there for devices?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT software_platform) FROM device;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "What is the shop name corresponding to the shop that opened in the most recent year?", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "Return the names and locations of shops, ordered by name in alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT shop_name ,  location FROM shop ORDER BY shop_name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM shop WHERE open_year  >  2012 INTERSECT SELECT location FROM shop WHERE open_year  <  2008;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "List the software platform shared by the greatest number of devices.", "output": "```gerenated SQL\n-- SQL: SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What is the name of the shop that has the most different kinds of devices in stock?", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Show names of shops that have more than one kind of device in stock.", "output": "```gerenated SQL\n-- SQL: SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What are the different software platforms for devices, ordered by frequency descending?", "output": "```gerenated SQL\n-- SQL: SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT(*) DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What are the different software platforms for devices, and how many devices have each?", "output": "```gerenated SQL\n-- SQL: SELECT software_platform ,  COUNT(*) FROM device GROUP BY software_platform;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What are the names of shops that do not have any devices in stock?", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM stock);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "List the names of shops that have no devices in stock.", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM stock);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "Please show different software platforms and the corresponding number of devices using each.", "output": "```gerenated SQL\n-- SQL: SELECT software_platform ,  COUNT(*) FROM device GROUP BY software_platform;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "Return the names of shops, ordered by year of opening ascending.", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop ORDER BY open_year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "What is the average quantity of stocks?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(quantity) FROM stock;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "Return the device carriers that do not have Android as their software platform.", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device WHERE software_platform != 'Android';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `shop` (\r\n  Shop_ID INT PRIMARY KEY,\r\n  Shop_Name TEXT,\r\n  Location TEXT,\r\n  Open_Date TEXT,\r\n  Open_Year INT\r\n);\n\n", "input": "What are the names of shops in ascending order of open year?", "output": "```gerenated SQL\n-- SQL: SELECT shop_name FROM shop ORDER BY open_year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\nCREATE TABLE `stock` (\r\n  Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID),\r\n  Device_ID INT PRIMARY KEY REFERENCES device(Device_ID),\r\n  Quantity INT\r\n);\n\n", "input": "Show the carriers of devices in stock at more than one shop.", "output": "```gerenated SQL\n-- SQL: SELECT t2.carrier FROM stock as t1 JOIN device as t2 ON t1.device_id  =  t2.device_id GROUP BY t1.device_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What are the different carriers for devices, listed in alphabetical order?", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device ORDER BY carrier ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `device` (\r\n  Device_ID INT PRIMARY KEY,\r\n  Device TEXT,\r\n  Carrier TEXT,\r\n  Package_Version TEXT,\r\n  Applications TEXT,\r\n  Software_Platform TEXT\r\n);\n\n", "input": "What are the carriers of devices whose software platforms are not \"Android\"?", "output": "```gerenated SQL\n-- SQL: SELECT carrier FROM device WHERE software_platform != 'Android';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Which flag is most widely used among all ships?", "output": "```gerenated SQL\n-- SQL: SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Sort all captain names by their ages from old to young.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Count the number of different ranks of captain.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT rank) FROM captain;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Find the ship type that are used by both ships with Panama and Malta flags.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM ship WHERE flag  =  'Panama' INTERSECT SELECT type FROM ship WHERE flag  =  'Malta';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What are the names of ships that have more than one captain?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What types of ships have both ships that have Panama Flags and Malta flags?", "output": "```gerenated SQL\n-- SQL: SELECT type FROM ship WHERE flag  =  'Panama' INTERSECT SELECT type FROM ship WHERE flag  =  'Malta';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Find the name of the ship that is steered by the youngest captain.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Which rank is the most common among captains?", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the names of captains, sorted by age descending?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain ORDER BY age DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What are the different ship flags, and how many ships have each?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  flag FROM ship GROUP BY flag;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Which classes have more than two captains?", "output": "```gerenated SQL\n-- SQL: SELECT class FROM captain GROUP BY class HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "How many captains with younger than 50 are in each rank?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Find the captain rank that has no captain in Third-rate ship of the line class.", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE class  =  'Third-rate ship of the line';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What are the names of ships, ordered by year they were built and their class?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM ship ORDER BY built_year ,  class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman');\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Count the number of ships.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM ship;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Give the classes that have more than two captains.", "output": "```gerenated SQL\n-- SQL: SELECT class FROM captain GROUP BY class HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Return the rank for which there are the fewest captains.", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the names, classes, and ranks of all captains?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class ,  rank FROM captain;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What is the year in which most ships were built?", "output": "```gerenated SQL\n-- SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "how many ships are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM ship;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Find the name of captains whose rank are either Midshipman or Lieutenant.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What is the name of the youngest captain?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain ORDER BY age LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Return the names and classes of ships that do not have a captain?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Find the name, type, and flag of the ship that is built in the most recent year.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  type ,  flag FROM ship ORDER BY built_year DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What is the name of the ship that is commanded by the youngest captain?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain WHERE class  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE class  =  'Armed schooner';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain WHERE class  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE class  =  'Armed schooner';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "What is the name, type, and flag of the ship that was built in the most recent year?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  type ,  flag FROM ship ORDER BY built_year DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "How many captains are in each rank?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  rank FROM captain GROUP BY rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the average and minimum age of captains in different class?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  MIN(age) ,  class FROM captain GROUP BY class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Count the number of captains that have each rank.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  rank FROM captain GROUP BY rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "what are the names and classes of the ships that do not have any captain yet?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Find the name, class and rank of all captains.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  class ,  rank FROM captain;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Return the name of the youngest captain.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain ORDER BY age LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "Return the average and minimum age of captains in each class.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) ,  MIN(age) ,  class FROM captain GROUP BY class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the names of captains that have either the rank Midshipman or Lieutenant?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "In which year were most of ships built?", "output": "```gerenated SQL\n-- SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "output": "```gerenated SQL\n-- SQL: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE class  =  'Third-rate ship of the line';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "List all ship names in the order of built year and class.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM ship ORDER BY built_year ,  class;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Group by ships by flag, and return number of ships that have each flag.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  flag FROM ship GROUP BY flag;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\n", "input": "How many different captain ranks are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT rank) FROM captain;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `captain` (\r\n  Captain_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Ship_ID INT REFERENCES Ship(Ship_ID),\r\n  age TEXT,\r\n  Class TEXT,\r\n  Rank TEXT\r\n);\n\nCREATE TABLE `Ship` (\r\n  Ship_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Type TEXT,\r\n  Built_Year REAL,\r\n  Class TEXT,\r\n  Flag TEXT\r\n);\n\n", "input": "Find the name of the ships that have more than one captain.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Find the names of channels that are not owned by CCTV.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner != 'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Count the number of programs.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Which channels are not owned by CCTV? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner != 'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "list all the names of programs, ordering by launch time.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "what is the number of different channel owners?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT owner) FROM channel;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "How many distinct programs are broadcast at \"Night\" time?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which programs' origins are not \"Beijing\"? Give me the program names.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program WHERE origin != 'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Find the names of the channels that are broadcast in the morning.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the program owners that have some programs in both morning and night time.", "output": "```gerenated SQL\n-- SQL: SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Night\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What are the names of the channels owned by CCTV or HBS?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel WHERE owner  =  'CCTV' OR owner  =  'HBS';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "find the total percentage share of all channels owned by CCTV.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What is the list of program names, sorted by the order of launch date?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the total rating of channel for each channel owner?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\nCREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Who are the owners of the programs that broadcast both in the morning and at night?", "output": "```gerenated SQL\n-- SQL: SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Night\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which program is broadcast most frequently? Give me the program name.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Which program was launched most recently? Return the program name.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Show me the owner of the channel with the highest rating.", "output": "```gerenated SQL\n-- SQL: SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the total share (in percent) of all the channels owned by CCTV?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(share_in_percent) FROM channel WHERE owner  =  'CCTV';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Which channels are broadcast in the morning? Give me the channel names.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "how many programs are broadcast in each time section of the day?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "List the name, origin and owner of each program.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  origin ,  owner FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "find the number of different programs that are broadcast during night time.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "What is the owner of the channel that has the highest rating ratio?", "output": "```gerenated SQL\n-- SQL: SELECT owner FROM channel ORDER BY rating_in_percent DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What is the list of program origins ordered alphabetically?", "output": "```gerenated SQL\n-- SQL: SELECT origin FROM program ORDER BY origin;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Give me a list of all the channel names sorted by the channel rating in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Find the names of programs that are never broadcasted in the morning.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\n", "input": "Count the number of programs broadcast for each time section of a day.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) ,  time_of_day FROM broadcast GROUP BY time_of_day;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the names of programs whose origin is not in Beijing.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program WHERE origin != 'Beijing';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "find the name of the program that was launched most recently.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Find the total rating ratio for each channel owner.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(rating_in_percent) ,  owner FROM channel GROUP BY owner;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "Count the number of distinct channel owners.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT owner) FROM channel;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "List all channel names ordered by their rating in percent from big to small.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "Find the name of the program that is broadcast most frequently.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `program` (\r\n  Program_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Origin TEXT,\r\n  Launch REAL,\r\n  Owner TEXT\r\n);\n\n", "input": "What are the name, origin and owner of each program?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  origin ,  owner FROM program;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `broadcast` (\r\n  Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID),\r\n  Program_ID INT PRIMARY KEY REFERENCES program(Program_ID),\r\n  Time_of_day TEXT\r\n);\n\nCREATE TABLE `channel` (\r\n  Channel_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Owner TEXT,\r\n  Share_in_percent REAL,\r\n  Rating_in_percent REAL\r\n);\n\n", "input": "what are the names of the channels that broadcast in both morning and night?", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel as t1 JOIN broadcast as t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "How many distinct parties are there for representatives?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT party) FROM representative;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What is the party that has the largest number of representatives?", "output": "```gerenated SQL\n-- SQL: SELECT party ,  COUNT(*) FROM representative GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What are the names of representatives with more than 10000 votes in election?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id WHERE votes  >  10000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What are the life spans of representatives from New York state or Indiana state?", "output": "```gerenated SQL\n-- SQL: SELECT lifespan FROM representative WHERE state  =  \"New York\" OR state  =  \"Indiana\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What are the names of representatives whose party is not \"Republican\"?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM representative WHERE party != \"Republican\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What are the names of representatives and the dates of elections they participated in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.date FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What are the names of representatives in descending order of votes?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY votes DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "output": "```gerenated SQL\n-- SQL: SELECT party FROM representative WHERE state  =  \"New York\" INTERSECT SELECT party FROM representative WHERE state  =  \"Pennsylvania\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What are the minimum and maximum vote percents of elections?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(vote_percent) ,  MAX(vote_percent) FROM election;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "output": "```gerenated SQL\n-- SQL: SELECT party ,  COUNT(*) FROM representative GROUP BY party;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What are the lifespans of representatives in descending order of vote percent?", "output": "```gerenated SQL\n-- SQL: SELECT t2.lifespan FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id ORDER BY vote_percent DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "List the dates and vote percents of elections.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  vote_percent FROM election;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What are the names and parties of representatives?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  party FROM representative;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\n", "input": "What parties have at least three representatives?", "output": "```gerenated SQL\n-- SQL: SELECT party FROM representative GROUP BY party HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "What is the average number of votes of representatives from party \"Republican\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.votes) FROM election as t1 JOIN representative as t2 ON t1.representative_id  =  t2.representative_id WHERE t2.party  =  \"Republican\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "List the votes of elections in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT votes FROM election ORDER BY votes DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "How many elections are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM election;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `representative` (\r\n  Representative_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  State TEXT,\r\n  Party TEXT,\r\n  Lifespan TEXT\r\n);\n\nCREATE TABLE `election` (\r\n  Election_ID INT PRIMARY KEY,\r\n  Representative_ID INT REFERENCES representative(Representative_ID),\r\n  Date TEXT,\r\n  Votes REAL,\r\n  Vote_Percent REAL,\r\n  Seats REAL,\r\n  Place REAL\r\n);\n\n", "input": "List the names of representatives that have not participated in elections listed here.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM representative WHERE representative_id NOT IN (SELECT representative_id FROM election);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "List all the model names sorted by their launch year.", "output": "```gerenated SQL\n-- SQL: SELECT model_name FROM chip_model ORDER BY launch_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "output": "```gerenated SQL\n-- SQL: SELECT chip_model ,  screen_mode FROM phone WHERE hardware_model_name = \"LG-P760\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "Find the number of phones for each accreditation type.", "output": "```gerenated SQL\n-- SQL: SELECT accreditation_type ,  COUNT(*) FROM phone GROUP BY accreditation_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "Find the average ram mib size of the chip models that are never used by any phone.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(ram_mib) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.hardware_model_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name  =  \"Nokia Corporation\" AND t1.type != \"Text\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.char_cells ,  t1.pixels ,  t1.hardware_colours FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.hardware_model_name = \"LG-P760\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "output": "```gerenated SQL\n-- SQL: SELECT hardware_model_name ,  company_name FROM phone WHERE accreditation_type LIKE 'Full';;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "the names of models that launched between 2002 and 2004.", "output": "```gerenated SQL\n-- SQL: SELECT model_name FROM chip_model WHERE launch_year BETWEEN 2002 AND 2004;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "Find the names of the chip models that are not used by any phone with full accreditation type.", "output": "```gerenated SQL\n-- SQL: SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type  =  'Full';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "Find the details for all chip models.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM chip_model;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.hardware_model_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type  =  \"Graphics\" OR t2.company_name  =  \"Nokia Corporation\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(t1.rom_mib) FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t2.company_name = \"Nokia Corporation\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "List the name of the company that produced more than one phone model.", "output": "```gerenated SQL\n-- SQL: SELECT company_name FROM phone GROUP BY company_name HAVING COUNT(*)  >  1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM phone WHERE company_name = \"Nokia Corporation\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.hardware_model_name , t2.company_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.used_kb BETWEEN 10 AND 15;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "output": "```gerenated SQL\n-- SQL: SELECT t2.hardware_model_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t1.launch_year = 2002 ORDER BY t1.ram_mib DESC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "output": "```gerenated SQL\n-- SQL: SELECT company_name ,  COUNT(*) FROM phone GROUP BY company_name ORDER BY COUNT(*) ASC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t1.ram_mib) ,  MIN(t1.ram_mib) FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t2.company_name = \"Nokia Corporation\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "output": "```gerenated SQL\n-- SQL: SELECT model_name ,  ram_mib FROM chip_model ORDER BY ram_mib ASC LIMIT 1;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "output": "```gerenated SQL\n-- SQL: SELECT t2.hardware_model_name ,  t2.company_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type  =  \"Graphics\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "List the maximum, minimum and average number of used kb in screen mode.", "output": "```gerenated SQL\n-- SQL: SELECT MAX(used_kb) , MIN(used_kb) , AVG(used_kb) FROM screen_mode;;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "Find the accreditation level that more than 3 phones use.", "output": "```gerenated SQL\n-- SQL: SELECT accreditation_level FROM phone GROUP BY accreditation_level HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "How many models do not have the wifi function?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM chip_model WHERE wifi  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.wifi , t3.type FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.Hardware_model_name = \"LG-P760\";;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `chip_model` (\r\n  Model_name TEXT PRIMARY KEY,\r\n  Launch_year REAL,\r\n  RAM_MiB REAL,\r\n  ROM_MiB REAL,\r\n  Slots TEXT,\r\n  WiFi TEXT,\r\n  Bluetooth TEXT\r\n);\n\n", "input": "Count the number of chip model that do not have wifi.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM chip_model WHERE wifi  =  'No';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\nCREATE TABLE `screen_mode` (\r\n  Graphics_mode REAL PRIMARY KEY,\r\n  Char_cells TEXT,\r\n  Pixels TEXT,\r\n  Hardware_colours REAL,\r\n  used_kb REAL,\r\n  map TEXT,\r\n  Type TEXT\r\n);\n\n", "input": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "output": "```gerenated SQL\n-- SQL: SELECT t1.pixels FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode  =  t2.screen_mode WHERE t2.accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode  =  t2.screen_mode WHERE t2.accreditation_type  =  'Full';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `phone` (\r\n  Company_name TEXT,\r\n  Hardware_Model_name TEXT PRIMARY KEY,\r\n  Accreditation_type TEXT,\r\n  Accreditation_level TEXT,\r\n  Date TEXT,\r\n  chip_model TEXT REFERENCES chip_model(Model_name),\r\n  screen_mode TEXT REFERENCES screen_mode(Graphics_mode)\r\n);\n\n", "input": "How many phones belongs to each accreditation type?", "output": "```gerenated SQL\n-- SQL: SELECT accreditation_type ,  COUNT(*) FROM phone GROUP BY accreditation_type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "List the names of technicians who have not been assigned to repair machines.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "For each team, how many technicians are there?", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM technician GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "output": "```gerenated SQL\n-- SQL: SELECT starting_year FROM technician WHERE team  =  \"CLE\" INTERSECT SELECT starting_year FROM technician WHERE team  =  \"CWS\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the starting year of the oldest technicians?", "output": "```gerenated SQL\n-- SQL: SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "output": "```gerenated SQL\n-- SQL: SELECT starting_year FROM technician WHERE team  =  \"CLE\" INTERSECT SELECT starting_year FROM technician WHERE team  =  \"CWS\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "How many technicians are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM technician;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "List the names of technicians in ascending order of age.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician ORDER BY age ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show names of technicians who are assigned to repair machines with value point more than 70.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id WHERE t2.value_points  >  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the teams with the most technicians?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM technician GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the name of the technician whose team is not 'NYY'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE team != \"NYY\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of the technicians that have not been assigned to repair machines?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Please show the team that has the most number of technicians.", "output": "```gerenated SQL\n-- SQL: SELECT team FROM technician GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the starting year for the oldest technician?", "output": "```gerenated SQL\n-- SQL: SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show different teams of technicians and the number of technicians in each team.", "output": "```gerenated SQL\n-- SQL: SELECT team ,  COUNT(*) FROM technician GROUP BY team;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "List the name of technicians whose team is not \"NYY\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE team != \"NYY\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\nCREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\n", "input": "Show names of technicians and the number of machines they are assigned to repair.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM repair_assignment as t1 JOIN technician as t2 ON t1.technician_id  =  t2.technician_id GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show names of technicians and series of machines they are assigned to repair.", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.machine_series FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show the name of technicians aged either 36 or 37", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE age  =  36 OR age  =  37;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the team and starting year for each technician?", "output": "```gerenated SQL\n-- SQL: SELECT team ,  starting_year FROM technician;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "Show the team that have at least two technicians.", "output": "```gerenated SQL\n-- SQL: SELECT team FROM technician GROUP BY team HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id WHERE t2.value_points  >  70;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What is the team with at least 2 technicians?", "output": "```gerenated SQL\n-- SQL: SELECT team FROM technician GROUP BY team HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id ORDER BY t2.quality_rank;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the team and starting year of technicians?", "output": "```gerenated SQL\n-- SQL: SELECT team ,  starting_year FROM technician;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of the technicians aged either 36 or 37?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM technician WHERE age  =  36 OR age  =  37;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\nCREATE TABLE `machine` (\r\n  Machine_ID INT PRIMARY KEY,\r\n  Making_Year INT,\r\n  Class TEXT,\r\n  Team TEXT,\r\n  Machine_series TEXT,\r\n  value_points REAL,\r\n  quality_rank INT\r\n);\n\nCREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\n", "input": "What are the names of technicians and the machine series that they repair?", "output": "```gerenated SQL\n-- SQL: SELECT t3.name ,  t2.machine_series FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `technician` (\r\n  technician_id REAL PRIMARY KEY,\r\n  Name TEXT,\r\n  Team TEXT,\r\n  Starting_Year REAL,\r\n  Age INT\r\n);\n\nCREATE TABLE `repair_assignment` (\r\n  technician_id INT PRIMARY KEY REFERENCES technician(technician_id),\r\n  repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID),\r\n  Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID)\r\n);\n\n", "input": "What are the names of the technicians  and how many machines are they assigned to repair?", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  COUNT(*) FROM repair_assignment as t1 JOIN technician as t2 ON t1.technician_id  =  t2.technician_id GROUP BY t2.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "List the authors of submissions in ascending order of scores.", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission ORDER BY scores ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Show the most common college of authors of submissions.", "output": "```gerenated SQL\n-- SQL: SELECT college FROM submission GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `workshop` (\r\n  Workshop_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  venue FROM workshop ORDER BY venue;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "What is the average score of submissions?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(scores) FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "List the authors who do not have submission to any workshop.", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Which authors did not submit to any workshop?", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "output": "```gerenated SQL\n-- SQL: SELECT college FROM submission WHERE scores  >  90 INTERSECT SELECT college FROM submission WHERE scores  <  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Compute the average score of submissions.", "output": "```gerenated SQL\n-- SQL: SELECT AVG(scores) FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "How many submissions are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "For each submission, find its author and acceptance result.", "output": "```gerenated SQL\n-- SQL: SELECT t2.author ,  t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "How many workshops did each author submit to? Return the author name and the number of workshops.", "output": "```gerenated SQL\n-- SQL: SELECT t2.author ,  COUNT(DISTINCT t1.workshop_id) FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Show the names of authors from college \"Florida\" or \"Temple\"", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission WHERE college  =  \"Florida\" OR college  =  \"Temple\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Find the author for each submission and list them in ascending order of submission score.", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission ORDER BY scores ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "For each college, return the college name and the count of authors with submissions from that college.", "output": "```gerenated SQL\n-- SQL: SELECT college ,  COUNT(*) FROM submission GROUP BY college;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the authors who have submissions to more than one workshop.", "output": "```gerenated SQL\n-- SQL: SELECT t2.author FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author HAVING COUNT(DISTINCT t1.workshop_id)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "What is the author of the submission with the highest score?", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission ORDER BY scores DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `workshop` (\r\n  Workshop_ID INT PRIMARY KEY,\r\n  Date TEXT,\r\n  Venue TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "output": "```gerenated SQL\n-- SQL: SELECT date ,  venue FROM workshop ORDER BY venue;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Count the number of submissions.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Find the author who achieved the highest score in a submission.", "output": "```gerenated SQL\n-- SQL: SELECT author FROM submission ORDER BY scores DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the authors of submissions and the acceptance results of their submissions.", "output": "```gerenated SQL\n-- SQL: SELECT t2.author ,  t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show each author and the number of workshops they submitted to.", "output": "```gerenated SQL\n-- SQL: SELECT t2.author ,  COUNT(DISTINCT t1.workshop_id) FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "What are the authors of submissions and their colleges?", "output": "```gerenated SQL\n-- SQL: SELECT author ,  college FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "For each submission, show the author and their affiliated college.", "output": "```gerenated SQL\n-- SQL: SELECT author ,  college FROM submission;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Which submission received the highest score in acceptance result. Show me the result.", "output": "```gerenated SQL\n-- SQL: SELECT t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id ORDER BY t2.scores DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Which college has the most authors with submissions?", "output": "```gerenated SQL\n-- SQL: SELECT college FROM submission GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\nCREATE TABLE `Acceptance` (\r\n  Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID),\r\n  Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID),\r\n  Result TEXT\r\n);\n\n", "input": "Show the result of the submission with the highest score.", "output": "```gerenated SQL\n-- SQL: SELECT t1.result FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id ORDER BY t2.scores DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `submission` (\r\n  Submission_ID INT PRIMARY KEY,\r\n  Scores REAL,\r\n  Author TEXT,\r\n  College TEXT\r\n);\n\n", "input": "Show different colleges along with the number of authors of submission from each college.", "output": "```gerenated SQL\n-- SQL: SELECT college ,  COUNT(*) FROM submission GROUP BY college;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rent_Arrears` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.council_tax_id FROM rent_arrears as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id JOIN customer_master_index as t3 ON t3.master_customer_id  =  t2.master_customer_id WHERE t3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Benefits_Overpayments` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "output": "```gerenated SQL\n-- SQL: SELECT t1.source_system_code ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN benefits_overpayments as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id ORDER BY t2.council_tax_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?", "output": "```gerenated SQL\n-- SQL: SELECT t1.source_system_code ,  t1.master_customer_id ,  t2.council_tax_id FROM cmi_cross_references as t1 JOIN parking_fines as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Rent_Arrears` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "How many council taxes are collected for renting arrears ?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM rent_arrears;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Electoral_Register` (\r\n  electoral_register_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.electoral_register_id FROM electoral_register as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id WHERE t2.source_system_code  =  'Electoral' OR t2.source_system_code  =  'Tax';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "List the council tax ids and their related cmi cross references of all the parking fines.", "output": "```gerenated SQL\n-- SQL: SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.source_system_code FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t1.cmi_details  =  'Gottlieb ,  Becker and Wyman';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Business_Rates` (\r\n  business_rates_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\n", "input": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n", "output": "```gerenated SQL\n-- SQL: SELECT t2.cmi_cross_ref_id ,  t2.master_customer_id ,  COUNT(*) FROM business_rates as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "How many different source system code for the cmi cross references are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "Which distinct source system code includes the substring 'en'?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "List all information about customer master index, and sort them by details in descending order.", "output": "```gerenated SQL\n-- SQL: SELECT * FROM customer_master_index ORDER BY cmi_details DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\nCREATE TABLE `Customer_Master_Index` (\r\n  master_customer_id INTEGER,\r\n  cmi_details VARCHAR(255)\r\n);\n\n", "input": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.cmi_details FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t2.source_system_code  =  'Tax';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Parking_Fines` (\r\n  council_tax_id INTEGER,\r\n  cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id)\r\n);\n\nCREATE TABLE `CMI_Cross_References` (\r\n  cmi_cross_ref_id INTEGER,\r\n  master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id),\r\n  source_system_code CHAR(15)\r\n);\n\n", "input": "Which cmi cross reference id is not related to any parking taxes?", "output": "```gerenated SQL\n-- SQL: SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find all the product whose name contains the word \"Scanner\".", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product LIKE \"%Scanner%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "For each type of store, how many of them are there?", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM store GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of all the stores located in Khanewal District?", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "How many stores are headquarted in each city?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the most prominent max page size among all the products.", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the number of stores in each city.", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of all the stores in the largest district by population?", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the different district names in order of descending city area?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT district_name FROM district ORDER BY city_area DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the average number of pages per minute color?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(pages_per_minute_color) FROM product;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the name all districts with city area greater than 10 or population larger than 100000", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the name of the district with the most residents?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the total population of the districts where the area is bigger than the average city area.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the most common maximum page size?", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Products` (\r\n  Code INTEGER,\r\n  Name VARCHAR(255),\r\n  Price DECIMAL,\r\n  Manufacturer INTEGER REFERENCES Manufacturers(Code)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are all of the products whose name includes the substring \"Scanner\"?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product LIKE \"%Scanner%\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the city with the most number of stores.", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the total population of the top 3 districts with the largest area.", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the names of districts where have both city mall and village store type stores.", "output": "```gerenated SQL\n-- SQL: SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"City Mall\" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"Village Store\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What is the city with the most number of flagship stores?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the average pages per minute color?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(pages_per_minute_color) FROM product;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Which district has the largest population?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What city is the headquarter of the store Blackville?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\nCREATE TABLE `store_product` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What products are sold at the store named Miramichi?", "output": "```gerenated SQL\n-- SQL: SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What is the maximum page size for everything that has more than 3 products listed?", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the name of the products that are not using the most frequently-used max page size.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\nCREATE TABLE `store_product` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  Product_ID INT PRIMARY KEY REFERENCES product(Product_ID)\r\n);\n\nCREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What products are available at store named \"Miramichi\"?", "output": "```gerenated SQL\n-- SQL: SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "What are the names of the districts that have both mall and village store style shops?", "output": "```gerenated SQL\n-- SQL: SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"City Mall\" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"Village Store\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "output": "```gerenated SQL\n-- SQL: SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Which city is the headquarter of the store named \"Blackville\" in?", "output": "```gerenated SQL\n-- SQL: SELECT t3.headquartered_city FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find all the distinct district names ordered by city area in descending.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT district_name FROM district ORDER BY city_area DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the total population for all the districts that have an area larger tahn the average city area?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "Find the name and population of district with population between 200000 and 2000000", "output": "```gerenated SQL\n-- SQL: SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find all types of store and number of them.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM store GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find the names of all stores in Khanewal District.", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\n", "input": "What is the total number of residents for the districts with the 3 largest areas?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "Find the list of page size which have more than 3 product listed", "output": "```gerenated SQL\n-- SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `store_district` (\r\n  Store_ID INT PRIMARY KEY REFERENCES store(Store_ID),\r\n  District_ID INT REFERENCES district(District_ID)\r\n);\n\nCREATE TABLE `district` (\r\n  District_ID INT PRIMARY KEY,\r\n  District_name TEXT,\r\n  Headquartered_City TEXT,\r\n  City_Population REAL,\r\n  City_Area REAL\r\n);\n\nCREATE TABLE `store` (\r\n  Store_ID INT PRIMARY KEY,\r\n  Store_Name TEXT,\r\n  Type TEXT,\r\n  Area_size REAL,\r\n  Number_of_product_category REAL,\r\n  Ranking INT\r\n);\n\n", "input": "Find all the stores in the district with the most population.", "output": "```gerenated SQL\n-- SQL: SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `product` (\r\n  product_id INT PRIMARY KEY,\r\n  product TEXT,\r\n  dimensions TEXT,\r\n  dpi REAL,\r\n  pages_per_minute_color REAL,\r\n  max_page_size TEXT,\r\n  interface TEXT\r\n);\n\n", "input": "What are the names of all products that are not the most frequently-used maximum page size?", "output": "```gerenated SQL\n-- SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "output": "```gerenated SQL\n-- SQL: SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show the company name with the number of gas station.", "output": "```gerenated SQL\n-- SQL: SELECT t2.company ,  COUNT(*) FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id GROUP BY t1.company_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "For each location, how many gas stations are there in order?", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show minimum, maximum, and average market value for all companies.", "output": "```gerenated SQL\n-- SQL: SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show the manager name for gas stations belonging to the ExxonMobil company.", "output": "```gerenated SQL\n-- SQL: SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the headquarters without companies that are in the banking industry?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all headquarters without a company in banking industry.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the total number of companies?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all company names and headquarters in the descending order of market value.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "output": "```gerenated SQL\n-- SQL: SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show the manager name with most number of gas stations opened after 2000.", "output": "```gerenated SQL\n-- SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the companies and main industries of all companies that are not headquartered in the United States?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show all locations and the number of gas stations in each location ordered by the count.", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM gas_station GROUP BY location ORDER BY COUNT(*);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "How many gas station are opened between 2000 and 2005?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "List the company name and rank for all companies in the decreasing order of their sales.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  rank FROM company ORDER BY sales_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the name and rank of every company ordered by descending number of sales?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  rank FROM company ORDER BY sales_billion DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the main indstries and total market value for each industry?", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "For each headquarter, what are the headquarter and how many companies are centered there?", "output": "```gerenated SQL\n-- SQL: SELECT headquarters ,  COUNT(*) FROM company GROUP BY headquarters;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all main industry for all companies.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT main_industry FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "How many gas companies are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "output": "```gerenated SQL\n-- SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the names and headquarters of all companies ordered by descending market value?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the different main industries for all companies?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT main_industry FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show company name and main industry without a gas station.", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What are the locations of all the gas stations ordered by opening year?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all main industry and total market value in each industry.", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  SUM(market_value) FROM company GROUP BY main_industry;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the main industries of the companies without gas stations and what are the companies?", "output": "```gerenated SQL\n-- SQL: SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What is the name of the manager with the most gas stations that opened after 2000?", "output": "```gerenated SQL\n-- SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "What is the total number of gas stations that opened between 2000 and 2005?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "output": "```gerenated SQL\n-- SQL: SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "order all gas station locations by the opening year.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "List the main industry with highest total market value and its number of companies.", "output": "```gerenated SQL\n-- SQL: SELECT main_industry ,  COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\n", "input": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "output": "```gerenated SQL\n-- SQL: SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show all locations where a gas station for company with market value greater than 100 is located.", "output": "```gerenated SQL\n-- SQL: SELECT t3.location FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.market_value  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "Show headquarters with at least two companies in the banking industry.", "output": "```gerenated SQL\n-- SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "output": "```gerenated SQL\n-- SQL: SELECT t3.manager_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id WHERE t2.company  =  'ExxonMobil';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `gas_station` (\r\n  Station_ID INT PRIMARY KEY,\r\n  Open_Year INT,\r\n  Location TEXT,\r\n  Manager_Name TEXT,\r\n  Vice_Manager_Name TEXT,\r\n  Representative_Name TEXT\r\n);\n\nCREATE TABLE `station_company` (\r\n  Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID),\r\n  Company_ID INT PRIMARY KEY REFERENCES company(Company_ID),\r\n  Rank_of_the_Year INT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "output": "```gerenated SQL\n-- SQL: SELECT t3.location ,  t3.representative_name FROM station_company as t1 JOIN company as t2 ON t1.company_id  =  t2.company_id JOIN gas_station as t3 ON t1.station_id  =  t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Companies` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  Headquarters TEXT,\r\n  Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value_billion TEXT\r\n);\n\nCREATE TABLE `company` (\r\n  Company_ID INT PRIMARY KEY,\r\n  Rank INT,\r\n  Company TEXT,\r\n  Headquarters TEXT,\r\n  Main_Industry TEXT,\r\n  Sales_billion REAL,\r\n  Profits_billion REAL,\r\n  Assets_billion REAL,\r\n  Market_Value REAL\r\n);\n\n", "input": "What is the minimum, maximum, and average market value for every company?", "output": "```gerenated SQL\n-- SQL: SELECT MIN(market_value) ,  MAX(market_value) ,  AVG(market_value) FROM company;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What is the average number of audience for festivals?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(num_of_audience) FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "List the year in which there are more than one festivals.", "output": "```gerenated SQL\n-- SQL: SELECT year FROM festival_detail GROUP BY year HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "Show the number of audience in year 2008 or 2010.", "output": "```gerenated SQL\n-- SQL: SELECT num_of_audience FROM festival_detail WHERE year  =  2008 OR year  =  2010;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "How many artworks are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM artwork;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show the ids and names of festivals that have at least two nominations for artworks.", "output": "```gerenated SQL\n-- SQL: SELECT t1.festival_id ,  t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the most common type of artworks.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM artwork GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "Show the names of the three most recent festivals.", "output": "```gerenated SQL\n-- SQL: SELECT festival_name FROM festival_detail ORDER BY year DESC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t3.Festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What is the location of the festival with the largest number of audience?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "output": "```gerenated SQL\n-- SQL: SELECT chair_name FROM festival_detail ORDER BY year ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "output": "```gerenated SQL\n-- SQL: SELECT t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t2.type  =  \"Program Talent Show\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the name of artworks whose type is not \"Program Talent Show\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork WHERE type != \"Program Talent Show\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the total number of the audiences who visited any of the festivals?", "output": "```gerenated SQL\n-- SQL: SELECT SUM(num_of_audience) FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show the id, name of each festival and the number of artworks it has nominated.", "output": "```gerenated SQL\n-- SQL: SELECT t1.festival_id ,  t3.festival_name ,  COUNT(*) FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "What are the names and locations of festivals?", "output": "```gerenated SQL\n-- SQL: SELECT festival_name ,  location FROM festival_detail;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\n", "input": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "output": "```gerenated SQL\n-- SQL: SELECT year FROM festival_detail WHERE location  =  'United States' INTERSECT SELECT year FROM festival_detail WHERE location != 'United States';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "List the name of artworks in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM artwork ORDER BY name ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show distinct types of artworks that are nominated in festivals in 2007.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t2.type FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id WHERE t3.year  =  2007;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `nomination` (\r\n  Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID),\r\n  Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID),\r\n  Result TEXT\r\n);\n\nCREATE TABLE `festival_detail` (\r\n  Festival_ID INT PRIMARY KEY,\r\n  Festival_Name TEXT,\r\n  Chair_Name TEXT,\r\n  Location TEXT,\r\n  Year INT,\r\n  Num_of_Audience INT\r\n);\n\nCREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Show the names of artworks in ascending order of the year they are nominated in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id ORDER BY t3.year;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `artwork` (\r\n  Artwork_ID INT PRIMARY KEY,\r\n  Type TEXT,\r\n  Name TEXT\r\n);\n\n", "input": "Please show different types of artworks with the corresponding number of artworks of each type.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM artwork GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the number of buildings with a height above the average or a number of floors above the average.", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM building WHERE height_feet  >  (SELECT AVG(height_feet) FROM building) OR floors  >  (SELECT AVG(floors) FROM building);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "How many proteins are associated with an institution in a building with at least 20 floors?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id JOIN building as t3 ON t3.building_id  =  t1.building_id WHERE t3.floors  >=  20;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the protein name and the institution name.", "output": "```gerenated SQL\n-- SQL: SELECT t2.protein_name ,  t1.institution FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "What are the average, maximum, and minimum number of floors for all buildings?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(floors) ,  MAX(floors) ,  MIN(floors) FROM building;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show institution types, along with the number of institutions and total enrollment for each type.", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) ,  SUM(enrollment) FROM institution GROUP BY type;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `buildings` (\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  City TEXT,\r\n  Height INT,\r\n  Stories INT,\r\n  Status TEXT\r\n);\n\n", "input": "What is the name of the tallest building?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building ORDER BY height_feet DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "How many buildings are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM building;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "How many institutions do not have an associated protein in our record?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\n", "input": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  street_address ,  floors FROM building ORDER BY floors;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the names of buildings except for those having an institution founded in 2003.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building EXCEPT SELECT t1.name FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  =  2003;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id WHERE t1.founded  >  1880 OR t1.type  =  'Private';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "output": "```gerenated SQL\n-- SQL: SELECT institution ,  location FROM institution WHERE founded  >  1990 AND type  =  'Private';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the name of buildings that do not have any institution.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `building` (\r\n  building_id TEXT PRIMARY KEY,\r\n  Name TEXT,\r\n  Street_address TEXT,\r\n  Years_as_tallest TEXT,\r\n  Height_feet INT,\r\n  Floors INT\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the names and heights of buildings with at least two institutions founded after 1880.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.height_feet FROM building as t1 JOIN institution as t2 ON t1.building_id  =  t2.building_id WHERE t2.founded  >  1880 GROUP BY t1.building_id HAVING COUNT(*)  >=  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show all the distinct institution types.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT type FROM institution;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `protein` (\r\n  common_name TEXT PRIMARY KEY,\r\n  protein_name TEXT,\r\n  divergence_from_human_lineage REAL,\r\n  accession_number TEXT,\r\n  sequence_length REAL,\r\n  sequence_identity_to_human_protein TEXT,\r\n  Institution_id TEXT REFERENCES Institution(Institution_id)\r\n);\n\nCREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show institution names along with the number of proteins for each institution.", "output": "```gerenated SQL\n-- SQL: SELECT t1.institution ,  COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id GROUP BY t1.institution_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Institution` (\r\n  Institution_id TEXT PRIMARY KEY,\r\n  Institution TEXT,\r\n  Location TEXT,\r\n  Founded REAL,\r\n  Type TEXT,\r\n  Enrollment INT,\r\n  Team TEXT,\r\n  Primary_Conference TEXT,\r\n  building_id TEXT REFERENCES building(building_id)\r\n);\n\n", "input": "Show the institution type with the largest number of institutions.", "output": "```gerenated SQL\n-- SQL: SELECT type FROM institution GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the different statuses and the numbers of roller coasters for each status.", "output": "```gerenated SQL\n-- SQL: SELECT status ,  COUNT(*) FROM roller_coaster GROUP BY status;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the park of the roller coaster with the highest speed.", "output": "```gerenated SQL\n-- SQL: SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the speeds of the longest roller coaster?", "output": "```gerenated SQL\n-- SQL: SELECT speed FROM roller_coaster ORDER BY length DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "Show the names of countries that have more than one roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "Show the name and population of the country that has the highest roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  t1.population FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id ORDER BY t2.height DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What is the average speed of roller coasters?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(speed) FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Please show the most common status of roller coasters.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "How many countries do not have an roller coaster longer than 3000?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE length  >  3000 );\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster WHERE length  >  3300 OR height  >  100;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "Show the names of roller coasters and names of country they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.name FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "How many roller coasters are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\nCREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "Show the names of countries and the average speed of roller coasters from each country.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name ,  AVG(t2.speed) FROM country as t1 JOIN roller_coaster as t2 ON t1.country_id  =  t2.country_id GROUP BY t1.name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "List the status shared by more than two roller coaster.", "output": "```gerenated SQL\n-- SQL: SELECT status FROM roller_coaster GROUP BY status HAVING COUNT(*)  >  2;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `country` (\r\n  Country_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Population INT,\r\n  Area INT,\r\n  Languages TEXT\r\n);\n\n", "input": "List the names of countries whose language is not \"German\".", "output": "```gerenated SQL\n-- SQL: SELECT name FROM country WHERE languages != \"German\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "What are the lengths and heights of roller coasters?", "output": "```gerenated SQL\n-- SQL: SELECT length ,  height FROM roller_coaster;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `roller_coaster` (\r\n  Roller_Coaster_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Park TEXT,\r\n  Country_ID INT REFERENCES country(Country_ID),\r\n  Length REAL,\r\n  Height REAL,\r\n  Speed TEXT,\r\n  Opened TEXT,\r\n  Status TEXT\r\n);\n\n", "input": "List the names of roller coasters by ascending order of length.", "output": "```gerenated SQL\n-- SQL: SELECT name FROM roller_coaster ORDER BY length ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "List the service id and details for the events.", "output": "```gerenated SQL\n-- SQL: SELECT service_id ,  event_details FROM events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "Which services type had both successful and failure event details?", "output": "```gerenated SQL\n-- SQL: SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Success' INTERSECT SELECT t1.service_type_code FROM services as t1 JOIN events as t2 ON t1.service_id  =  t2.service_id WHERE t2.event_details  =  'Fail';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "How many events did not have any participants?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "What are the ids and details of events that have more than one participants?", "output": "```gerenated SQL\n-- SQL: SELECT t1.event_id ,  t1.event_details FROM events as t1 JOIN participants_in_events as t2 ON t1.event_id  =  t2.event_id GROUP BY t1.event_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "What are all the distinct participant ids who attended any events?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT participant_id) FROM participants_in_events;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "Which service id and type has the least number of participants?", "output": "```gerenated SQL\n-- SQL: SELECT t3.service_id ,  t4.service_type_code FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id JOIN events as t3 ON t2.event_id   =  t3.event_id JOIN services as t4 ON t3.service_id  =  t4.service_id GROUP BY t3.service_id ORDER BY COUNT(*) asC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "What is the most common participant type?", "output": "```gerenated SQL\n-- SQL: SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "How many events had participants whose details had the substring 'Dr.'", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM participants as t1 JOIN participants_in_events as t2 ON t1.participant_id  =  t2.participant_id WHERE t1.participant_details LIKE '%Dr.%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "What is the id of the event with the most participants?", "output": "```gerenated SQL\n-- SQL: SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "How many participants belong to the type 'Organizer'?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM participants WHERE participant_type_code  =  'Organizer';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "output": "```gerenated SQL\n-- SQL: SELECT event_id FROM events EXCEPT SELECT t1.event_id FROM participants_in_events as t1 JOIN participants as t2 ON t1.participant_id  =  t2.participant_id WHERE participant_details  =  'Kenyatta Kuhn';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Services` (\r\n  Service_ID INTEGER,\r\n  Service_Type_Code CHAR(15)\r\n);\n\nCREATE TABLE `Events` (\r\n  Event_ID INTEGER,\r\n  Service_ID INTEGER REFERENCES Services(Service_ID),\r\n  Event_Details VARCHAR(255)\r\n);\n\n", "input": "what are the event details of the services that have the type code 'Marriage'?", "output": "```gerenated SQL\n-- SQL: SELECT t1.event_details FROM events as t1 JOIN services as t2 ON t1.service_id  =  t2.service_id WHERE t2.service_type_code  =  'Marriage';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\n", "input": "What are all the the participant ids, type code and details?", "output": "```gerenated SQL\n-- SQL: SELECT participant_id ,  participant_type_code ,  participant_details FROM  participants;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `Participants` (\r\n  Participant_ID INTEGER,\r\n  Participant_Type_Code CHAR(15),\r\n  Participant_Details VARCHAR(255)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\nCREATE TABLE `Participants_in_Events` (\r\n  Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID),\r\n  Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID)\r\n);\n\n", "input": "How many events have each participants attended? List the participant id, type and the number.", "output": "```gerenated SQL\n-- SQL: SELECT t1.participant_id ,  t1.participant_type_code ,  COUNT(*) FROM participants as t1 JOIN participants_in_Events as t2 ON t1.participant_id  =  t2.participant_id GROUP BY t1.participant_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What is the average length in feet of the bridges?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(length_feet) FROM bridge;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What is the id, name and nationality of the architect who built most mills?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What is the maximum length in meters for the bridges and what are the architects' names?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(t1.length_meters) ,  t2.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the ids and names of the architects who built at least 3 bridges ?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  >=  3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "How many architects are female?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM architect WHERE gender  =  'female';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "How many architects haven't built a mill before year 1850?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What are the names of the mills which are not located in 'Donceel'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM mill WHERE location != 'Donceel';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the ids, names and genders of the architects who built two bridges or one mill?", "output": "```gerenated SQL\n-- SQL: SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN bridge as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  2 UNION SELECT t1.id ,  t1.name ,  t1.gender FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id HAVING COUNT(*)  =  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the distinct types of mills that are built by American or Canadian architects?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.type FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' OR t2.nationality  =  'Canadian';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "What is the most common mill type, and how many are there?", "output": "```gerenated SQL\n-- SQL: SELECT type ,  COUNT(*) FROM mill GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "output": "```gerenated SQL\n-- SQL: SELECT t1.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "output": "```gerenated SQL\n-- SQL: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\nCREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id JOIN bridge as t3 ON t3.architect_id  =  t2.id WHERE t3.length_meters  >  80;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\n", "input": "Which of the mill names contains the french word 'Moulin'?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `mill` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  location TEXT,\r\n  name TEXT,\r\n  type TEXT,\r\n  built_year INT,\r\n  notes TEXT\r\n);\n\nCREATE TABLE `architect` (\r\n  id TEXT PRIMARY KEY,\r\n  name TEXT,\r\n  nationality TEXT,\r\n  gender TEXT\r\n);\n\n", "input": "What are the distinct names and nationalities of the architects who have ever built a mill?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `bridge` (\r\n  architect_id INT REFERENCES architect(id),\r\n  id INT PRIMARY KEY,\r\n  name TEXT,\r\n  location TEXT,\r\n  length_meters REAL,\r\n  length_feet REAL\r\n);\n\n", "input": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "output": "```gerenated SQL\n-- SQL: SELECT location FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge';\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show the locations that have more than one railways.", "output": "```gerenated SQL\n-- SQL: SELECT location FROM railway GROUP BY location HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show the most common builder of railways.", "output": "```gerenated SQL\n-- SQL: SELECT builder FROM railway GROUP BY builder ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What are the names of managers in ascending order of level?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manager ORDER BY level ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the countries that have both managers of age above 50 and managers of age below 46.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM manager WHERE age  >  50 INTERSECT SELECT country FROM manager WHERE age  <  46;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "What are the names and arrival times of trains?", "output": "```gerenated SQL\n-- SQL: SELECT name ,  arrival FROM train;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the maximum level of managers in countries that are not \"Australia\"?", "output": "```gerenated SQL\n-- SQL: SELECT MAX(level) FROM manager WHERE country != \"Australia\t\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the working years of managers in descending order of their level.", "output": "```gerenated SQL\n-- SQL: SELECT working_year_starts FROM manager ORDER BY level DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "How many railways are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM railway;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the name of the oldest manager?", "output": "```gerenated SQL\n-- SQL: SELECT name FROM manager ORDER BY age DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "output": "```gerenated SQL\n-- SQL: SELECT t1.builder FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id WHERE t2.name  =  \"Andaman Exp\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show the names of trains and locations of railways they are in.", "output": "```gerenated SQL\n-- SQL: SELECT t2.name ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show different locations of railways along with the corresponding number of railways at each location.", "output": "```gerenated SQL\n-- SQL: SELECT location ,  COUNT(*) FROM railway GROUP BY location;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "List the wheels and locations of the railways.", "output": "```gerenated SQL\n-- SQL: SELECT wheels ,  location FROM railway;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "What is the average age for all managers?", "output": "```gerenated SQL\n-- SQL: SELECT AVG(age) FROM manager;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "List the builders of railways in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT builder FROM railway ORDER BY builder ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\nCREATE TABLE `train` (\r\n  Train_ID INT PRIMARY KEY,\r\n  Train_Num TEXT,\r\n  Name TEXT,\r\n  From TEXT,\r\n  Arrival TEXT,\r\n  Railway_ID INT REFERENCES railway(Railway_ID)\r\n);\n\n", "input": "Show id and location of railways that are associated with more than one train.", "output": "```gerenated SQL\n-- SQL: SELECT t2.railway_id ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the distinct countries of managers.", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT country FROM manager;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `railway` (\r\n  Railway_ID INT PRIMARY KEY,\r\n  Railway TEXT,\r\n  Builder TEXT,\r\n  Built TEXT,\r\n  Wheels TEXT,\r\n  Location TEXT,\r\n  ObjectNumber TEXT\r\n);\n\n", "input": "Show different builders of railways, along with the corresponding number of railways using each builder.", "output": "```gerenated SQL\n-- SQL: SELECT builder ,  COUNT(*) FROM railway GROUP BY builder;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `manager` (\r\n  Manager_ID INT PRIMARY KEY,\r\n  Name TEXT,\r\n  Country TEXT,\r\n  Working_year_starts TEXT,\r\n  Age INT,\r\n  Level INT\r\n);\n\n", "input": "Show the countries that have managers of age above 50 or below 46.", "output": "```gerenated SQL\n-- SQL: SELECT country FROM manager WHERE age  >  50 OR age  <  46;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What are the dates of publications in descending order of price?", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication ORDER BY price DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What is the number of distinct publication dates?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT publication_date) FROM publication;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the writers who have written more than one book.", "output": "```gerenated SQL\n-- SQL: SELECT writer FROM book GROUP BY writer HAVING COUNT(*)  >  1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "What are the distinct publishers of publications with price higher than 5000000?", "output": "```gerenated SQL\n-- SQL: SELECT DISTINCT publisher FROM publication WHERE price  >  5000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication WHERE price  >  10000000 INTERSECT SELECT publisher FROM publication WHERE price  <  5000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book WHERE writer != \"Elaine Lee\";\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Please show the most common publication date.", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "Show the title and publication dates of books.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title ,  t2.publication_date FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "What are the title and issues of the books?", "output": "```gerenated SQL\n-- SQL: SELECT title ,  issues FROM book;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "Show writers who have published a book with price more than 4000000.", "output": "```gerenated SQL\n-- SQL: SELECT t1.writer FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id WHERE t2.price  >  4000000;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the titles of the books in ascending order of issues.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book ORDER BY issues ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "List the publisher of the publication with the highest price.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication ORDER BY price DESC LIMIT 1;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "How many distinct publication dates are there in our record?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(DISTINCT publication_date) FROM publication;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\nCREATE TABLE `book_club` (\r\n  book_club_id INT PRIMARY KEY,\r\n  Year INT,\r\n  Author_or_Editor TEXT,\r\n  Book_Title TEXT,\r\n  Publisher TEXT,\r\n  Category TEXT,\r\n  Result TEXT\r\n);\n\n", "input": "How many books are there?", "output": "```gerenated SQL\n-- SQL: SELECT COUNT(*) FROM book;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the writers of the books in ascending alphabetical order.", "output": "```gerenated SQL\n-- SQL: SELECT writer FROM book ORDER BY writer ASC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "List the publication dates of publications with 3 lowest prices.", "output": "```gerenated SQL\n-- SQL: SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "List the titles of books that are not published.", "output": "```gerenated SQL\n-- SQL: SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication);\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\nCREATE TABLE `book` (\r\n  Book_ID INT PRIMARY KEY,\r\n  Title TEXT,\r\n  Issues REAL,\r\n  Writer TEXT\r\n);\n\n", "input": "Show the titles of books in descending order of publication price.", "output": "```gerenated SQL\n-- SQL: SELECT t1.title FROM book as t1 JOIN publication as t2 ON t1.book_id  =  t2.book_id ORDER BY t2.price DESC;\n```"}
{"instruction": " I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request. \n##instruction:CREATE TABLE `publication` (\r\n  Publication_ID INT PRIMARY KEY,\r\n  Book_ID INT REFERENCES book(Book_ID),\r\n  Publisher TEXT,\r\n  Publication_Date TEXT,\r\n  Price REAL\r\n);\n\n", "input": "Show publishers that have more than one publication.", "output": "```gerenated SQL\n-- SQL: SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*)  >  1;\n```"}
